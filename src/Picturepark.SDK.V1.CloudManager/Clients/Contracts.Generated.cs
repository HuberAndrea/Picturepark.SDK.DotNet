//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.10.6282.20487 (NJsonSchema v8.9.6282.20486) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Picturepark.SDK.V1.CloudManager.Contract
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.10.6282.20487")]
    public partial interface ICustomersClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> CreateAsync(CustomerCreateRequest createRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> CreateAsync(CustomerCreateRequest createRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> UpdateAsync(CustomerUpdateRequest updateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> UpdateAsync(CustomerUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> GetAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> GetAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DeleteAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DeleteAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> ListAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> ListAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> SearchAsync(CustomerSearchRequest searchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> SearchAsync(CustomerSearchRequest searchRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserViewItem>> GetAllUsersAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserViewItem>> GetAllUsersAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> AddExternalProvidersAsync(string customerId, System.Collections.Generic.IEnumerable<ExternalProviderItem> addRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> AddExternalProvidersAsync(string customerId, System.Collections.Generic.IEnumerable<ExternalProviderItem> addRequest, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.10.6282.20487")]
    public partial interface IServicesClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartServiceAsync(string serviceName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartServiceAsync(string serviceName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownServiceAsync(string serviceName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownServiceAsync(string serviceName, System.Threading.CancellationToken cancellationToken);
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BackupEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool BackupEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheRetentionTimeInMinutes", Required = Newtonsoft.Json.Required.Always)]
        public int CacheRetentionTimeInMinutes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseSsl", Required = Newtonsoft.Json.Required.Always)]
        public bool UseSsl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CDNUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CDNUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ExternalProviderItem> ExternalProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerServiceProviderItem> ServiceProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CorsAllowedHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NoReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LanguageConfigurationItem LanguageConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OutputFormatStoreItem> OutputFormats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessEngineConnectionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessEngineConnectionString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreateTransferBusinessProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateTransferBusinessProcess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TranslatedStringDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class ExternalProviderItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProviderName", Required = Newtonsoft.Json.Required.Always)]
        public ExternalProviderName ProviderName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationSecret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationSecret { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OAuthServiceApi> Services { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedirectUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUri { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExternalProviderItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalProviderItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum ExternalProviderName
    {
        Google = 1,
    
        Windows = 2,
    
        Dropbox = 3,
    
        Buffer = 4,
    
        Picturepark = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class OAuthServiceApi 
    {
        [Newtonsoft.Json.JsonProperty("Scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Scopes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OAuthServiceType", Required = Newtonsoft.Json.Required.Always)]
        public OAuthServiceType OAuthServiceType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OAuthServiceApi FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OAuthServiceApi>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum OAuthServiceType
    {
        Drive = 1,
    
        SocialMedia = 2,
    
        AssetStore = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerServiceProviderItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Scopes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerAllowedMessage> AllowedMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerAllowedCommand> AllowedCommands { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> UserRoleIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerServiceProviderItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerServiceProviderItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerAllowedMessage 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerAllowedMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAllowedMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerAllowedCommand 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerAllowedCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAllowedCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class LanguageConfigurationItem 
    {
        [Newtonsoft.Json.JsonProperty("SystemLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SystemLanguages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataLanguages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LanguageConfigurationItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageConfigurationItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class BaseStoreItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseStoreItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseStoreItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class OutputFormatStoreItem : BaseStoreItem
    {
        [Newtonsoft.Json.JsonProperty("Static", Required = Newtonsoft.Json.Required.Always)]
        public bool Static { get; set; }
    
        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Dynamic", Required = Newtonsoft.Json.Required.Always)]
        public bool Dynamic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DataExtraction", Required = Newtonsoft.Json.Required.Always)]
        public bool DataExtraction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Temporary", Required = Newtonsoft.Json.Required.Always)]
        public bool Temporary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SourceOutputFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOutputFormats SourceOutputFormats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Render", Required = Newtonsoft.Json.Required.Always)]
        public bool Render { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormatBase Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputFormatStoreItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatStoreItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class SourceOutputFormats 
    {
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Video", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Video { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Audio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SourceOutputFormats FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SourceOutputFormats>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class FormatBase 
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class ImageFormatBase : FormatBase
    {
        [Newtonsoft.Json.JsonProperty("ColorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorProfile? ColorProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorTransformationIntent", Required = Newtonsoft.Json.Required.Always)]
        public ColorTransformationIntent ColorTransformationIntent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HorizontalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenderFirstFrameOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool RenderFirstFrameOnly { get; set; }
    
        [Newtonsoft.Json.JsonProperty("KeepClippingPath", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepClippingPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneExif", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneExif { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneIptc", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneIptc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneAdobeResources", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneAdobeResources { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneXmp", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneXmp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ImageActionBase> Actions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum ColorProfile
    {
        AdobeRgb1998 = 1,
    
        AppleRgb = 2,
    
        ColorMatchRgb = 3,
    
        EciRgbV1 = 4,
    
        EciRgbV2 = 5,
    
        Srgb = 6,
    
        SrgbColorSpaceProfile = 7,
    
        EuropeIsoCoatedFogra27 = 8,
    
        EuroscaleCoated = 9,
    
        EuroscaleUncoated = 10,
    
        IsoCoated = 11,
    
        IsoCoatedEciV2 = 12,
    
        JapanColor2001Coated = 13,
    
        JapanColor2001Uncoated = 14,
    
        JapanColor2002Newspaper = 15,
    
        JapanWebCoated = 16,
    
        UsSheetfedCoated = 17,
    
        UsSheetfedUncoated = 18,
    
        UsWebCoatedSwop = 19,
    
        UsWebUncoated = 20,
    
        IsoCoatedV2Grey1cBas = 21,
    
        IsoCoated300EciV2 = 22,
    
        CoatedFogra27 = 23,
    
        CoatedFogra39 = 24,
    
        UncoatedFogra29 = 25,
    
        WebCoatedFogra28 = 26,
    
        WebCoatedSwop2006Grade3 = 27,
    
        WebCoatedSwop2006Grade5 = 28,
    
        Isonewspaper26v4 = 29,
    
        Isonewspaper26v4Grey = 30,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum ColorTransformationIntent
    {
        RelativeColorimetricBpc = 1,
    
        AbsoluteColorimetric = 2,
    
        Perceptual = 3,
    
        RelativeColorimetric = 4,
    
        Saturation = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class ResizeAction 
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeMode", Required = Newtonsoft.Json.Required.Always)]
        public ResizeMode ResizeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResizeAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum ResizeMode
    {
        Fit = 0,
    
        Shrink = 1,
    
        Resize = 2,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class ImageActionBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageActionBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageActionBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class AlphaHandlingAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("AlphaHandling", Required = Newtonsoft.Json.Required.Always)]
        public AlphaHandling AlphaHandling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReplacementRgbColorHexCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementRgbColorHexCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AlphaHandlingAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaHandlingAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum AlphaHandling
    {
        DiscardAlpha = 1,
    
        ReplaceAlpha = 2,
    
        ReplaceInvertedAlpha = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CropAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("X", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CropAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class UnsharpenMaskAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Radius", Required = Newtonsoft.Json.Required.Always)]
        public double Radius { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Threshold", Required = Newtonsoft.Json.Required.Always)]
        public double Threshold { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnsharpenMaskAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsharpenMaskAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class WatermarkAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("WatermarkFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginTop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginRight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginBottom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Opacity", Required = Newtonsoft.Json.Required.Always)]
        public double Opacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double WidthRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightRatio", Required = Newtonsoft.Json.Required.Always)]
        public double HeightRatio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WatermarkAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WatermarkAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class OriginalFormat : FormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OriginalFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class JpegFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Always)]
        public int Quality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsProgressive", Required = Newtonsoft.Json.Required.Always)]
        public bool IsProgressive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChromaSubsamplingEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool ChromaSubsamplingEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JpegFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JpegFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class PngFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("Interlaced", Required = Newtonsoft.Json.Required.Always)]
        public bool Interlaced { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PngFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PngFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class TiffFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("AlphaPremultiplied", Required = Newtonsoft.Json.Required.Always)]
        public bool AlphaPremultiplied { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompressionType", Required = Newtonsoft.Json.Required.Always)]
        public CompressionType CompressionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeUnspecifiedTiffExtraChannels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TiffFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TiffFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum CompressionType
    {
        None = 1,
    
        Lzw = 2,
    
        Rle = 3,
    
        Zip = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class VideoFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class Mp4VideoFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("ResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction2 ResizeAction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioCodec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioFormatBase AudioCodec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Preset", Required = Newtonsoft.Json.Required.Always)]
        public Preset Preset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IVideoAction> Actions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mp4VideoFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp4VideoFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class ResizeAction2 
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeMode", Required = Newtonsoft.Json.Required.Always)]
        public ResizeMode ResizeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResizeAction2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class AudioFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class VideoPresetFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("VideoPresetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid VideoPresetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoPresetFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoPresetFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class VideoSpriteFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("SpriteResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction2 SpriteResizeAction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxNumberOfSprites", Required = Newtonsoft.Json.Required.Always)]
        public int MaxNumberOfSprites { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Always)]
        public int Quality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoSpriteFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoSpriteFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class VideoStillFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PositionInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public int PositionInSeconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class AacAudioFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Profile", Required = Newtonsoft.Json.Required.Always)]
        public Profile Profile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Coder", Required = Newtonsoft.Json.Required.Always)]
        public Coder Coder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VariableBitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VariableBitRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AacAudioFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AacAudioFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum Profile
    {
        Aac_low = 0,
    
        Mpeg2_aac_low = 1,
    
        Aac_ltp = 2,
    
        Aac_main = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum Coder
    {
        Twoloop = 0,
    
        Anmr = 1,
    
        Fast = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class AudioPresetFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("AudioPresetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid AudioPresetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioPresetFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioPresetFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class AudioStillFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class Mp3AudioFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mp3AudioFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp3AudioFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class DocumentFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class DocumentStillFormat : DocumentFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class PdfFormat : DocumentFormatBase
    {
        [Newtonsoft.Json.JsonProperty("JpegQuality", Required = Newtonsoft.Json.Required.Always)]
        public int JpegQuality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FastWebView", Required = Newtonsoft.Json.Required.Always)]
        public bool FastWebView { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReduceFileSize", Required = Newtonsoft.Json.Required.Always)]
        public bool ReduceFileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtractFullText", Required = Newtonsoft.Json.Required.Always)]
        public bool ExtractFullText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PdfFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum Preset
    {
        Ultrafast = 0,
    
        Superfast = 1,
    
        Veryfast = 2,
    
        Faster = 3,
    
        Fast = 4,
    
        Medium = 5,
    
        Slow = 6,
    
        Slower = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class IVideoAction 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IVideoAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IVideoAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class StoreAudit 
    {
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem CreatedByUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StoreAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StoreAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class UserItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerConfigurationItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MainCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatisticsCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticsCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentHistoryCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentHistoryCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LiveStreamCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LiveStreamCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CacheCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseSsl", Required = Newtonsoft.Json.Required.Always)]
        public bool UseSsl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ExternalProviderItem> ExternalProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerServiceProviderItem> ServiceProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CDNUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CDNUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CorsAllowedHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NoReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LanguageConfigurationItem LanguageConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessEngineConnectionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessEngineConnectionString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreateTransferBusinessProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateTransferBusinessProcess { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedisDatabaseIndex", Required = Newtonsoft.Json.Required.Always)]
        public int RedisDatabaseIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BackupEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool BackupEnabled { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerConfigurationItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerConfigurationItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BackupEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool BackupEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheRetentionTimeInMinutes", Required = Newtonsoft.Json.Required.Always)]
        public int CacheRetentionTimeInMinutes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseSsl", Required = Newtonsoft.Json.Required.Always)]
        public bool UseSsl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CDNUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CDNUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CorsAllowedHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NoReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class BaseResultOfCustomerViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfCustomerViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfCustomerViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerSearchResult : BaseResultOfCustomerViewItem
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeactivationComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MainCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkPath { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class UserViewItem : UserItem
    {
        [Newtonsoft.Json.JsonProperty("UserRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> UserRoleIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class CustomerSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class SortInfo 
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Always)]
        public SortDirection Direction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SortInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public enum SortDirection
    {
        Asc = 1,
    
        Desc = 2,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class FilterBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class AndFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AndFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class OrFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class NotFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class DateRangeFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class DateRange 
    {
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class ExistsFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TopLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation TopLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BottomRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation BottomRight { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoBoundingBoxFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class GeoLocation 
    {
        [Newtonsoft.Json.JsonProperty("Lat", Required = Newtonsoft.Json.Required.Always)]
        public double Lat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lon", Required = Newtonsoft.Json.Required.Always)]
        public double Lon { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class GeoDistanceFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class GeoDistanceRangeFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class NumericRange 
    {
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class NestedFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Join", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Join { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class NumericRangeFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class PrefixFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PrefixFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class TermFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Term { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class TermsFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Terms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    public partial class AggregationFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("AggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.9.6282.20486")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
            
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, value.GetType().Name));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false; 
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            var objectTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType);
            var customAttributes = System.Reflection.CustomAttributeExtensions.GetCustomAttributes(objectTypeInfo);
    
            var knownTypeAttributes = System.Linq.Enumerable.Where(customAttributes, a => a.GetType().Name == "KnownTypeAttribute");
            dynamic knownTypeAttribute = System.Linq.Enumerable.SingleOrDefault(knownTypeAttributes, a => IsKnwonTypeTargetType(a, discriminator));
            if (knownTypeAttribute != null)
                return knownTypeAttribute.Type;
            
            var typeName = objectType.Namespace + "." + discriminator;
            return System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType).Assembly.GetType(typeName);
        }
    
        private bool IsKnwonTypeTargetType(dynamic attribute, string discriminator)
        {
            return attribute?.Type.Name == discriminator;
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.10.6282.20487")]
    public class ApiException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.10.6282.20487")]
    public class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }


}