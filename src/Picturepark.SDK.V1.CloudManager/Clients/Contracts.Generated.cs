//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.1.2.0 (NJsonSchema v9.2.0.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Picturepark.SDK.V1.CloudManager.Contract
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.1.2.0")]
    public partial interface ICustomerClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> CreateAsync(CustomerCreateRequest createRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> CreateAsync(CustomerCreateRequest createRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> UpdateAsync(CustomerUpdateRequest updateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> UpdateAsync(CustomerUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> GetAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> GetAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DeleteAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> DeleteAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> ListAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> ListAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> SearchAsync(CustomerSearchRequest searchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerSearchResult> SearchAsync(CustomerSearchRequest searchRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserViewItem>> GetAllUsersAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserViewItem>> GetAllUsersAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> AddExternalProvidersAsync(string customerId, System.Collections.Generic.IEnumerable<ExternalProviderItem> addRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerConfigurationItem> AddExternalProvidersAsync(string customerId, System.Collections.Generic.IEnumerable<ExternalProviderItem> addRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestoreAsync(string customerAlias);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestoreAsync(string customerAlias, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.1.2.0")]
    public partial interface IServiceClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartAllAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartAllAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartServiceAsync(string serviceName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RestartServiceAsync(string serviceName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownServiceAsync(string serviceName);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ShutdownServiceAsync(string serviceName, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PingAllActiveNodesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PingAllActiveNodesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<NodeInfoDoc>> GetAllActiveNodesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<NodeInfoDoc>> GetAllActiveNodesAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.1.2.0")]
    public partial interface IUpdateClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateInfoViewItem>> GetAvailableEnvironmentUpdatesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateInfoViewItem>> GetAvailableEnvironmentUpdatesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionInfoViewItem> GetEnvironmentVersionAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionInfoViewItem> GetEnvironmentVersionAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReactivateEnvironmentAsync(ReactivationEnvironmentRequest reactivationRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReactivateEnvironmentAsync(ReactivationEnvironmentRequest reactivationRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeactivateEnvironmentAsync(DeactivationEnvironmentRequest deactivationRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeactivateEnvironmentAsync(DeactivationEnvironmentRequest deactivationRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateEnvironmentAsync(UpdateEnvironmentRequest updateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateEnvironmentAsync(UpdateEnvironmentRequest updateRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateInfoViewItem>> GetAvailableCustomerUpdatesAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<UpdateInfoViewItem>> GetAvailableCustomerUpdatesAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<CustomerVersionInfoViewItem>> GetCustomerVersionsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<CustomerVersionInfoViewItem>> GetCustomerVersionsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerVersionInfoViewItem> GetCustomerVersionAsync(string customerId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerVersionInfoViewItem> GetCustomerVersionAsync(string customerId, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReactivateCustomersAsync(System.Collections.Generic.IEnumerable<ReactivationCustomerRequest> reactivationRequests);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReactivateCustomersAsync(System.Collections.Generic.IEnumerable<ReactivationCustomerRequest> reactivationRequests, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeactivateCustomersAsync(System.Collections.Generic.IEnumerable<DeactivationCustomerRequest> deactivationRequests);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeactivateCustomersAsync(System.Collections.Generic.IEnumerable<DeactivationCustomerRequest> deactivationRequests, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateCustomersAsync(System.Collections.Generic.IEnumerable<UpdateCustomerRequest> updateRequests);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateCustomersAsync(System.Collections.Generic.IEnumerable<UpdateCustomerRequest> updateRequests, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.1.2.0")]
    public partial interface ICloudBackupClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRepositoryViewItem> CreateRepositoryAsync(SnapshotRepositoryCustomerCreateRequest snapshotRepositoryCustomerCreateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRepositoryViewItem> CreateRepositoryAsync(SnapshotRepositoryCustomerCreateRequest snapshotRepositoryCustomerCreateRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotViewItem> CreateSnapshotAsync(SnapshotCustomerCreateRequest snapshotCustomerCreateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotViewItem> CreateSnapshotAsync(SnapshotCustomerCreateRequest snapshotCustomerCreateRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRestoreViewItem> RestoreSnapshotAsync(SnapshotCustomerRestoreRequest snapshotCustomerRestoreRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRestoreViewItem> RestoreSnapshotAsync(SnapshotCustomerRestoreRequest snapshotCustomerRestoreRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRepositoryViewItem> CreateRepository2Async(SnapshotRepositoryEnvironmentCreateRequest snapshotRepositoryEnvironmentCreateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRepositoryViewItem> CreateRepository2Async(SnapshotRepositoryEnvironmentCreateRequest snapshotRepositoryEnvironmentCreateRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotViewItem> CreateSnapshot2Async(SnapshotEnvironmentCreateRequest snapshotEnvironmentCreateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotViewItem> CreateSnapshot2Async(SnapshotEnvironmentCreateRequest snapshotEnvironmentCreateRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRestoreViewItem> RestoreSnapshot2Async(SnapshotEnvironmentRestoreRequest snapshotEnvironmentRestoreRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotRestoreViewItem> RestoreSnapshot2Async(SnapshotEnvironmentRestoreRequest snapshotEnvironmentRestoreRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotCustomerSearchResult> SearchAsync(SnapshotCustomerSearchRequest snapshotCustomerSearchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SnapshotCustomerSearchResult> SearchAsync(SnapshotCustomerSearchRequest snapshotCustomerSearchRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> SearchRepositoriesAsync(SnapshotRepositoryCustomerSearchRequest searchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> SearchRepositoriesAsync(SnapshotRepositoryCustomerSearchRequest searchRequest, System.Threading.CancellationToken cancellationToken);
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerViewItem> CloneCustomerAsync(SnapshotCustomerCloneRequest cloneRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomerViewItem> CloneCustomerAsync(SnapshotCustomerCloneRequest cloneRequest, System.Threading.CancellationToken cancellationToken);
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheRetentionTimeInMinutes", Required = Newtonsoft.Json.Required.Always)]
        public int CacheRetentionTimeInMinutes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseSsl", Required = Newtonsoft.Json.Required.Always)]
        public bool UseSsl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CDNUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CDNUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ExternalProviderItem> ExternalProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerServiceProviderItem> ServiceProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CorsAllowedHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexedFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedFieldThreshold { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NoReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LanguageConfigurationItem LanguageConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OutputFormatDoc> OutputFormats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessEngineConnectionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessEngineConnectionString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreateTransferBusinessProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateTransferBusinessProcess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ExternalProviderItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProviderName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalProviderName ProviderName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationSecret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationSecret { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OAuthServiceApi> Services { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedirectUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUri { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExternalProviderItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalProviderItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum ExternalProviderName
    {
        [System.Runtime.Serialization.EnumMember(Value = "Google")]
        Google = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Windows")]
        Windows = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Dropbox")]
        Dropbox = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Buffer")]
        Buffer = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Picturepark")]
        Picturepark = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class OAuthServiceApi 
    {
        [Newtonsoft.Json.JsonProperty("Scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Scopes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OAuthServiceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OAuthServiceType OAuthServiceType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OAuthServiceApi FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OAuthServiceApi>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum OAuthServiceType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Drive")]
        Drive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SocialMedia")]
        SocialMedia = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ContentStore")]
        ContentStore = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerServiceProviderItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Scopes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Scopes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerAllowedMessage> AllowedMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerAllowedCommand> AllowedCommands { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> UserRoleIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Settings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerServiceProviderItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerServiceProviderItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerAllowedMessage 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerAllowedMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAllowedMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerAllowedCommand 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerAllowedCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerAllowedCommand>(data);
        }
    }
    
    /// <summary>The customer's language configuration.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class LanguageConfigurationItem 
    {
        /// <summary>A list of languages serving as system languages.</summary>
        [Newtonsoft.Json.JsonProperty("SystemLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SystemLanguages { get; set; }
    
        /// <summary>A list of languages serving as metadata languages.</summary>
        [Newtonsoft.Json.JsonProperty("MetadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataLanguages { get; set; }
    
        /// <summary>The default language. Not the be confused with the metadata fallback language x-default.</summary>
        [Newtonsoft.Json.JsonProperty("DefaultLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LanguageConfigurationItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageConfigurationItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class BaseDoc 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class OutputFormatDoc : BaseDoc
    {
        [Newtonsoft.Json.JsonProperty("Static", Required = Newtonsoft.Json.Required.Always)]
        public bool Static { get; set; }
    
        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Dynamic", Required = Newtonsoft.Json.Required.Always)]
        public bool Dynamic { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DataExtraction", Required = Newtonsoft.Json.Required.Always)]
        public bool DataExtraction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Temporary", Required = Newtonsoft.Json.Required.Always)]
        public bool Temporary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SourceOutputFormats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SourceOutputFormats SourceOutputFormats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Render", Required = Newtonsoft.Json.Required.Always)]
        public bool Render { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormatBase Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputFormatDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFormatDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SourceOutputFormats 
    {
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Video", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Video { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Audio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SourceOutputFormats FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SourceOutputFormats>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class FormatBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ImageFormatBase : FormatBase
    {
        [Newtonsoft.Json.JsonProperty("ColorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorProfile? ColorProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorTransformationIntent", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorTransformationIntent ColorTransformationIntent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HorizontalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenderFirstFrameOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool RenderFirstFrameOnly { get; set; }
    
        [Newtonsoft.Json.JsonProperty("KeepClippingPath", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepClippingPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneExif", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneExif { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneIptc", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneIptc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneAdobeResources", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneAdobeResources { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneXmp", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneXmp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ImageActionBase> Actions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum ColorProfile
    {
        [System.Runtime.Serialization.EnumMember(Value = "AdobeRgb1998")]
        AdobeRgb1998 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AppleRgb")]
        AppleRgb = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ColorMatchRgb")]
        ColorMatchRgb = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "EciRgbV1")]
        EciRgbV1 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "EciRgbV2")]
        EciRgbV2 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Srgb")]
        Srgb = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SrgbColorSpaceProfile")]
        SrgbColorSpaceProfile = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "EuropeIsoCoatedFogra27")]
        EuropeIsoCoatedFogra27 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "EuroscaleCoated")]
        EuroscaleCoated = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "EuroscaleUncoated")]
        EuroscaleUncoated = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "IsoCoated")]
        IsoCoated = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "IsoCoatedEciV2")]
        IsoCoatedEciV2 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "JapanColor2001Coated")]
        JapanColor2001Coated = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "JapanColor2001Uncoated")]
        JapanColor2001Uncoated = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "JapanColor2002Newspaper")]
        JapanColor2002Newspaper = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "JapanWebCoated")]
        JapanWebCoated = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "UsSheetfedCoated")]
        UsSheetfedCoated = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "UsSheetfedUncoated")]
        UsSheetfedUncoated = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "UsWebCoatedSwop")]
        UsWebCoatedSwop = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "UsWebUncoated")]
        UsWebUncoated = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "IsoCoatedV2Grey1cBas")]
        IsoCoatedV2Grey1cBas = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "IsoCoated300EciV2")]
        IsoCoated300EciV2 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "CoatedFogra27")]
        CoatedFogra27 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "CoatedFogra39")]
        CoatedFogra39 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "UncoatedFogra29")]
        UncoatedFogra29 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = "WebCoatedFogra28")]
        WebCoatedFogra28 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = "WebCoatedSwop2006Grade3")]
        WebCoatedSwop2006Grade3 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = "WebCoatedSwop2006Grade5")]
        WebCoatedSwop2006Grade5 = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = "Isonewspaper26v4")]
        Isonewspaper26v4 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = "Isonewspaper26v4Grey")]
        Isonewspaper26v4Grey = 29,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum ColorTransformationIntent
    {
        [System.Runtime.Serialization.EnumMember(Value = "RelativeColorimetricBpc")]
        RelativeColorimetricBpc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AbsoluteColorimetric")]
        AbsoluteColorimetric = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Perceptual")]
        Perceptual = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "RelativeColorimetric")]
        RelativeColorimetric = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Saturation")]
        Saturation = 4,
    
    }
    
    /// <summary>Does not implement the IImageAction interface. The ResizeAction is directly exposed within ImageFormat.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ResizeAction 
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResizeMode ResizeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResizeAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum ResizeMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Fit")]
        Fit = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shrink")]
        Shrink = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Resize")]
        Resize = 2,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ImageActionBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageActionBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageActionBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class AlphaHandlingAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("AlphaHandling", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlphaHandling AlphaHandling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReplacementRgbColorHexCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementRgbColorHexCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AlphaHandlingAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaHandlingAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum AlphaHandling
    {
        [System.Runtime.Serialization.EnumMember(Value = "DiscardAlpha")]
        DiscardAlpha = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReplaceAlpha")]
        ReplaceAlpha = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReplaceInvertedAlpha")]
        ReplaceInvertedAlpha = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CropAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("X", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CropAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class UnsharpenMaskAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Radius", Required = Newtonsoft.Json.Required.Always)]
        public double Radius { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Threshold", Required = Newtonsoft.Json.Required.Always)]
        public double Threshold { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnsharpenMaskAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsharpenMaskAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class WatermarkAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("WatermarkFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginTop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginRight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginBottom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Opacity", Required = Newtonsoft.Json.Required.Always)]
        public double Opacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double WidthRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightRatio", Required = Newtonsoft.Json.Required.Always)]
        public double HeightRatio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WatermarkAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WatermarkAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class OriginalFormat : FormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OriginalFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class JpegFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Always)]
        public int Quality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsProgressive", Required = Newtonsoft.Json.Required.Always)]
        public bool IsProgressive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChromaSubsamplingEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool ChromaSubsamplingEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JpegFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JpegFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class PngFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("Interlaced", Required = Newtonsoft.Json.Required.Always)]
        public bool Interlaced { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PngFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PngFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class TiffFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("AlphaPremultiplied", Required = Newtonsoft.Json.Required.Always)]
        public bool AlphaPremultiplied { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompressionType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompressionType CompressionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeUnspecifiedTiffExtraChannels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TiffFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TiffFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum CompressionType
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Lzw")]
        Lzw = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Rle")]
        Rle = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Zip")]
        Zip = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class VideoFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class Mp4VideoFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("ResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction2 ResizeAction { get; set; }
    
        /// <summary>Gets or sets the encoding audio codec.</summary>
        [Newtonsoft.Json.JsonProperty("AudioCodec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioFormatBase AudioCodec { get; set; }
    
        /// <summary>Gets or sets the encoding codec preset.</summary>
        [Newtonsoft.Json.JsonProperty("Preset", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preset Preset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IVideoAction> Actions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mp4VideoFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp4VideoFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ResizeAction2 
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResizeMode ResizeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResizeAction2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class AudioFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum Preset
    {
        [System.Runtime.Serialization.EnumMember(Value = "ultrafast")]
        Ultrafast = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "superfast")]
        Superfast = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "veryfast")]
        Veryfast = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "faster")]
        Faster = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "fast")]
        Fast = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "medium")]
        Medium = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "slow")]
        Slow = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "slower")]
        Slower = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class IVideoAction 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IVideoAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IVideoAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class VideoPresetFormat : VideoFormatBase
    {
        /// <summary>Id of Squeeze preset.</summary>
        [Newtonsoft.Json.JsonProperty("VideoPresetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid VideoPresetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoPresetFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoPresetFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class VideoSpriteFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("SpriteResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction2 SpriteResizeAction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxNumberOfSprites", Required = Newtonsoft.Json.Required.Always)]
        public int MaxNumberOfSprites { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Always)]
        public int Quality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoSpriteFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoSpriteFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class VideoStillFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PositionInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public int PositionInSeconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class AacAudioFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        /// <summary>Gets or sets the encoding profile.</summary>
        [Newtonsoft.Json.JsonProperty("Profile", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Profile Profile { get; set; }
    
        /// <summary>Gets or sets the encoding coder.</summary>
        [Newtonsoft.Json.JsonProperty("Coder", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Coder Coder { get; set; }
    
        /// <summary>Gets or sets the bitrate of the encoding.</summary>
        [Newtonsoft.Json.JsonProperty("Bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }
    
        /// <summary>Gets or sets the encoding variable bit rate (VBR) - 1 is lowest quality and 5 is highest quality.</summary>
        [Newtonsoft.Json.JsonProperty("VariableBitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VariableBitRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AacAudioFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AacAudioFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum Profile
    {
        [System.Runtime.Serialization.EnumMember(Value = "aac_low")]
        Aac_low = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "mpeg2_aac_low")]
        Mpeg2_aac_low = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "aac_ltp")]
        Aac_ltp = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "aac_main")]
        Aac_main = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum Coder
    {
        [System.Runtime.Serialization.EnumMember(Value = "twoloop")]
        Twoloop = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "anmr")]
        Anmr = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "fast")]
        Fast = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class AudioPresetFormat : AudioFormatBase
    {
        /// <summary>Id of Squeeze preset.</summary>
        [Newtonsoft.Json.JsonProperty("AudioPresetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid AudioPresetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioPresetFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioPresetFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class AudioStillFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class Mp3AudioFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        /// <summary>Gets or sets the encoding bitrate.</summary>
        [Newtonsoft.Json.JsonProperty("Bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }
    
        /// <summary>Gets or sets the encoding quality.
        /// Values can be set it range of 0 to 9, where a lower value is a higher quality.</summary>
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mp3AudioFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp3AudioFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class DocumentFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class DocumentStillFormat : DocumentFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class PdfFormat : DocumentFormatBase
    {
        /// <summary>JpegQuality parameter value must be between 0 and 100.</summary>
        [Newtonsoft.Json.JsonProperty("JpegQuality", Required = Newtonsoft.Json.Required.Always)]
        public int JpegQuality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FastWebView", Required = Newtonsoft.Json.Required.Always)]
        public bool FastWebView { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReduceFileSize", Required = Newtonsoft.Json.Required.Always)]
        public bool ReduceFileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtractFullText", Required = Newtonsoft.Json.Required.Always)]
        public bool ExtractFullText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PdfFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class StoreAudit 
    {
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem CreatedByUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StoreAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StoreAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class UserItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerConfigurationItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LifelineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LifelineId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MainCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatisticsCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatisticsCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentHistoryCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentHistoryCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LiveStreamCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LiveStreamCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CacheCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseSsl", Required = Newtonsoft.Json.Required.Always)]
        public bool UseSsl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ExternalProviderItem> ExternalProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerServiceProviderItem> ServiceProviders { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CDNUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CDNUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElasticSearchNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int ElasticSearchNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RootSearchIndexNumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int RootSearchIndexNumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexedFieldThreshold", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedFieldThreshold { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CorsAllowedHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NoReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LanguageConfigurationItem LanguageConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessEngineConnectionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessEngineConnectionString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreateTransferBusinessProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateTransferBusinessProcess { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedisDatabaseIndex", Required = Newtonsoft.Json.Required.Always)]
        public int RedisDatabaseIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerConfigurationItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerConfigurationItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum LifeCycle
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inactive")]
        Inactive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted = 3,
    
    }
    
    /// <summary>A custom dictionary type to distinguish language specific class properties.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TranslatedStringDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BackupEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool BackupEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheRetentionTimeInMinutes", Required = Newtonsoft.Json.Required.Always)]
        public int CacheRetentionTimeInMinutes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseSsl", Required = Newtonsoft.Json.Required.Always)]
        public bool UseSsl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CDNUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CDNUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupportContactEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupportContactEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CorsAllowedHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NoReplyEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NoReplyEmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexedFieldThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IndexedFieldThreshold { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class BaseResultOfCustomerViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomerViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfCustomerViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfCustomerViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerSearchResult : BaseResultOfCustomerViewItem
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeactivationComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MainCatalog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCatalog { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycle LifeCycle { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class UserViewItem : UserItem
    {
        [Newtonsoft.Json.JsonProperty("UserRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> UserRoleIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SortInfo 
    {
        /// <summary>The elastic search index field to sort on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The sort direction (Asc/Desc).</summary>
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection Direction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SortInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum SortDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Desc")]
        Desc = 1,
    
    }
    
    /// <summary>The FilterBase is the base class for all filters.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class FilterBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data);
        }
    }
    
    /// <summary>The AndFilter> is a compound filter and returns documents that match all of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class AndFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AndFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data);
        }
    }
    
    /// <summary>The OrFilter is a compound filter and returns documents that match any of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class OrFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data);
        }
    }
    
    /// <summary>The NotFilter is a compound filter and returns documents that do not match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class NotFilter : FilterBase
    {
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data);
        }
    }
    
    /// <summary>The DateRangeFilter returns documents with fields that have date values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class DateRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The date range. Supported pattern: now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data);
        }
    }
    
    /// <summary>The date range class used in aggregators and filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class DateRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
        /// <summary>The to value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data);
        }
    }
    
    /// <summary>The ExistsFilter returns documents that have at least one non-null value in the original field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ExistsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data);
        }
    }
    
    /// <summary>The GeoBoundingBoxFilter returns documents that are found based on a point location using a bounding box.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The top left longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("TopLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation TopLeft { get; set; }
    
        /// <summary>The bottom right longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("BottomRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation BottomRight { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoBoundingBoxFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class GeoLocation 
    {
        [Newtonsoft.Json.JsonProperty("Lat", Required = Newtonsoft.Json.Required.Always)]
        public double Lat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lon", Required = Newtonsoft.Json.Required.Always)]
        public double Lon { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data);
        }
    }
    
    /// <summary>The GeoDistanceRangeFilter returns documents that include only hits that exists within a specific distance from a geo point.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class GeoDistanceFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The longitude/latitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>The range distance in meters.</summary>
        [Newtonsoft.Json.JsonProperty("Distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data);
        }
    }
    
    /// <summary>The GeoDistanceRangeFilter returns documents that exists within a range from a specific point.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class GeoDistanceRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The longitude/latitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>The numeric range.</summary>
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class NumericRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value.</summary>
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }
    
        /// <summary>The to value.</summary>
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data);
        }
    }
    
    /// <summary>The NestedFilter is a joining filter and returns documents whose nested objects / documents (see nested mapping) match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class NestedFilter : FilterBase
    {
        /// <summary>The path pointing to the nested object.</summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data);
        }
    }
    
    /// <summary>The NumericRangeFilter returns documents with fields that have numeric values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class NumericRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The numeric range with from and to properties.</summary>
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data);
        }
    }
    
    /// <summary>The PrefixFilter returns documents that have fields containing terms with a specified prefix (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class PrefixFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The prefix term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PrefixFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data);
        }
    }
    
    /// <summary>The TermFilter returns documents that contain the exact term specified in the inverted index.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class TermFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Term { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data);
        }
    }
    
    /// <summary>The TermsFilter returns documents that have fields that match any of the provided terms (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class TermsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of OR combined terms.</summary>
        [Newtonsoft.Json.JsonProperty("Terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Terms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data);
        }
    }
    
    /// <summary>An AggregationFilter is provided with each aggregated value. When selecting the aggregated value the aggregation filter is added to the search query and returns doucments meeting the aggregation condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class AggregationFilter : FilterBase
    {
        /// <summary>The name of the aggregation this filter is connected to.</summary>
        [Newtonsoft.Json.JsonProperty("AggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }
    
        /// <summary>The aggregation filter property. Available filters are TermFilter, DateRangeFilter, NumericRangeFilter and GeoDistanceRangeFilter.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TemporaryAggregatorRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemporaryAggregatorRequestId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data);
        }
    }
    
    /// <summary>The ChildFilter allows to apply filters on child documents and returns documents that match the specified filter on the child document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ChildFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a child.</summary>
        [Newtonsoft.Json.JsonProperty("ChildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChildType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChildFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChildFilter>(data);
        }
    }
    
    /// <summary>The ParentFilter allows to apply filters on parent documents and returns documents that match the specified filter on the parent document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ParentFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a parent.</summary>
        [Newtonsoft.Json.JsonProperty("ParentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParentFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class NodeInfoDoc 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastResponseTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime LastResponseTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VersionInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogLevel { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NodeInfoDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NodeInfoDoc>(data);
        }
    }
    
    /// <summary>The UpdateInfoViewItem is the view item for update commands.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class UpdateInfoViewItem 
    {
        /// <summary>The version of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("UpdateVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdateVersion { get; set; }
    
        /// <summary>The version of the object store (elastic search) at the time of the update command creation.</summary>
        [Newtonsoft.Json.JsonProperty("ObjectStoreVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectStoreVersion { get; set; }
    
        /// <summary>The creation date of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        /// <summary>The description of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The creator of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateInfoViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateInfoViewItem>(data);
        }
    }
    
    /// <summary>The version view item for the environment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class VersionInfoViewItem 
    {
        /// <summary>The manual file version of Picturepark.Contract.dll.</summary>
        [Newtonsoft.Json.JsonProperty("FileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileVersion { get; set; }
    
        /// <summary>The GitVersionTask generated file product version of Picturepark.Configuration.dll.</summary>
        [Newtonsoft.Json.JsonProperty("FileProductVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileProductVersion { get; set; }
    
        /// <summary>The current contract version stored in CustomerDoc / EnvironmentDoc.</summary>
        [Newtonsoft.Json.JsonProperty("ContractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        /// <summary>The bamboo release version. Only provided on bamboo deployments.</summary>
        [Newtonsoft.Json.JsonProperty("Release", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Release { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VersionInfoViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionInfoViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ReactivationEnvironmentRequest 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReactivationEnvironmentRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReactivationEnvironmentRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class DeactivationEnvironmentRequest 
    {
        /// <summary>Language specific deactivation messages.</summary>
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeactivationEnvironmentRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeactivationEnvironmentRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class UpdateEnvironmentRequest 
    {
        /// <summary>The maximal target version.
        /// In case the highest available update version is lower than the desired target version, the environments's contract version will be raised to the highest available update version.</summary>
        [Newtonsoft.Json.JsonProperty("TargetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateEnvironmentRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateEnvironmentRequest>(data);
        }
    }
    
    /// <summary>The version view item for the customer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class CustomerVersionInfoViewItem : VersionInfoViewItem
    {
        /// <summary>The customer id.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerVersionInfoViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerVersionInfoViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class ReactivationCustomerRequest 
    {
        /// <summary>The customer id.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReactivationCustomerRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReactivationCustomerRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class DeactivationCustomerRequest 
    {
        /// <summary>The customer id.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        /// <summary>Language specific deactivation messages.</summary>
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeactivationCustomerRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeactivationCustomerRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class UpdateCustomerRequest 
    {
        /// <summary>The maximal target version.
        /// In case the highest available update version is lower than the desired target version, the customer's contract version will be raised to the highest available update version.</summary>
        [Newtonsoft.Json.JsonProperty("TargetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }
    
        /// <summary>The customer id.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateCustomerRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateCustomerRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotRepositoryBaseCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("RepositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotRepositoryBaseCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryBaseCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotRepositoryCustomerCreateRequest : SnapshotRepositoryBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotRepositoryCustomerCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryCustomerCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotRepositoryViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BackupEntityType EntityType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotRepositoryViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum BackupEntityType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Enviroment")]
        Enviroment = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Customer")]
        Customer = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotBaseCreateRequest 
    {
        /// <summary>The SnapshotName. Must be unique.
        /// The name usually will be enriched with Reason, ContractVersion and DateTime information.</summary>
        [Newtonsoft.Json.JsonProperty("SnapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }
    
        /// <summary>The Repository in which the snapshot will be created.</summary>
        [Newtonsoft.Json.JsonProperty("RepositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }
    
        /// <summary>The Indices being part of the snapshot.</summary>
        [Newtonsoft.Json.JsonProperty("Indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Indices { get; set; }
    
        /// <summary>The snapshot backup reason will be added to the snapshot name.</summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BackupReason Reason { get; set; }
    
        /// <summary>Timestamp when creating the requst (utc). If there is a more recent snapshot in the repository, it will keep/return the latest one,
        /// instead of creating a new one.</summary>
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotBaseCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotBaseCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotCustomerCreateRequest : SnapshotBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotCustomerCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public enum BackupReason
    {
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deletion")]
        Deletion = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotViewItem 
    {
        /// <summary>The snapshot creation DurationInMilliseconds.</summary>
        [Newtonsoft.Json.JsonProperty("DurationInMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long DurationInMilliseconds { get; set; }
    
        /// <summary>The snapshot EndTime.</summary>
        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime EndTime { get; set; }
    
        /// <summary>The snapshot EndTimeInMilliseconds.</summary>
        [Newtonsoft.Json.JsonProperty("EndTimeInMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long EndTimeInMilliseconds { get; set; }
    
        /// <summary>The snapshot elastic search shard Falures.</summary>
        [Newtonsoft.Json.JsonProperty("Failures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SnapshotShardFailure> Failures { get; set; }
    
        /// <summary>The snapshot Indices.</summary>
        [Newtonsoft.Json.JsonProperty("Indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Indices { get; set; }
    
        /// <summary>The snapshot Name.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The repository name.</summary>
        [Newtonsoft.Json.JsonProperty("RepositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }
    
        /// <summary>The snapshot StartTime.</summary>
        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime StartTime { get; set; }
    
        /// <summary>The snapshot StartTimeInMilliseconds.</summary>
        [Newtonsoft.Json.JsonProperty("StartTimeInMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long StartTimeInMilliseconds { get; set; }
    
        /// <summary>The snapshot State.</summary>
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BackupEntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RestoreDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime RestoreDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotShardFailure 
    {
        /// <summary>The Index having the shard failure.</summary>
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }
    
        /// <summary>The elastic search NodeId.</summary>
        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeId { get; set; }
    
        /// <summary>The elastic serach shard failure Reason.</summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        /// <summary>The failing elastic search ShardId.</summary>
        [Newtonsoft.Json.JsonProperty("ShardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShardId { get; set; }
    
        /// <summary>The snapshot failure status.</summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotShardFailure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotShardFailure>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotBaseRestoreRequest 
    {
        [Newtonsoft.Json.JsonProperty("SnapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RepositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Indices { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotBaseRestoreRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotBaseRestoreRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotCustomerRestoreRequest : SnapshotBaseRestoreRequest
    {
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotCustomerRestoreRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerRestoreRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotRestoreViewItem 
    {
        [Newtonsoft.Json.JsonProperty("RestoreDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime RestoreDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RepositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SnapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Indices { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotRestoreViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRestoreViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotRepositoryEnvironmentCreateRequest : SnapshotRepositoryBaseCreateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotRepositoryEnvironmentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryEnvironmentCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotEnvironmentCreateRequest : SnapshotBaseCreateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotEnvironmentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnvironmentCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotEnvironmentRestoreRequest : SnapshotBaseRestoreRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotEnvironmentRestoreRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnvironmentRestoreRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotCustomerSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RepositoryNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> RepositoryNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotCustomerSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class BaseResultOfSnapshotViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SnapshotViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfSnapshotViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfSnapshotViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotCustomerSearchResult : BaseResultOfSnapshotViewItem
    {
        [Newtonsoft.Json.JsonProperty("ElapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotCustomerSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotRepositoryCustomerSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotRepositoryCustomerSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotRepositoryCustomerSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    public partial class SnapshotCustomerCloneRequest 
    {
        [Newtonsoft.Json.JsonProperty("SnapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RepositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SourceCustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceCustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CustomerHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorsAllowedHosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> CorsAllowedHosts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StoragePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StoragePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaseUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedirectUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUri { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotCustomerCloneRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerCloneRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.0.0")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
            
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, value.GetType().Name));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false; 
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            var objectTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType);
            var customAttributes = System.Reflection.CustomAttributeExtensions.GetCustomAttributes(objectTypeInfo);
    
            var knownTypeAttributes = System.Linq.Enumerable.Where(customAttributes, a => a.GetType().Name == "KnownTypeAttribute");
            dynamic knownTypeAttribute = System.Linq.Enumerable.SingleOrDefault(knownTypeAttributes, a => IsKnwonTypeTargetType(a, discriminator));
            if (knownTypeAttribute != null)
                return knownTypeAttribute.Type;
            
            var typeName = objectType.Namespace + "." + discriminator;
            return System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType).Assembly.GetType(typeName);
        }
    
        private bool IsKnwonTypeTargetType(dynamic attribute, string discriminator)
        {
            return attribute?.Type.Name == discriminator;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.1.2.0")]
    public class ApiException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.1.2.0")]
    public class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}