//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.2.0.0 (NJsonSchema v9.2.4.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Picturepark.SDK.V1.ServiceProvider.Contract
{
    #pragma warning disable // Disable all warnings

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ConfigurationModule 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConfigurationModule FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConfigurationModule>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ProxyGeneratorionNotSupportedBugKillsAutoMapperEnforceReferenceOneDataTypeFromAutoMapperNet4Dll 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProxyGeneratorionNotSupportedBugKillsAutoMapperEnforceReferenceOneDataTypeFromAutoMapperNet4Dll FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProxyGeneratorionNotSupportedBugKillsAutoMapperEnforceReferenceOneDataTypeFromAutoMapperNet4Dll>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class StringExtensions 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StringExtensions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StringExtensions>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ServiceMessage 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorrelationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Retries", Required = Newtonsoft.Json.Required.Always)]
        public int Retries { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CacheInvalidationMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheInvalidationType", Required = Newtonsoft.Json.Required.Always)]
        public CacheInvalidationType CacheInvalidationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheScope", Required = Newtonsoft.Json.Required.Always)]
        public CacheScope CacheScope { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CacheInvalidationMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CacheInvalidationMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum CacheInvalidationType
    {
        Unknown = 0,
    
        All = 1,
    
        Key = 2,
    
        Type = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum CacheScope
    {
        CacheObjectStore = 1,
    
        CacheStore = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GlobalCacheInvalidationMessage : CacheInvalidationMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GlobalCacheInvalidationMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlobalCacheInvalidationMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DeactivationEnvironmentMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeactivationEnvironmentMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeactivationEnvironmentMessage>(data);
        }
    }
    
    /// <summary>A custom dictionary type to distinguish language specific class properties.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TranslatedStringDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ReactivationEnvironmentMessage : ServiceMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReactivationEnvironmentMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReactivationEnvironmentMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateEnvironmentMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("TargetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateEnvironmentMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateEnvironmentMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AvailableEnvironmentUpdatesRequestMessage : ServiceMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AvailableEnvironmentUpdatesRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableEnvironmentUpdatesRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AvailableEnvironmentUpdatesResponseMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Updates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UpdateInfoViewItem> Updates { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AvailableEnvironmentUpdatesResponseMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableEnvironmentUpdatesResponseMessage>(data);
        }
    }
    
    /// <summary>The UpdateInfoViewItem is the view item for update commands.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateInfoViewItem 
    {
        /// <summary>The version of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("UpdateVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpdateVersion { get; set; }
    
        /// <summary>The version of the object store (elastic search) at the time of the update command creation.</summary>
        [Newtonsoft.Json.JsonProperty("ObjectStoreVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectStoreVersion { get; set; }
    
        /// <summary>The creation date of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        /// <summary>The description of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The creator of the update command.</summary>
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateInfoViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateInfoViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class RemoveServiceProviderMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("ServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RemoveServiceProviderMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemoveServiceProviderMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AddServiceProviderMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("ServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AddServiceProviderMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddServiceProviderMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexMapMessage : ServiceMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexMapMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexMapMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexOpenMessage : ServiceMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexOpenMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexOpenMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexCloseMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexCloseRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexCloseMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexCloseMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexCloseRequest 
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeleteAfterClose", Required = Newtonsoft.Json.Required.Always)]
        public bool DeleteAfterClose { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexCloseRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexCloseRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexRestoreMessage : ServiceMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexRestoreMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexRestoreMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexReindexMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexReindexRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexReindexMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexReindexMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexReindexRequest 
    {
        [Newtonsoft.Json.JsonProperty("IndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexDescriptionJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexDescriptionJson { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReindexJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReindexJson { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguagePropertiesJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguagePropertiesJson { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutoSwitch", Required = Newtonsoft.Json.Required.Always)]
        public bool AutoSwitch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReindexData", Required = Newtonsoft.Json.Required.Always)]
        public bool ReindexData { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexReindexRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexReindexRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexSnapshotMessage : ServiceMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexSnapshotMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexSnapshotMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexCreateMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexCreateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexCreateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexCreateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexType", Required = Newtonsoft.Json.Required.Always)]
        public IndexType IndexType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexDescriptionJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexDescriptionJson { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum IndexType
    {
        Configuration = 0,
    
        Main = 1,
    
        Cache = 2,
    
        Metadata = 3,
    
        Search = 4,
    
        Statistic = 5,
    
        DocumentHistory = 6,
    
        LiveStream = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexTemplateCreateMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexTemplateCreateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexTemplateCreateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexTemplateCreateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexTemplateCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfShards", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfShards { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfReplicas", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfReplicas { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PutTemplateDescriptionJson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PutTemplateDescriptionJson { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexType", Required = Newtonsoft.Json.Required.Always)]
        public IndexType IndexType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexTemplateCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexTemplateCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexTemplateDeleteMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexTemplateDeleteRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexTemplateDeleteMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexTemplateDeleteMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexTemplateDeleteRequest 
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexTemplateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeleteIndices", Required = Newtonsoft.Json.Required.Always)]
        public bool DeleteIndices { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexTemplateDeleteRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexTemplateDeleteRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexDeactivateMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexDeactivateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexDeactivateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexDeactivateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexDeactivateRequest 
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexDeactivateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexDeactivateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexActivateMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IndexActivateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexActivateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexActivateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IndexActivateRequest 
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexActivateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexActivateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SnapshotEnvironmentCreateMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnapshotEnvironmentCreateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotEnvironmentCreateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnvironmentCreateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SnapshotBaseCreateRequest 
    {
        /// <summary>The SnapshotName. Must be unique.
        /// The name usually will be enriched with Reason, ContractVersion and DateTime information.</summary>
        [Newtonsoft.Json.JsonProperty("SnapshotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SnapshotName { get; set; }
    
        /// <summary>The Repository in which the snapshot will be created.</summary>
        [Newtonsoft.Json.JsonProperty("RepositoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryName { get; set; }
    
        /// <summary>The Indices being part of the snapshot.</summary>
        [Newtonsoft.Json.JsonProperty("Indices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Indices { get; set; }
    
        /// <summary>The snapshot backup reason will be added to the snapshot name.</summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Always)]
        public BackupReason Reason { get; set; }
    
        /// <summary>Timestamp when creating the requst (utc). If there is a more recent snapshot in the repository, it will keep/return the latest one,
        /// instead of creating a new one.</summary>
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotBaseCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotBaseCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SnapshotEnvironmentCreateRequest : SnapshotBaseCreateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotEnvironmentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotEnvironmentCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum BackupReason
    {
        Custom = 0,
    
        Update = 1,
    
        Deletion = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SnapshotCustomerCreateMessage : ServiceMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SnapshotCustomerCreateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotCustomerCreateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerCreateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SnapshotCustomerCreateRequest : SnapshotBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SnapshotCustomerCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SnapshotCustomerCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveCacheThumbnailCleanupMessage : ServiceMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveCacheThumbnailCleanupMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveCacheThumbnailCleanupMessage>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ServiceCustomerMessage 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CorrelationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrelationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContractVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TraceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Retries", Required = Newtonsoft.Json.Required.Always)]
        public int Retries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceCustomerMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceCustomerMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateTransferFilesMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferType", Required = Newtonsoft.Json.Required.Always)]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TransferUploadFile> Files { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TransferDriveFile> DriveFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TransferWebLink> WebLinks { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateTransferFilesMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTransferFilesMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TransferType
    {
        FileUpload = 0,
    
        DriveImport = 1,
    
        DriveExport = 2,
    
        WebDownload = 3,
    
        SchemaImport = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferFile 
    {
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferUploadFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferUploadFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferUploadFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferDriveFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalOutputFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputFolderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferDriveFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDriveFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferWebLink : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferWebLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferWebLink>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class RequestMessage : ServiceCustomerMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class EmptyMessage : ServiceCustomerMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmptyMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmptyMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SendMailMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Mails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MailDoc> Mails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NotificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SendMailMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendMailMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class BaseDoc 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MailDoc : BaseDoc
    {
        [Newtonsoft.Json.JsonProperty("SourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserEmail From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReplyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserEmail ReplyTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserEmail To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HtmlMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PlainMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlainMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BounceAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BounceAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MailDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MailDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UserEmail 
    {
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class StoreAudit 
    {
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem CreatedByUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StoreAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StoreAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UserItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DummyMessage : ServiceCustomerMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DummyMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DummyMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DeleteShareMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ShareIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ShareIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeleteShareMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteShareMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateEmbedShareMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareEmbedUpdateRequest Share { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateEmbedShareMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateEmbedShareMessage>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ShareBaseUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShareContentItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ShareContent> ShareContentItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBaseUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ShareEmbedUpdateRequest : ShareBaseUpdateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbedUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ShareContent 
    {
        [Newtonsoft.Json.JsonProperty("ContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> OutputFormatIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContent>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ShareBasicUpdateRequest : ShareBaseUpdateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasicUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateBasicShareMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareBasicUpdateRequest Share { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateBasicShareMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateBasicShareMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateShareResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ShareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateShareResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShareResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateEmbedShareMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareEmbedCreateRequest Share { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateEmbedShareMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateEmbedShareMessage>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ShareBaseCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Contents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ShareContent> Contents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBaseCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ShareEmbedCreateRequest : ShareBaseCreateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbedCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ShareBasicCreateRequest : ShareBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("RecipientsEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserEmail> RecipientsEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecipientsUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserItem> RecipientsUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecipientsGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserRoleViewItem> RecipientsGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasicCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UserRoleViewItem 
    {
        /// <summary>The user role id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        /// <summary>Language specific user role names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>All user rights for this user role.</summary>
        [Newtonsoft.Json.JsonProperty("UserRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UserRight> UserRights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum UserRight
    {
        ManageContent = 1,
    
        ManageSharings = 2,
    
        ManageDrives = 3,
    
        ManageTransfer = 4,
    
        ManageAnalytics = 5,
    
        ManageChannels = 6,
    
        ManageSchemas = 7,
    
        ManageUsers = 8,
    
        ManageUserRoles = 9,
    
        ManagePermissions = 10,
    
        ManageSearchIndexes = 11,
    
        ManageRecipients = 12,
    
        ManageCollections = 13,
    
        ManageListItems = 15,
    
        ManageServiceProviders = 16,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateBasicShareMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Share", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShareBasicCreateRequest Share { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FireNotification", Required = Newtonsoft.Json.Required.Always)]
        public bool FireNotification { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SendMail", Required = Newtonsoft.Json.Required.Always)]
        public bool SendMail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateBasicShareMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateBasicShareMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class RevokeShareMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ShareIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ShareIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RevokeShareMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RevokeShareMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoRenderingResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BulkRenderingResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkRenderingResponse BulkRenderingResponse { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoRenderingResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoRenderingResultMessage>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class BulkRenderingResponse 
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<BulkRenderingResponseRowBase> Rows { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkRenderingResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkRenderingResponse>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class BulkRenderingResponseRowBase 
    {
        [Newtonsoft.Json.JsonProperty("OutputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputDetailBase Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputSource", Required = Newtonsoft.Json.Required.Always)]
        public OutputSource OutputSource { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkRenderingResponseRowBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkRenderingResponseRowBase>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OutputDetailBase 
    {
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OutputDetailImage : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailImage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailImage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OutputDetailAudio : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DurationInSeconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailAudio FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailAudio>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OutputDetailVideo : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sprites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Sprite> Sprites { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailVideo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailVideo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Sprite 
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }
    
        [Newtonsoft.Json.JsonProperty("X", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.TimeSpan Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("End", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.TimeSpan End { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Sprite FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sprite>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OutputDetailDocument : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("PageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailDocument>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OutputDetailDefault : OutputDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailDefault FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailDefault>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum OutputSource
    {
        Rendered = 0,
    
        Embedded = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class BulkRenderingResponseRowDefault : BulkRenderingResponseRowBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkRenderingResponseRowDefault FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkRenderingResponseRowDefault>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class BulkRenderingSpriteResponseRow : BulkRenderingResponseRowBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkRenderingSpriteResponseRow FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkRenderingSpriteResponseRow>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoRenderingMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("RenderingJobItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderingJobItem RenderingJobItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoRenderingMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoRenderingMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class RenderingJobItem 
    {
        [Newtonsoft.Json.JsonProperty("InputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InputFileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Output> Outputs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RenderingJobItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingJobItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Output 
    {
        [Newtonsoft.Json.JsonProperty("OutputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        /// <summary>The absolute path of the input file.</summary>
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        /// <summary>When true the rendered output file will be deleted after all subsequent outputs have been rendered.</summary>
        [Newtonsoft.Json.JsonProperty("Temporary", Required = Newtonsoft.Json.Required.Always)]
        public bool Temporary { get; set; }
    
        /// <summary>The rendering commands</summary>
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormatBase Format { get; set; }
    
        /// <summary>Based on the file rendered by this output subsequent outputs can be processed.</summary>
        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Output> Outputs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Output FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Output>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FormatBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ImageFormatBase : FormatBase
    {
        [Newtonsoft.Json.JsonProperty("ColorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorProfile? ColorProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorTransformationIntent", Required = Newtonsoft.Json.Required.Always)]
        public ColorTransformationIntent ColorTransformationIntent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HorizontalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenderFirstFrameOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool RenderFirstFrameOnly { get; set; }
    
        [Newtonsoft.Json.JsonProperty("KeepClippingPath", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepClippingPath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneExif", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneExif { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneIptc", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneIptc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneAdobeResources", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneAdobeResources { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CloneXmp", Required = Newtonsoft.Json.Required.Always)]
        public bool CloneXmp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction ResizeAction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ImageActionBase> Actions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ColorProfile
    {
        AdobeRgb1998 = 1,
    
        AppleRgb = 2,
    
        ColorMatchRgb = 3,
    
        EciRgbV1 = 4,
    
        EciRgbV2 = 5,
    
        Srgb = 6,
    
        SrgbColorSpaceProfile = 7,
    
        EuropeIsoCoatedFogra27 = 8,
    
        EuroscaleCoated = 9,
    
        EuroscaleUncoated = 10,
    
        IsoCoated = 11,
    
        IsoCoatedEciV2 = 12,
    
        JapanColor2001Coated = 13,
    
        JapanColor2001Uncoated = 14,
    
        JapanColor2002Newspaper = 15,
    
        JapanWebCoated = 16,
    
        UsSheetfedCoated = 17,
    
        UsSheetfedUncoated = 18,
    
        UsWebCoatedSwop = 19,
    
        UsWebUncoated = 20,
    
        IsoCoatedV2Grey1cBas = 21,
    
        IsoCoated300EciV2 = 22,
    
        CoatedFogra27 = 23,
    
        CoatedFogra39 = 24,
    
        UncoatedFogra29 = 25,
    
        WebCoatedFogra28 = 26,
    
        WebCoatedSwop2006Grade3 = 27,
    
        WebCoatedSwop2006Grade5 = 28,
    
        Isonewspaper26v4 = 29,
    
        Isonewspaper26v4Grey = 30,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ColorTransformationIntent
    {
        RelativeColorimetricBpc = 1,
    
        AbsoluteColorimetric = 2,
    
        Perceptual = 3,
    
        RelativeColorimetric = 4,
    
        Saturation = 5,
    
    }
    
    /// <summary>Does not implement the IImageAction interface. The ResizeAction is directly exposed within ImageFormat.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ResizeAction 
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeMode", Required = Newtonsoft.Json.Required.Always)]
        public ResizeMode ResizeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResizeAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ResizeMode
    {
        Fit = 0,
    
        Shrink = 1,
    
        Resize = 2,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ImageActionBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageActionBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageActionBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AlphaHandlingAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("AlphaHandling", Required = Newtonsoft.Json.Required.Always)]
        public AlphaHandling AlphaHandling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReplacementRgbColorHexCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReplacementRgbColorHexCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AlphaHandlingAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaHandlingAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum AlphaHandling
    {
        DiscardAlpha = 1,
    
        ReplaceAlpha = 2,
    
        ReplaceInvertedAlpha = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CropAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("X", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CropAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CropAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UnsharpenMaskAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Radius", Required = Newtonsoft.Json.Required.Always)]
        public double Radius { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Threshold", Required = Newtonsoft.Json.Required.Always)]
        public double Threshold { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnsharpenMaskAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnsharpenMaskAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class WatermarkAction : ImageActionBase
    {
        [Newtonsoft.Json.JsonProperty("WatermarkFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WatermarkText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WatermarkText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginTop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginRight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MarginBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MarginBottom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Opacity", Required = Newtonsoft.Json.Required.Always)]
        public double Opacity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthRatio", Required = Newtonsoft.Json.Required.Always)]
        public double WidthRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightRatio", Required = Newtonsoft.Json.Required.Always)]
        public double HeightRatio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WatermarkAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WatermarkAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OriginalFormat : FormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OriginalFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OriginalFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class JpegFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Always)]
        public int Quality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsProgressive", Required = Newtonsoft.Json.Required.Always)]
        public bool IsProgressive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChromaSubsamplingEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool ChromaSubsamplingEnabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static JpegFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JpegFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class PngFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("Interlaced", Required = Newtonsoft.Json.Required.Always)]
        public bool Interlaced { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PngFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PngFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TiffFormat : ImageFormatBase
    {
        [Newtonsoft.Json.JsonProperty("AlphaPremultiplied", Required = Newtonsoft.Json.Required.Always)]
        public bool AlphaPremultiplied { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompressionType", Required = Newtonsoft.Json.Required.Always)]
        public CompressionType CompressionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeUnspecifiedTiffExtraChannels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TiffFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TiffFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum CompressionType
    {
        None = 1,
    
        Lzw = 2,
    
        Rle = 3,
    
        Zip = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Mp4VideoFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("ResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction2 ResizeAction { get; set; }
    
        /// <summary>Gets or sets the encoding audio codec.</summary>
        [Newtonsoft.Json.JsonProperty("AudioCodec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioFormatBase AudioCodec { get; set; }
    
        /// <summary>Gets or sets the encoding codec preset.</summary>
        [Newtonsoft.Json.JsonProperty("Preset", Required = Newtonsoft.Json.Required.Always)]
        public Preset Preset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<IVideoAction> Actions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mp4VideoFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp4VideoFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ResizeAction2 
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResizeMode", Required = Newtonsoft.Json.Required.Always)]
        public ResizeMode ResizeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResizeAction2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResizeAction2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AudioFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Preset
    {
        Ultrafast = 0,
    
        Superfast = 1,
    
        Veryfast = 2,
    
        Faster = 3,
    
        Fast = 4,
    
        Medium = 5,
    
        Slow = 6,
    
        Slower = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IVideoAction 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IVideoAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IVideoAction>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoPresetFormat : VideoFormatBase
    {
        /// <summary>Id of Squeeze preset.</summary>
        [Newtonsoft.Json.JsonProperty("VideoPresetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid VideoPresetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoPresetFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoPresetFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoSpriteFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("SpriteResizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResizeAction2 SpriteResizeAction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxNumberOfSprites", Required = Newtonsoft.Json.Required.Always)]
        public int MaxNumberOfSprites { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Always)]
        public int Quality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoSpriteFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoSpriteFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoStillFormat : VideoFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PositionInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public int PositionInSeconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AacAudioFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        /// <summary>Gets or sets the encoding profile.</summary>
        [Newtonsoft.Json.JsonProperty("Profile", Required = Newtonsoft.Json.Required.Always)]
        public Profile Profile { get; set; }
    
        /// <summary>Gets or sets the encoding coder.</summary>
        [Newtonsoft.Json.JsonProperty("Coder", Required = Newtonsoft.Json.Required.Always)]
        public Coder Coder { get; set; }
    
        /// <summary>Gets or sets the bitrate of the encoding.</summary>
        [Newtonsoft.Json.JsonProperty("Bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }
    
        /// <summary>Gets or sets the encoding variable bit rate (VBR) - 1 is lowest quality and 5 is highest quality.</summary>
        [Newtonsoft.Json.JsonProperty("VariableBitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VariableBitRate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AacAudioFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AacAudioFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Profile
    {
        Aac_low = 0,
    
        Mpeg2_aac_low = 1,
    
        Aac_ltp = 2,
    
        Aac_main = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Coder
    {
        Twoloop = 0,
    
        Anmr = 1,
    
        Fast = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AudioPresetFormat : AudioFormatBase
    {
        /// <summary>Id of Squeeze preset.</summary>
        [Newtonsoft.Json.JsonProperty("AudioPresetId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid AudioPresetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioPresetFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioPresetFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AudioStillFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Mp3AudioFormat : AudioFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        /// <summary>Gets or sets the encoding bitrate.</summary>
        [Newtonsoft.Json.JsonProperty("Bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }
    
        /// <summary>Gets or sets the encoding quality.
        /// Values can be set it range of 0 to 9, where a lower value is a higher quality.</summary>
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Mp3AudioFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mp3AudioFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentFormatBase : FormatBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentFormatBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentFormatBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentStillFormat : DocumentFormatBase
    {
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentStillFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentStillFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class PdfFormat : DocumentFormatBase
    {
        /// <summary>JpegQuality parameter value must be between 0 and 100.</summary>
        [Newtonsoft.Json.JsonProperty("JpegQuality", Required = Newtonsoft.Json.Required.Always)]
        public int JpegQuality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FastWebView", Required = Newtonsoft.Json.Required.Always)]
        public bool FastWebView { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReduceFileSize", Required = Newtonsoft.Json.Required.Always)]
        public bool ReduceFileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultOutputExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultOutputExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AllowedOutputExtensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AllowedOutputExtensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtractFullText", Required = Newtonsoft.Json.Required.Always)]
        public bool ExtractFullText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PdfFormat FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfFormat>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ImageRenderingMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("RenderingJobItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderingJobItem RenderingJobItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageRenderingMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageRenderingMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ImageRenderingResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BulkRenderingResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkRenderingResponse BulkRenderingResponse { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageRenderingResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageRenderingResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentRenderingMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("RenderingJobItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderingJobItem RenderingJobItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentRenderingMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentRenderingMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentRenderingResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BulkRenderingResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkRenderingResponse BulkRenderingResponse { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentRenderingResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentRenderingResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AudioRenderingMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("RenderingJobItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderingJobItem RenderingJobItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioRenderingMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioRenderingMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AudioRenderingResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BulkRenderingResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkRenderingResponse BulkRenderingResponse { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioRenderingResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioRenderingResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExternalProviderRefreshAccessTokenMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessToken AccessToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExternalProviderRefreshAccessTokenMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalProviderRefreshAccessTokenMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AccessToken 
    {
        [Newtonsoft.Json.JsonProperty("ExternalProviderCredentialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalProviderCredentialId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalProviderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AccessTokenValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessTokenValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AccessTokenExpiryDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime AccessTokenExpiryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationSecret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationSecret { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RefreshToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefreshToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AccessToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccessToken>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExternalProviderRefreshAccessTokenResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessToken AccessToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExternalProviderRefreshAccessTokenResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExternalProviderRefreshAccessTokenResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ContentsOwnershipTransferMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsOwnershipTransferMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsOwnershipTransferMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemasOwnershipTransferMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemasOwnershipTransferMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemasOwnershipTransferMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ListItemsCreateMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ListItemCreateRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemsCreateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemsCreateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ListItemCreateRequest 
    {
        /// <summary>The id of the list item. When not provided a Guid is generated.</summary>
        [Newtonsoft.Json.JsonProperty("ListItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }
    
        /// <summary>The id of the schema with schema type list.</summary>
        [Newtonsoft.Json.JsonProperty("ContentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Content { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCreateRequest>(data);
        }
    }
    
    /// <summary>A custom implementation of Dictionary{string, object}</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DataDictionary : System.Collections.Generic.Dictionary<string, object>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DataDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ListItemsDeleteMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ListItemIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemsDeleteMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemsDeleteMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ApplicationEventMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem Recipient { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BufferContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BufferContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Notification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEventViewItem Notification { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SilentMode", Required = Newtonsoft.Json.Required.Always)]
        public bool SilentMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Always)]
        public ApplicationEventType EventType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ListItemsChangeEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Always)]
        public long TotalCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ListItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ListItemIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        public DocumentChangeAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public DocumentActionState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemsChangeEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemsChangeEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum DocumentChangeAction
    {
        Create = 0,
    
        Update = 1,
    
        Delete = 2,
    
        Activate = 3,
    
        Deactivate = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum DocumentActionState
    {
        Pending = 0,
    
        InProgress = 1,
    
        Completed = 2,
    
        Failed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("Exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TraceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TraceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationEventViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TitleCode", Required = Newtonsoft.Json.Required.Always)]
        public TitleCode TitleCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MessageCode", Required = Newtonsoft.Json.Required.Always)]
        public MessageCode MessageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationDetailBase Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public NotificationState State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationEventViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationEventViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TitleCode
    {
        TransferInProgressTitle = 200001,
    
        TransferCompletedTitle = 200002,
    
        ImportInProgressTitle = 200003,
    
        ImportCompletedTitle = 200004,
    
        ShareNewShareTitle = 200005,
    
        TransferCancelledTitle = 200006,
    
        ImportCancelledTitle = 200007,
    
        TransferFailedTitle = 200008,
    
        SchemaImportInProgressTitle = 200010,
    
        SchemaImportCompletedTitle = 200011,
    
        ImportFailedTitle = 2000009,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum MessageCode
    {
        TransferInProgressMessage = 300001,
    
        TransferCompletedMessage = 300002,
    
        ImportInProgressMessage = 300003,
    
        ImportCompletedMessage = 300004,
    
        ShareNewShareMessage = 300005,
    
        TransferCancelledMessage = 300006,
    
        ImportCancelledMessage = 300007,
    
        TransferFailedMessage = 300008,
    
        TransferInProgressWithFailedMessage = 300010,
    
        TransferCompletedWithFailedMessage = 300011,
    
        TransferCancelledWithFailedMessage = 300012,
    
        ImportInProgressWithFailedMessage = 300013,
    
        ImportCompletedWithFailedMessage = 300014,
    
        ImportCancelledWithFailedMessage = 300015,
    
        SchemaImportInProgressMessage = 300016,
    
        SchemaImportCompletedMessage = 300017,
    
        ImportFailedMessage = 3000009,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailContentImport : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailContentImport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailContentImport>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailTransfer : NotificationDetailBase
    {
        [Newtonsoft.Json.JsonProperty("FileProgress", Required = Newtonsoft.Json.Required.Always)]
        public long FileProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileCount", Required = Newtonsoft.Json.Required.Always)]
        public long FileCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FailedCount", Required = Newtonsoft.Json.Required.Always)]
        public long FailedCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CancelledCount", Required = Newtonsoft.Json.Required.Always)]
        public long CancelledCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailTransfer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailDownloadComplete : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailDownloadComplete FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailDownloadComplete>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailDriveSynchronization : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailDriveSynchronization FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailDriveSynchronization>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailFileTransfer : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailFileTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailFileTransfer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailImportComplete : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailImportComplete FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailImportComplete>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailShare : NotificationDetailBase
    {
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailShare FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailShare>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailTaskRunner : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailTaskRunner FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailTaskRunner>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailUser : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailUser>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailUserContentImport : NotificationDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailUserContentImport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailUserContentImport>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotificationDetailSchemaImport : NotificationDetailBase
    {
        [Newtonsoft.Json.JsonProperty("FileProgress", Required = Newtonsoft.Json.Required.Always)]
        public long FileProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileCount", Required = Newtonsoft.Json.Required.Always)]
        public long FileCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SchemaCount", Required = Newtonsoft.Json.Required.Always)]
        public long SchemaCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SchemaProgress", Required = Newtonsoft.Json.Required.Always)]
        public long SchemaProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ListItemCount", Required = Newtonsoft.Json.Required.Always)]
        public long ListItemCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ListItemProgress", Required = Newtonsoft.Json.Required.Always)]
        public long ListItemProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotificationDetailSchemaImport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationDetailSchemaImport>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum NotificationState
    {
        Draft = 0,
    
        Unread = 10,
    
        Read = 20,
    
        Deleted = 30,
    
        Null = -1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ApplicationEventType
    {
        Info = 1,
    
        Transition = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemaChangeEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        public DocumentChangeAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public DocumentActionState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaChangeEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaChangeEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemaDeleteMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaDeleteMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaDeleteMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemaCreateMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaCreateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaCreateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCreateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemaCreateRequest 
    {
        /// <summary>The schema id. Can be a slug, but must be unique throughout the whole customer setup.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The parent schema id.</summary>
        [Newtonsoft.Json.JsonProperty("ParentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }
    
        /// <summary>Types control schema usage.</summary>
        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SchemaType> Types { get; set; }
    
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("Descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields. Can be empty.</summary>
        [Newtonsoft.Json.JsonProperty("Fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FieldBase> Fields { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("Aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>A simple ordering property for schemas.</summary>
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SortInfo> Sort { get; set; }
    
        /// <summary>Opens list item document accessibility. If true SchemaPermissionSetIds must be empty.</summary>
        [Newtonsoft.Json.JsonProperty("Public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets. Control list item document permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("LayerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("ReferencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ReferencedInContentSchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SchemaType
    {
        Content = 1,
    
        Layer = 2,
    
        List = 3,
    
        Struct = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DisplayPattern 
    {
        /// <summary>The display pattern id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Defines the template engine for parsing the templates.</summary>
        [Newtonsoft.Json.JsonProperty("TemplateEngine", Required = Newtonsoft.Json.Required.Always)]
        public TemplateEngine TemplateEngine { get; set; }
    
        /// <summary>Defines the pattern type of the templates.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayPatternType", Required = Newtonsoft.Json.Required.Always)]
        public DisplayPatternType DisplayPatternType { get; set; }
    
        /// <summary>Language specific pattern templates.</summary>
        [Newtonsoft.Json.JsonProperty("Templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Templates { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DisplayPattern FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayPattern>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TemplateEngine
    {
        DotLiquid = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum DisplayPatternType
    {
        Thumbnail = 1,
    
        List = 2,
    
        Detail = 3,
    
        Custom = 4,
    
        Name = 5,
    
    }
    
    /// <summary>The field base class.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldBase 
    {
        /// <summary>The field id. Can be a slug and must be unique within the schema.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The index id is auto generated by the system.</summary>
        [Newtonsoft.Json.JsonProperty("IndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        /// <summary>The namespace is auto generated by the system.</summary>
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>Language specific field names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Defines if a field value is mandatory or not.</summary>
        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }
    
        /// <summary>Defines if the field can be edited or not.</summary>
        [Newtonsoft.Json.JsonProperty("Fixed", Required = Newtonsoft.Json.Required.Always)]
        public bool Fixed { get; set; }
    
        /// <summary>Maps the field in the elastic search index and its values become searchable.</summary>
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }
    
        /// <summary>Includes fields in the simple search. Index must be true.</summary>
        [Newtonsoft.Json.JsonProperty("SimpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        /// <summary>Priorizes search results. SimpleSearch must be true.</summary>
        [Newtonsoft.Json.JsonProperty("Boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldBoolean : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBoolean FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBoolean>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldDate : FieldBase
    {
        /// <summary>Defines the date format structure.</summary>
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDate>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldDateTime : FieldBase
    {
        /// <summary>Defines the date time format structure.</summary>
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTime FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTime>(data);
        }
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldDateTimeArray : FieldDateTime
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTimeArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTimeArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldDecimal : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the lowest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("Minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        /// <summary>Defines the highest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("Maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDecimal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDecimal>(data);
        }
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldDictionary : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionary>(data);
        }
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldDictionaryArray : FieldDictionary
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionaryArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionaryArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldGeoPoint : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldGeoPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldGeoPoint>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldLong : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the lowest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("Minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        /// <summary>Defines the highest possible value.</summary>
        [Newtonsoft.Json.JsonProperty("Maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldLong FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLong>(data);
        }
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldLongArray : FieldLong
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldLongArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLongArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldSingleFieldset : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Avoids cyclic dependencies and limits the elastic search index and json schema depth.</summary>
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleFieldset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleFieldset>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldMultiFieldset : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Avoids cyclic dependencies and limits the elastic search index and json schema depth.</summary>
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        /// <summary>Prevents duplicate values.</summary>
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        /// <summary>Defines the highest possible fieldset count.</summary>
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        /// <summary>Defines the lowest possible fieldset count.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiFieldset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiFieldset>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldSingleTagbox : FieldBase
    {
        /// <summary>The id of the schema with type list.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Avoids cyclic dependencies and limits the elastic search index and json schema depth.</summary>
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Json serialized template used for creating new list item</summary>
        [Newtonsoft.Json.JsonProperty("ListItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleTagbox>(data);
        }
    }
    
    /// <summary>The FilterBase is the base class for all filters.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FilterBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data);
        }
    }
    
    /// <summary>The AndFilter> is a compound filter and returns documents that match all of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AndFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AndFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data);
        }
    }
    
    /// <summary>The OrFilter is a compound filter and returns documents that match any of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OrFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data);
        }
    }
    
    /// <summary>The NotFilter is a compound filter and returns documents that do not match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NotFilter : FilterBase
    {
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data);
        }
    }
    
    /// <summary>The DateRangeFilter returns documents with fields that have date values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DateRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The date range. Supported pattern: now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data);
        }
    }
    
    /// <summary>The date range class used in aggregators and filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DateRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
        /// <summary>The to value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data);
        }
    }
    
    /// <summary>The ExistsFilter returns documents that have at least one non-null value in the original field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExistsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data);
        }
    }
    
    /// <summary>The GeoBoundingBoxFilter returns documents that are found based on a point location using a bounding box.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The top left longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("TopLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation TopLeft { get; set; }
    
        /// <summary>The bottom right longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("BottomRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation BottomRight { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoBoundingBoxFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GeoLocation 
    {
        [Newtonsoft.Json.JsonProperty("Lat", Required = Newtonsoft.Json.Required.Always)]
        public double Lat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lon", Required = Newtonsoft.Json.Required.Always)]
        public double Lon { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data);
        }
    }
    
    /// <summary>The GeoDistanceRangeFilter returns documents that include only hits that exists within a specific distance from a geo point.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GeoDistanceFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The longitude/latitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>The range distance in meters.</summary>
        [Newtonsoft.Json.JsonProperty("Distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data);
        }
    }
    
    /// <summary>The GeoDistanceRangeFilter returns documents that exists within a range from a specific point.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GeoDistanceRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The longitude/latitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>The numeric range.</summary>
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NumericRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value.</summary>
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }
    
        /// <summary>The to value.</summary>
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data);
        }
    }
    
    /// <summary>The NestedFilter is a joining filter and returns documents whose nested objects / documents (see nested mapping) match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NestedFilter : FilterBase
    {
        /// <summary>The path pointing to the nested object.</summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data);
        }
    }
    
    /// <summary>The NumericRangeFilter returns documents with fields that have numeric values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NumericRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The numeric range with from and to properties.</summary>
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data);
        }
    }
    
    /// <summary>The PrefixFilter returns documents that have fields containing terms with a specified prefix (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class PrefixFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The prefix term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PrefixFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data);
        }
    }
    
    /// <summary>The TermFilter returns documents that contain the exact term specified in the inverted index.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TermFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Term { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data);
        }
    }
    
    /// <summary>The TermsFilter returns documents that have fields that match any of the provided terms (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TermsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of OR combined terms.</summary>
        [Newtonsoft.Json.JsonProperty("Terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Terms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data);
        }
    }
    
    /// <summary>An AggregationFilter is provided with each aggregated value. When selecting the aggregated value the aggregation filter is added to the search query and returns doucments meeting the aggregation condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AggregationFilter : FilterBase
    {
        /// <summary>The name of the aggregation this filter is connected to.</summary>
        [Newtonsoft.Json.JsonProperty("AggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }
    
        /// <summary>The aggregation filter property. Available filters are TermFilter, DateRangeFilter, NumericRangeFilter and GeoDistanceRangeFilter.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TemporaryAggregatorRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemporaryAggregatorRequestId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data);
        }
    }
    
    /// <summary>The ChildFilter allows to apply filters on child documents and returns documents that match the specified filter on the child document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ChildFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a child.</summary>
        [Newtonsoft.Json.JsonProperty("ChildType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChildType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChildFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChildFilter>(data);
        }
    }
    
    /// <summary>The ParentFilter allows to apply filters on parent documents and returns documents that match the specified filter on the parent document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ParentFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a parent.</summary>
        [Newtonsoft.Json.JsonProperty("ParentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParentFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldMultiTagbox : FieldBase
    {
        /// <summary>The id of the schema with type list.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Avoids cyclic dependencies and limits the elastic search index and json schema depth.</summary>
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        /// <summary>Prevents duplicate values.</summary>
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        /// <summary>Defines the highest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        /// <summary>Defines the lowest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Json serialized template used for creating new list item</summary>
        [Newtonsoft.Json.JsonProperty("ListItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiTagbox>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldString : FieldBase
    {
        /// <summary>It is a DotLiquid template.</summary>
        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        /// <summary>If true the Template will only render on item creation otherwise it will render on each update.</summary>
        [Newtonsoft.Json.JsonProperty("KeepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        /// <summary>Contains a regex validation pattern.</summary>
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the minimal string length.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        /// <summary>Defines the maximal string length.</summary>
        [Newtonsoft.Json.JsonProperty("MaximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        /// <summary>A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.</summary>
        [Newtonsoft.Json.JsonProperty("Analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyzerBase> Analyzers { get; set; }
    
        /// <summary>Displays the field value in a multiline component.</summary>
        [Newtonsoft.Json.JsonProperty("MultiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        /// <summary>Similar to an enumeration valid field values are limited to values of this list.</summary>
        [Newtonsoft.Json.JsonProperty("GrantedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> GrantedValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldString>(data);
        }
    }
    
    /// <summary>The analyzer base class.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AnalyzerBase 
    {
        /// <summary>Includes the analyzed field in the simple search.</summary>
        [Newtonsoft.Json.JsonProperty("SimpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyzerBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyzerBase>(data);
        }
    }
    
    /// <summary>An analyzer using the EdgeNGram tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class EdgeNGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EdgeNGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EdgeNGramAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using a language analyzer. Restricted to the languages supported by elastic search.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class LanguageAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LanguageAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using the NGram tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-ngram-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NGramAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using the path hierarchy tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pathhierarchy-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class PathHierarchyAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PathHierarchyAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PathHierarchyAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using a custom pattern tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SimpleAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimpleAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleAnalyzer>(data);
        }
    }
    
    /// <summary>For internal use only (system schemas)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldStringArray : FieldString
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldStringArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldStringArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldTranslatedString : FieldBase
    {
        /// <summary>Contains a regex validation pattern.</summary>
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        /// <summary>Defines the minimal string length.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        /// <summary>Defines the maximal string length.</summary>
        [Newtonsoft.Json.JsonProperty("MaximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        /// <summary>A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.</summary>
        [Newtonsoft.Json.JsonProperty("Analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AnalyzerBase> Analyzers { get; set; }
    
        /// <summary>Displays the field value in a multiline component.</summary>
        [Newtonsoft.Json.JsonProperty("MultiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        /// <summary>Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.
        /// If Required is true, the field and all its metadata languages are required, including x-default.
        /// If Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory, including x-default.</summary>
        [Newtonsoft.Json.JsonProperty("RequiredMetadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> RequiredMetadataLanguages { get; set; }
    
        /// <summary>It is a DotLiquid template.</summary>
        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        /// <summary>If true the Template will only render on item creation otherwise it will render on each update.</summary>
        [Newtonsoft.Json.JsonProperty("KeepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldTranslatedString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldTranslatedString>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldSingleRelation : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Defines the relation types supported by the field.</summary>
        [Newtonsoft.Json.JsonProperty("RelationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RelationType> RelationTypes { get; set; }
    
        /// <summary>Avoids cyclic dependencies and limits the elastic search index and json schema depth.</summary>
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleRelation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleRelation>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class RelationType 
    {
        /// <summary>The id property.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Language specific relation names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Defines the valid target context.</summary>
        [Newtonsoft.Json.JsonProperty("TargetContext", Required = Newtonsoft.Json.Required.Always)]
        public TargetContext TargetContext { get; set; }
    
        /// <summary>The id of the schema. Limits the content or the list item result set depending on the relation's target context.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>An optional search filter. Limits the content or the list item result set depending on the relation's target context.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationType>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TargetContext
    {
        Content = 1,
    
        ListItem = 2,
    
        User = 3,
    
        Custom = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FieldMultiRelation : FieldBase
    {
        /// <summary>The id of the schema with type struct.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>Defines the relation types supported by the field.</summary>
        [Newtonsoft.Json.JsonProperty("RelationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RelationType> RelationTypes { get; set; }
    
        /// <summary>Avoids cyclic dependencies and limits the elastic search index and json schema depth.</summary>
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        /// <summary>Prevents duplicate values.</summary>
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        /// <summary>Defines the highest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        /// <summary>Dfines the lowest possible item count.</summary>
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiRelation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiRelation>(data);
        }
    }
    
    /// <summary>The AggregatorBase is the base class for all aggregators.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AggregatorBase 
    {
        /// <summary>The slug name of the aggregation. Must be unique per aggregation request.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The translated names of the aggregation.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>An optional aggregator list for nested aggregations.</summary>
        [Newtonsoft.Json.JsonProperty("Aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AggregatorBase> Aggregators { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregatorBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregatorBase>(data);
        }
    }
    
    /// <summary>The DateRangeAggregator is a multi-bucket range aggregation dedicated for date values. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DateRangeAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of date ranges. Supported pattern: now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("Ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DateRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeAggregator>(data);
        }
    }
    
    /// <summary>The FilterAggregator is a single bucket aggregation of documents that match a specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FilterAggregator : AggregatorBase
    {
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterAggregator>(data);
        }
    }
    
    /// <summary>The GeoDistanceAggregator is a multi-bucket range aggregation that works on geo_point fields. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GeoDistanceAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The latitude/logitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>A list of numeric ranges in meter.</summary>
        [Newtonsoft.Json.JsonProperty("Ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<NumericRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceAggregator>(data);
        }
    }
    
    /// <summary>The NestedAggregator is a special single bucket aggregation that enables aggregating nested documents.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NestedAggregator : AggregatorBase
    {
        /// <summary>The path pointing to the nested object.</summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedAggregator>(data);
        }
    }
    
    /// <summary>The NumericRangeAggregator is a multi-bucket range aggregation. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NumericRangeAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of numeric ranges.</summary>
        [Newtonsoft.Json.JsonProperty("Ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<NumericRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeAggregator>(data);
        }
    }
    
    /// <summary>The TermsAggregator is a multi-bucket value aggregation where buckets are dynamically built - one per unique value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TermsAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field (not analyzed) to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The size parameter can be set to define how many term buckets should be returned out of the overall terms list.</summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        /// <summary>Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.</summary>
        [Newtonsoft.Json.JsonProperty("Includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Includes { get; set; }
    
        /// <summary>Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.</summary>
        [Newtonsoft.Json.JsonProperty("Excludes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Excludes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAggregator>(data);
        }
    }
    
    /// <summary>The TermsRelationAggregator is derived from TermsAggregator and used for aggregations on relation item ids.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TermsRelationAggregator : TermsAggregator
    {
        /// <summary>When aggregating on relations ids the DocumentType is needed to resolve the target item translation.</summary>
        [Newtonsoft.Json.JsonProperty("DocumentType", Required = Newtonsoft.Json.Required.Always)]
        public TermsRelationAggregatorDocumentType DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsRelationAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsRelationAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TermsRelationAggregatorDocumentType
    {
        Content = 0,
    
        ListItem = 1,
    
        Schema = 2,
    
        User = 3,
    
    }
    
    /// <summary>The TermsRelationAggregator is derived from the TermsAggregator and used for aggregations on indexed enum values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TermsEnumAggregator : TermsAggregator
    {
        /// <summary>When aggregating on enum fields EnumType is needed to resolve the enum translation.</summary>
        [Newtonsoft.Json.JsonProperty("EnumType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnumType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsEnumAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsEnumAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SortInfo 
    {
        /// <summary>The elastic search index field to sort on.</summary>
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The sort direction (Asc/Desc).</summary>
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Always)]
        public SortDirection Direction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SortInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SortDirection
    {
        Asc = 1,
    
        Desc = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ListItemsUpdateMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ListItemUpdateRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemsUpdateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemsUpdateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ListItemUpdateRequest 
    {
        /// <summary>The list item id.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Content { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemaUpdateMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaUpdateRequest Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaUpdateMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemaUpdateRequest 
    {
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("Descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields.</summary>
        [Newtonsoft.Json.JsonProperty("Fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FieldBase> Fields { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and list items.</summary>
        [Newtonsoft.Json.JsonProperty("Aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>A simple ordering property for schemas.</summary>
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SortInfo> Sort { get; set; }
    
        /// <summary>Opens schema accessibility.</summary>
        [Newtonsoft.Json.JsonProperty("Public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("LayerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("ReferencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ReferencedInContentSchemaIds { get; set; }
    
        /// <summary>Types control schema usage. Schema types can only be added, but not removed.</summary>
        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SchemaType> Types { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemaImportMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImportListItems", Required = Newtonsoft.Json.Required.Always)]
        public bool ImportListItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaImportMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaImportMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class BufferedApplicationEventMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BufferContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BufferContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Always)]
        public ApplicationEventType EventType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BufferedApplicationEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BufferedApplicationEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class LeightWorkerMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LeightWorkerMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LeightWorkerMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class HeavyWorkerMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Created { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HeavyWorkerMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HeavyWorkerMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentsChangeMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocumentChangeMessage> Messages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentsChangeMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentsChangeMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentChangeMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("DocumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentChangeAction2 Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime TimeStamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentChangeMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentChangeMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum DocumentChangeAction2
    {
        [System.Runtime.Serialization.EnumMember(Value = "Create")]
        Create = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Activate")]
        Activate = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deactivate")]
        Deactivate = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SearchRequestMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime TimeStamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class RequestMessage2 : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveType", Required = Newtonsoft.Json.Required.Always)]
        public DriveType DriveType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessToken AccessToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveLimits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IDriveLimits DriveLimits { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RequestMessage2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequestMessage2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GetThumbnailMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StorageFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageFilePath { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetThumbnailMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetThumbnailMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum DriveType
    {
        GoogleDrive = 1,
    
        OneDrive = 2,
    
        Dropbox = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IDriveLimits 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IDriveLimits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IDriveLimits>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DownloadThumbnailResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadThumbnailResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadThumbnailResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GetThumbnailResultMessage : DownloadThumbnailResultMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetThumbnailResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetThumbnailResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveTransferMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveType", Required = Newtonsoft.Json.Required.Always)]
        public DriveType DriveType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileUploadMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UploadFileMessage> FileUploadMessages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveTransferMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveTransferMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UploadFileMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("ExternalOutputFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputFolderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerDatabaseIndex", Required = Newtonsoft.Json.Required.Always)]
        public int CustomerDatabaseIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadFileMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadFileMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UploadFileResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalOutputFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputFolderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UploadFileResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadFileResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DownloadThumbnailMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StorageFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageFilePath { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadThumbnailMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadThumbnailMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveGetAbolutePathResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveAbsolutePathViewItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DriveAbsolutePathViewItem> DriveAbsolutePathViewItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveGetAbolutePathResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveGetAbolutePathResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveAbsolutePathViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveAbsolutePathViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveAbsolutePathViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveGetAbolutePathRequestMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("ItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveGetAbolutePathRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveGetAbolutePathRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileDetailResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileDetailViewItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveFileDetailViewItem FileDetailViewItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileDetailResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileDetailResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveFileDetailViewItem 
    {
        [Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DownloadUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ETag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveFileDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveFileDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileDetailMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileDetailMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileDetailMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DownloadFileResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadata DriveMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadFileResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadFileResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadataAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveMetadataAudit 
    {
        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Opened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Opened { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadataAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadataAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DownloadFileMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerDatabaseIndex", Required = Newtonsoft.Json.Required.Always)]
        public int CustomerDatabaseIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFilePath { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadFileMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadFileMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveFolderContentRequestMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeFileTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DriveFileTypes> IncludeFileTypes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveFolderContentRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveFolderContentRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum DriveFileTypes
    {
        File = 1,
    
        Folder = 2,
    
        Share = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveFolderContentResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalFolderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileList FileList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveFolderContentResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveFolderContentResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileList 
    {
        [Newtonsoft.Json.JsonProperty("NextPageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<File> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileList>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class File 
    {
        [Newtonsoft.Json.JsonProperty("AlternateLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreatedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DownloadUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Editable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Editable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmbedLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmbedLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ETag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ETag { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExportLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ExportLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FolderColorRgb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderColorRgb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeadRevisionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeadRevisionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IconLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kind { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Md5Checksum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Md5Checksum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifiedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifiedDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OpenWithLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OpenWithLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalFilename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalFilename { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OwnerNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> OwnerNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Shared { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ThumbnailLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebContentLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebContentLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebViewLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebViewLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WritersCanShare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WritersCanShare { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static File FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<File>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveCacheableRequestMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Argument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Argument { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeFileTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DriveFileTypes> IncludeFileTypes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveCacheableRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveCacheableRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveGetFolderContentRequestMessage : DriveCacheableRequestMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveGetFolderContentRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveGetFolderContentRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveGetFolderContentResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalFolderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileList FileList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveGetFolderContentResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveGetFolderContentResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveGetSearchResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileList FileList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveGetSearchResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveGetSearchResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveSearchRequestMessage : RequestMessage2
    {
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeFileTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DriveFileTypes> IncludeFileTypes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveSearchRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveSearchRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveSearchResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileList FileList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveSearchResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveSearchResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveGetSearchRequestMessage : DriveCacheableRequestMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveGetSearchRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveGetSearchRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractDocumentTextMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractDocumentTextMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractDocumentTextMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractDocumentTextResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullTextByPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> FullTextByPages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractDocumentTextResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractDocumentTextResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractDataMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenderingJobItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderingJobItem RenderingJobItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractDataMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractDataMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractDataResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileMetadata FileMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BulkRenderingResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkRenderingResponse BulkRenderingResponse { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractDataResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractDataResultMessage>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpMetadata XmpMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExifMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExifMetadata ExifMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Dc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dc Dc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Crs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Crs Crs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IptcCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcCore IptcCore { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IptcExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcExt IptcExt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IptcIIM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcIIM IptcIIM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Lr Lr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Pdf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pdf Pdf { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Photoshop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Photoshop Photoshop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Plus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plus Plus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tiff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tiff Tiff { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Xmp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Xmp Xmp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpBJ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpBJ XmpBJ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpDM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpDM XmpDM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpG XmpG { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpGImg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpGImg XmpGImg { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Xmpidq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Xmpidq Xmpidq { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpMM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpMM XmpMM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpNote XmpNote { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpRights XmpRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpTPg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpTPg XmpTPg { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Dc 
    {
        [Newtonsoft.Json.JsonProperty("Contributor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Contributor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.DateTime> Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Publisher { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Relation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Rights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Subject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Dc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Crs 
    {
        [Newtonsoft.Json.JsonProperty("AutoBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoBrightness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutoContrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoContrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutoExposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoExposure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutoShadows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoShadows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BlueHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlueHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BlueSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlueSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Brightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Brightness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChromaticAberrationB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChromaticAberrationB { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChromaticAberrationR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChromaticAberrationR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorNoiseReduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ColorNoiseReduction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Contrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Contrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropTop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropBottom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropRight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropAngle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CropUnit? CropUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Exposure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GreenHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GreenHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GreenSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GreenSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasCrop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCrop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasSettings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LuminanceSmoothing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LuminanceSmoothing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RawFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawFileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RedHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RedSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Saturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Saturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shadows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Shadows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShadowTint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShadowTint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sharpness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sharpness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Temperature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ToneCurve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ToneCurve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ToneCurveName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ToneCurve? ToneCurveName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VignetteAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VignetteAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VignetteMidpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VignetteMidpoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WhiteBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WhiteBalance? WhiteBalance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Crs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Crs>(data);
        }
    }
    
    /// <summary>Corresponds to crs.CropUnitsChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum CropUnit
    {
        Pixels = 0,
    
        Inches = 1,
    
        Centimeters = 2,
    
    }
    
    /// <summary>Corresponds to crs.ToneCurveNameChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ToneCurve
    {
        Linear = 0,
    
        MediumContrast = 1,
    
        StrongContrast = 2,
    
        Custom = 3,
    
    }
    
    /// <summary>Corresponds to crs.WhiteBalanceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum WhiteBalance
    {
        AsShot = 0,
    
        Auto = 1,
    
        Daylight = 2,
    
        Cloudy = 3,
    
        Shade = 4,
    
        Tungsten = 5,
    
        Fluorescent = 6,
    
        Flash = 7,
    
        Custom = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IptcCore 
    {
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IntellectualGenre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntellectualGenre { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Scene", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Scene { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SubjectCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatorContactInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorContactInfo CreatorContactInfo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcCore FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcCore>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreatorContactInfo 
    {
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }
    
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreatorContactInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatorContactInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IptcExt 
    {
        [Newtonsoft.Json.JsonProperty("AdditionalModelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalModelInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ArtworkOrObject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ArtworkOrObjectInfo> ArtworkOrObject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrganisationInImageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> OrganisationInImageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ControlledVocabularyTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ControlledVocabularyTerm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationShown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<LocationInfo> LocationShown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ModelAge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrganisationInImageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> OrganisationInImageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PersonInImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> PersonInImage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalImageGUID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalImageGUID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalSourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalSourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageRegistryEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RegistryEntryInfo> ImageRegistryEntry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataLastEdited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MetadataLastEdited { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<LocationInfo> LocationCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxAvailHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAvailHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxAvailWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAvailWidth { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcExt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcExt>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Structure.ArtworkOrObjectDetails</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ArtworkOrObjectInfo 
    {
        [Newtonsoft.Json.JsonProperty("CopyrightNotice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightNotice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SourceInventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceInventoryNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Title { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ArtworkOrObjectInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtworkOrObjectInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class LocationInfo 
    {
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProvinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sublocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sublocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WorldRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorldRegion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LocationInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class RegistryEntryInfo 
    {
        [Newtonsoft.Json.JsonProperty("RegistryItemIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistryItemIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RegistryOrganisationIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistryOrganisationIdentifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RegistryEntryInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegistryEntryInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IptcIIM 
    {
        [Newtonsoft.Json.JsonProperty("ModelVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModelVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileFormatVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileFormatVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EnvelopeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvelopeNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProductID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ProductID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EnvelopePriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnvelopePriority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateSent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeSent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UNO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UNO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecordVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ObjectTypeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectTypeReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ObjectAttributeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectAttributeReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ObjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ObjectName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EditStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Urgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Urgency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SubjectReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupplementalCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SupplementalCategory { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FixtureIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FixtureIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Keywords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentLocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentLocationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReleaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReleaseTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpecialInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialInstruction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ActionAdvised", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionAdvised { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceService { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReferenceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalCreationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DigitalCreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalCreationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DigitalCreationTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginatingProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginatingProgram { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProgramVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgramVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Byline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Byline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BylineTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BylineTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sublocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sublocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProvinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryPrimaryLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryPrimaryLocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryPrimaryLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryPrimaryLocationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalTransmissionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalTransmissionReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightNotice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CopyrightNotice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CaptionAbstract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CaptionAbstract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WriterEditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WriterEditor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageOrientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageOrientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageIdentifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcIIM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcIIM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Lr 
    {
        [Newtonsoft.Json.JsonProperty("HierarchicalSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> HierarchicalSubject { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Lr FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Lr>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Pdf 
    {
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PDFVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PDFVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Producer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Producer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trapped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Trapped { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pdf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Photoshop 
    {
        [Newtonsoft.Json.JsonProperty("AuthorsPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorsPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CaptionWriter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionWriter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorMode? ColorMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentAncestors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> DocumentAncestors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("History", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string History { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ICCProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ICCProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupplementalCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SupplementalCategories { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PhotoshopLayer> TextLayers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransmissionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransmissionReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Urgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Urgency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LegacyIPTCDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegacyIPTCDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Photoshop FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Photoshop>(data);
        }
    }
    
    /// <summary>Corresponds to photoshop.ColorModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ColorMode
    {
        Bitmap = 0,
    
        Grayscale = 1,
    
        Indexed = 2,
    
        RGB = 3,
    
        CMYK = 4,
    
        Multichannel = 5,
    
        Duotone = 6,
    
        LAB = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class PhotoshopLayer 
    {
        [Newtonsoft.Json.JsonProperty("LayerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LayerText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PhotoshopLayer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PhotoshopLayer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Plus 
    {
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Licensee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<LicenseeInfo> Licensee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<EndUserInfo> EndUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUserID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Licensor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<LicensorInfo> Licensor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> LicensorNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MediaSummaryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaSummaryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MediaConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MediaConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RegionConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> RegionConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProductOrServiceConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ProductOrServiceConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageFileConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ImageFileConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageAlterationConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ImageAlterationConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageDuplicationConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageDuplicationConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelReleaseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelReleaseStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelReleaseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ModelReleaseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinorModelAgeDisclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinorModelAgeDisclosure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PropertyReleaseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyReleaseStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PropertyReleaseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> PropertyReleaseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreditLineRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditLineRequired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdultContentWarning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdultContentWarning { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherLicenseRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherLicenseRequirements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TermsAndConditionsText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> TermsAndConditionsText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TermsAndConditionsURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsAndConditionsURL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherConditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileNameAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileNameAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageFileFormatAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageFileFormatAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageFileSizeAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageFileSizeAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightRegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstPublicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FirstPublicationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CopyrightOwnerInfo> CopyrightOwner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightOwnerImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageCreator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ImageCreatorInfo> ImageCreator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageCreatorImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageSupplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ImageSupplierInfo> ImageSupplier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageSupplierImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeImageNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> LicenseeImageNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherImageInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherImageInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LicensorTransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LicenseeTransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeProjectReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LicenseeProjectReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseTransactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseTransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reuse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reuse { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherLicenseDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> OtherLicenseDocuments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherLicenseInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherLicenseInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom4 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom5 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom6 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom7 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom8 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom9 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.Dictionary<string, string>> Custom10 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Plus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Plus>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class LicenseeInfo 
    {
        [Newtonsoft.Json.JsonProperty("LicenseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LicenseeInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseeInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class EndUserInfo 
    {
        [Newtonsoft.Json.JsonProperty("EndUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUserID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EndUserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EndUserInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class LicensorInfo 
    {
        [Newtonsoft.Json.JsonProperty("LicensorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorStreetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorStreetAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorExtendedAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorExtendedAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorRegion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorPostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorPostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephoneType1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephoneType1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephone1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephoneType2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephoneType2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephone2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorURL { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LicensorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicensorInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CopyrightOwnerInfo 
    {
        [Newtonsoft.Json.JsonProperty("CopyrightOwnerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightOwnerID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CopyrightOwnerInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CopyrightOwnerInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ImageCreatorInfo 
    {
        [Newtonsoft.Json.JsonProperty("ImageCreatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageCreatorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageCreatorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageCreatorInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ImageSupplierInfo 
    {
        [Newtonsoft.Json.JsonProperty("ImageSupplierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageSupplierID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageSupplierInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageSupplierInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Tiff 
    {
        [Newtonsoft.Json.JsonProperty("Artist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitsPerSample", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> BitsPerSample { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Compression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Compression? Compression { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Copyright { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ImageDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Make", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Make { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Orientation? Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PhotometricInterpretation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PhotometricInterpretation? PhotometricInterpretation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PlanarConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PlanarConfiguration? PlanarConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PrimaryChromaticities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> PrimaryChromaticities { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceBlackWhite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ReferenceBlackWhite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResolutionUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResolutionUnit? ResolutionUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SamplesPerPixel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplesPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Software", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Software { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> TransferFunction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WhitePoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> WhitePoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string YResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YCbCrCoefficients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> YCbCrCoefficients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YCbCrPositioning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YCbCrPositioning? YCbCrPositioning { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YCbCrSubSampling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public YCbCrSubSampling? YCbCrSubSampling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NativeDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tiff FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tiff>(data);
        }
    }
    
    /// <summary>Corresponds to tiff.CompressionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Compression
    {
        Uncompressed = 0,
    
        CCITT = 1,
    
        T4 = 2,
    
        T6 = 3,
    
        LZW = 4,
    
        OJPEG = 5,
    
        JPEG = 6,
    
        Deflate = 7,
    
        T82 = 8,
    
        T43 = 9,
    
        NeXT = 10,
    
        ARW = 11,
    
        RAW = 12,
    
        SRW = 13,
    
        Group3_1D = 14,
    
        PackBits = 15,
    
        ThunderScan = 16,
    
        KDC = 17,
    
        RasterPadding = 18,
    
        LineWork = 19,
    
        HighContinuous = 20,
    
        BinaryLineWork = 21,
    
        PixarFilm = 22,
    
        PixarLog = 23,
    
        DCS = 24,
    
        JBIG = 25,
    
        JPEG2000 = 26,
    
        NEF = 27,
    
        JBIG2 = 28,
    
        DCR = 29,
    
        PEF = 30,
    
    }
    
    /// <summary>Corresponds to tiff.OrientationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Orientation
    {
        None = 0,
    
        TopRowLeftColumn = 1,
    
        TopRowRightColumn = 2,
    
        BottomRowLeftColumn = 3,
    
        BottomRowRightColumn = 4,
    
        LeftRowTopColumn = 5,
    
        RightRowTopColumn = 6,
    
        RightRowBottomColumn = 7,
    
        LeftRowBottomColumn = 8,
    
        Unknown = 9,
    
    }
    
    /// <summary>Corresponds to tiff.PhotometricInterpretationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum PhotometricInterpretation
    {
        WhiteIsZero = 0,
    
        BlackIsZero = 1,
    
        RGB = 2,
    
        Palette = 3,
    
        TransparencyMask = 4,
    
        CMYK = 5,
    
        YCbCr = 6,
    
        CIELab = 7,
    
        ICCLab = 8,
    
        ITULab = 9,
    
        ColorFilterArray = 10,
    
        LogL = 11,
    
        LogLUV = 12,
    
        LinearRaw = 13,
    
    }
    
    /// <summary>Corresponds to tiff.PlanarConfigurationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum PlanarConfiguration
    {
        Chunky = 0,
    
        Planar = 1,
    
        Line = 2,
    
    }
    
    /// <summary>Corresponds to exif.FocalPlaneResolutionUnitChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ResolutionUnit
    {
        None = 0,
    
        Inch = 1,
    
        Centimeter = 2,
    
    }
    
    /// <summary>Corresponds to tiff.YCbCrPositioningChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum YCbCrPositioning
    {
        Centered = 0,
    
        Cosited = 1,
    
    }
    
    /// <summary>Corresponds to tiff.YCbCrSubSamplingChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum YCbCrSubSampling
    {
        YCbCr111 = 0,
    
        YCbCr422 = 1,
    
        YCbCr420 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Xmp 
    {
        [Newtonsoft.Json.JsonProperty("BaseURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseURL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreateDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatorTool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatorTool { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MetadataDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rating? Rating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Thumbnails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<XmpGImg> Thumbnails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<XmpGImg> PageInfo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Xmp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Xmp>(data);
        }
    }
    
    /// <summary>Corresponds to xmp.RatingChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Rating
    {
        Rejected = 0,
    
        Unrated = 1,
    
        One = 2,
    
        Two = 3,
    
        Three = 4,
    
        Four = 5,
    
        Five = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpGImg 
    {
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImgFormat? Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpGImg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpGImg>(data);
        }
    }
    
    /// <summary>Corresponds to xmpGImg.FormatChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ImgFormat
    {
        JPEG = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpBJ 
    {
        [Newtonsoft.Json.JsonProperty("JobRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Job> JobRef { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpBJ FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpBJ>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Job 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Job FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Job>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpDM 
    {
        [Newtonsoft.Json.JsonProperty("AbsPeakAudioFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbsPeakAudioFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Artist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Album", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Album { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AltTapeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltTapeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AltTimecode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeCode AltTimecode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioChannelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioChannelType? AudioChannelType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioCompressor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AudioCompressor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioSampleRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AudioSampleRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioSampleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioSampleType? AudioSampleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeatSpliceParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BeatSpliceStretch BeatSpliceParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CameraAngle? CameraAngle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraLabel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraModel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraMove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CameraMove? CameraMove { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Client", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Client { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Composer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Composer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContributedMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Media> ContributedMedia { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Director", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Director { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DirectorPhotography", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DirectorPhotography { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Engineer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Engineer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileDataRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileDataRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Genre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Good", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Good { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Instrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instrument { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IntroTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time IntroTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioMusicalKey? Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Loop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Loop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfBeats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NumberOfBeats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Markers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Marker> Markers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutCue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time OutCue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProjectRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectLink ProjectRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PullDown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoPullDown? PullDown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelativePeakAudioFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelativePeakAudioFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelativeTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time RelativeTimestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReleaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResampleParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResampleStretch ResampleParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ScaleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioMusicalScaleType? ScaleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Scene", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scene { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShotDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotDay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShotSize? ShotSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpeakerPlacement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpeakerPlacement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartTimecode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeCode StartTimecode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StretchMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AudioStretchMode? StretchMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TakeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TakeNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TapeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TapeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Tempo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeScaleParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeScaleStretch TimeScaleParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeSignature? TimeSignature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrackNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tracks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Track> Tracks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoAlphaMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoAlphaMode? VideoAlphaMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoAlphaPremultipleColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpG VideoAlphaPremultipleColor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoAlphaUnityIsTransparent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VideoAlphaUnityIsTransparent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoColorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoColorSpace? VideoColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoCompressor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VideoCompressor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoFieldOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoFieldOrder? VideoFieldOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoFrameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoFrameRate? VideoFrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoFrameSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension VideoFrameSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoPixelDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VideoPixelDepth? VideoPixelDepth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoPixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VideoPixelAspectRatio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpDM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpDM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TimeCode 
    {
        [Newtonsoft.Json.JsonProperty("TimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeFormat? TimeFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeCode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCode>(data);
        }
    }
    
    /// <summary>Corresponds to Timecode.TimeFormatChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TimeFormat
    {
        Timecode24 = 0,
    
        Timecode25 = 1,
    
        Timecode2997Drop = 2,
    
        Timecode2997NonDrop = 3,
    
        Timecode30 = 4,
    
        Timecode50 = 5,
    
        Timecode5994Drop = 6,
    
        Timecode5994NonDrop = 7,
    
        Timecode60 = 8,
    
        Timecode23976 = 9,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioChannelTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum AudioChannelType
    {
        CHANNEL_MONO = 0,
    
        CHANNEL_STEREO = 1,
    
        CHANNEL_5_1 = 2,
    
        CHANNEL_7_1 = 3,
    
        CHANNEL_16 = 4,
    
        CHANNEL_OTHER = 5,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioSampleTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum AudioSampleType
    {
        SAMPLE_8_INT = 0,
    
        SAMPLE_16_INT = 1,
    
        SAMPLE_24_INT = 2,
    
        SAMPLE_32_INT = 3,
    
        SAMPLE_32_FLOAT = 4,
    
        SAMPLE_COMPRESSED = 5,
    
        SAMPLE_PACKED = 6,
    
        SAMPLE_OTHER = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class BeatSpliceStretch 
    {
        [Newtonsoft.Json.JsonProperty("RiseInDecibel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? RiseInDecibel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RiseInTimeDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time RiseInTimeDuration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseFileBeatsMarker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseFileBeatsMarker { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BeatSpliceStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BeatSpliceStretch>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Time 
    {
        [Newtonsoft.Json.JsonProperty("Scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scale { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Time FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Time>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.CameraAngleChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum CameraAngle
    {
        ANGLE_LOW = 0,
    
        ANGLE_EYE_LEVEL = 1,
    
        ANGLE_HIGH = 2,
    
        ANGLE_OVERHEAD_SHOT = 3,
    
        ANGLE_BIRDS_EYE_SHOT = 4,
    
        ANGLE_DUTCH = 5,
    
        ANGLE_POV = 6,
    
        ANGLE_OVER_THE_SHOULDER = 7,
    
        ANGLE_REACTION_SHOT = 8,
    
    }
    
    /// <summary>Corresponds to xmpDM.CameraMoveChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum CameraMove
    {
        MOVE_AERIAL = 0,
    
        MOVE_BOOM_UP = 1,
    
        MOVE_BOOM_DOWN = 2,
    
        MOVE_CRANE_UP = 3,
    
        MOVE_CRANE_DOWN = 4,
    
        MOVE_DOLLY_IN = 5,
    
        MOVE_DOLLY_OUT = 6,
    
        MOVE_PAN_LEFT = 7,
    
        MOVE_PAN_RIGHT = 8,
    
        MOVE_PEDESTAL_UP = 9,
    
        MOVE_PEDESTAL_DOWN = 10,
    
        MOVE_TILT_UP = 11,
    
        MOVE_TILT_DOWN = 12,
    
        MOVE_TRACKING = 13,
    
        MOVE_TRUCK_LEFT = 14,
    
        MOVE_TRUCK_RIGHT = 15,
    
        MOVE_ZOOM_IN = 16,
    
        MOVE_ZOOM_OUT = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Media 
    {
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Managed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Managed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Track", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Track { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebStatement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Media FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Media>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.AudioMusicalKeyChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum AudioMusicalKey
    {
        KEY_C = 0,
    
        KEY_C_SHARP = 1,
    
        KEY_D = 2,
    
        KEY_D_SHARP = 3,
    
        KEY_E = 4,
    
        KEY_F = 5,
    
        KEY_F_SHARP = 6,
    
        KEY_G = 7,
    
        KEY_G_SHARP = 8,
    
        KEY_A = 9,
    
        KEY_A_SHARP = 10,
    
        KEY_B = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Marker 
    {
        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CuePointParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CuePointParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CuePointType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CuePointType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Probability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Probability { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Speaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Speaker { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarkerType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Marker FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Marker>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Media.Marker.TypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum MarkerType
    {
        Chapter = 0,
    
        Cue = 1,
    
        Index = 2,
    
        Speech = 3,
    
        Track = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ProjectLink 
    {
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectLinkType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectLink>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Media.ProjectLink.TypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ProjectLinkType
    {
        Movie = 0,
    
        Still = 1,
    
        Audio = 2,
    
        Custom = 3,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoPullDownChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum VideoPullDown
    {
        PULLDOWN_WSSWW = 0,
    
        PULLDOWN_SSWWW = 1,
    
        PULLDOWN_SWWWS = 2,
    
        PULLDOWN_WWWSS = 3,
    
        PULLDOWN_WWSSW = 4,
    
        PULLDOWN_WWWSW = 5,
    
        PULLDOWN_WWSWW = 6,
    
        PULLDOWN_WSWWW = 7,
    
        PULLDOWN_SWWWW = 8,
    
        PULLDOWN_WWWWS = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ResampleStretch 
    {
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quality? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResampleStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResampleStretch>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Media.resampleStretch.QualityChoice and Xmp.Media.timeScaleStretch.QualityChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Quality
    {
        High = 0,
    
        Medium = 1,
    
        Low = 2,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioMusicalScaleTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum AudioMusicalScaleType
    {
        SCALE_MAJOR = 0,
    
        SCALE_MINOR = 1,
    
        SCALE_BOTH = 2,
    
        SCALE_NEITHER = 3,
    
    }
    
    /// <summary>Corresponds to xmpDM.ShotSizeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ShotSize
    {
        SHOT_ECU = 0,
    
        SHOT_MCU = 1,
    
        SHOT_CU = 2,
    
        SHOT_MS = 3,
    
        SHOT_WS = 4,
    
        SHOT_MWS = 5,
    
        SHOT_EWS = 6,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioStretchModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum AudioStretchMode
    {
        STRETCH_FIXED_LENGTH = 0,
    
        STRETCH_TIME_SCALE = 1,
    
        STRETCH_RESAMPLE = 2,
    
        STRETCH_BEAT_SPLICE = 3,
    
        STRETCH_HYBRID = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TimeScaleStretch 
    {
        [Newtonsoft.Json.JsonProperty("FrameOverlappingPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FrameOverlappingPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FrameSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FrameSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Quality? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeScaleStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeScaleStretch>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.TimeSignatureChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TimeSignature
    {
        TIME_2_4 = 0,
    
        TIME_3_4 = 1,
    
        TIME_4_4 = 2,
    
        TIME_5_4 = 3,
    
        TIME_7_4 = 4,
    
        TIME_6_8 = 5,
    
        TIME_9_8 = 6,
    
        TIME_12_8 = 7,
    
        TIME_OTHER = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Track 
    {
        [Newtonsoft.Json.JsonProperty("FrameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Markers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Marker> Markers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrackName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrackType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarkerType? TrackType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Track FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Track>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.VideoAlphaModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum VideoAlphaMode
    {
        ALPHA_MODE_STRAIGHT = 0,
    
        ALPHA_MODE_PREMULTIPLIED = 1,
    
        ALPHA_MODE_NONE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpG 
    {
        [Newtonsoft.Json.JsonProperty("A", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? A { get; set; }
    
        [Newtonsoft.Json.JsonProperty("B", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? B { get; set; }
    
        [Newtonsoft.Json.JsonProperty("L", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? L { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Black", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Black { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Cyan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Cyan { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Magenta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Magenta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Yellow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Yellow { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Blue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Blue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Green", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Green { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Red", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Red { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorantMode? Mode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SwatchName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwatchName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorantType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpG FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpG>(data);
        }
    }
    
    /// <summary>Corresponds to xmpG.ModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ColorantMode
    {
        CMYK = 0,
    
        RGB = 1,
    
        LAB = 2,
    
    }
    
    /// <summary>Corresponds to xmpG.TypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ColorantType
    {
        Process = 0,
    
        Spot = 1,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoColorSpaceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum VideoColorSpace
    {
        COLOR_SPACE_SRGB = 0,
    
        COLOR_SPACE_CCIR_601 = 1,
    
        COLOR_SPACE_CCIR_709 = 2,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoFieldOrderChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum VideoFieldOrder
    {
        FIELD_ORDER_UPPER = 0,
    
        FIELD_ORDER_LOWER = 1,
    
        FIELD_ORDER_PROGRESSIVE = 2,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoFrameRateChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum VideoFrameRate
    {
        FRAME_RATE_24 = 0,
    
        FRAME_RATE_NTSC = 1,
    
        FRAME_RATE_PAL = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Dimension 
    {
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Unit? Unit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Dimension FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dimension>(data);
        }
    }
    
    /// <summary>Corresponds to stDim.UnitChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Unit
    {
        Inch = 0,
    
        Millimeter = 1,
    
        Centimeter = 2,
    
        Pixel = 3,
    
        Pica = 4,
    
        Point = 5,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoPixelDepthChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum VideoPixelDepth
    {
        PIXEL_DEPTH_8_INT = 0,
    
        PIXEL_DEPTH_16_INT = 1,
    
        PIXEL_DEPTH_24_INT = 2,
    
        PIXEL_DEPTH_32_INT = 3,
    
        PIXEL_DEPTH_32_FLOAT = 4,
    
        PIXEL_DEPTH_OTHER = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Xmpidq 
    {
        [Newtonsoft.Json.JsonProperty("Scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Xmpidq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Xmpidq>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpMM 
    {
        [Newtonsoft.Json.JsonProperty("DerivedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference DerivedFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("History", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Event> History { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ingredients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Reference> Ingredients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManagedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference ManagedFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageUI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageUI { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManagerVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManagerVariant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalDocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionClass { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VersionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Versions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<VersionInfo> Versions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpMM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Reference 
    {
        [Newtonsoft.Json.JsonProperty("AlternatePaths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AlternatePaths { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FromPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromPart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastModifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManagerVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManagerVariant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageUI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageUI { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaskMarkers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaskMarkers? MaskMarkers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalDocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PartMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartMapping { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionClass { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ToPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToPart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VersionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Reference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Reference>(data);
        }
    }
    
    /// <summary>Corresponds to stRef.MaskMarkersChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum MaskMarkers
    {
        All = 0,
    
        None = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Event 
    {
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventAction? Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Changed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Changed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SoftwareAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SoftwareAgent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("When", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? When { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Event FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(data);
        }
    }
    
    /// <summary>Corresponds to stEvt.ActionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum EventAction
    {
        Converted = 0,
    
        Copied = 1,
    
        Created = 2,
    
        Cropped = 3,
    
        Edited = 4,
    
        Filtered = 5,
    
        Formatted = 6,
    
        VersionUpdated = 7,
    
        Printed = 8,
    
        Published = 9,
    
        Managed = 10,
    
        Produced = 11,
    
        Resized = 12,
    
        Saved = 13,
    
        Derived = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VersionInfo 
    {
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Event Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VersionInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpNote 
    {
        [Newtonsoft.Json.JsonProperty("HasExtendedXMP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HasExtendedXMP { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpNote FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpNote>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpRights 
    {
        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Marked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Marked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UsageTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> UsageTerms { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebStatement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpRights FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpRights>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class XmpTPg 
    {
        [Newtonsoft.Json.JsonProperty("Colorants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<XmpG> Colorants { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Fonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Font> Fonts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxPageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension MaxPageSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NPages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PlateNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> PlateNames { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpTPg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpTPg>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Font 
    {
        [Newtonsoft.Json.JsonProperty("ChildFontFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ChildFontFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Composite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Composite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontFace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFamily { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FontType? FontType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VersionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionString { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Font FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Font>(data);
        }
    }
    
    /// <summary>Corresponds to stFnt.FontTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum FontType
    {
        TrueType = 0,
    
        Type1 = 1,
    
        OpenType = 2,
    
        OpenTypeCFF = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExifMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Exif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Exif Exif { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExifAux", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExifAux ExifAux { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExifMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExifMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Exif 
    {
        [Newtonsoft.Json.JsonProperty("ApertureValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApertureValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrightnessValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrightnessValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CFAPattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CFAPattern CFAPattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColorSpace? ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ComponentsConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ComponentsConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompressedBitsPerPixel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompressedBitsPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Contrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contrast? Contrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomRendered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomRendered? CustomRendered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateTimeOriginal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTimeOriginal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateTimeDigitized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTimeDigitized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeviceSettingDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceSettings DeviceSettingDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalZoomRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalZoomRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExifVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExifVersion? ExifVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureBiasValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureBiasValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExposureMode? ExposureMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExposureProgram? ExposureProgram { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileSource? FileSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Flash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Flash Flash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FlashEnergy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlashEnergy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FlashpixVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlashpixVersion? FlashpixVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalLengthIn35mmFilm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FocalLengthIn35mmFilm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalPlaneResolutionUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FocalPlaneResolutionUnit? FocalPlaneResolutionUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalPlaneXResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPlaneXResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalPlaneYResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPlaneYResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GainControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GainControl? GainControl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSAltitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSAltitudeRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSAltitudeRef? GPSAltitudeRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSAreaInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSAreaInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestBearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestBearing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestBearingRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSDestBearingRef? GPSDestBearingRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestDistanceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSDestDistanceRef? GPSDestDistanceRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestLatitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestLongitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDifferential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSDifferential? GPSDifferential { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDOP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDOP { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSImgDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSImgDirection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSImgDirectionRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSImgDirectionRef? GPSImgDirectionRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSCoordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSCoordinate GPSCoordinate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSLatitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSLongitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSMapDatum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSMapDatum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSMeasureMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSMeasureMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSProcessingMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSProcessingMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSSatellites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSSatellites { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSSpeedRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSSpeedRef? GPSSpeedRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSStatus? GPSStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? GPSTimeStamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSTrack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSTrack { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSTrackRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSTrackRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSVersionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSVersionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageUniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUniqueID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ISOSpeedRatings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> ISOSpeedRatings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LightSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LightSource? LightSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxApertureValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxApertureValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeteringMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MeteringMode? MeteringMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OECF", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OECF OECF { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelXDimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PixelXDimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelYDimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PixelYDimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelatedSoundFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedSoundFile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Saturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Saturation? Saturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SceneCaptureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SceneCaptureType? SceneCaptureType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SceneType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SceneType? SceneType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SensingMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SensingMethod? SensingMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sharpness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sharpness? Sharpness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShutterSpeedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShutterSpeedValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpatialFrequencyResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SFR SpatialFrequencyResponse { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpectralSensitivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpectralSensitivity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> SubjectArea { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubjectDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectDistanceRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubjectDistanceRange? SubjectDistanceRange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> SubjectLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> UserComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WhiteBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WhiteBalanceExif? WhiteBalance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NativeDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Exif FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Exif>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CFAPattern 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<int> Values { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CFAPattern FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CFAPattern>(data);
        }
    }
    
    /// <summary>Corresponds to exif.ColorSpaceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ColorSpace
    {
        None = 0,
    
        SRGB = 1,
    
        AdobeRGB = 2,
    
        Uncalibrated = 3,
    
    }
    
    /// <summary>Corresponds to exif.ContrastChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Contrast
    {
        Normal = 0,
    
        Soft = 1,
    
        Hard = 2,
    
        Unknown = 3,
    
    }
    
    /// <summary>Corresponds to exif.CustomRenderedChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum CustomRendered
    {
        NormalProcess = 0,
    
        CustomProcess = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DeviceSettings 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Settings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeviceSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeviceSettings>(data);
        }
    }
    
    /// <summary>Corresponds to exif.ExifVersionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ExifVersion
    {
        V210 = 0,
    
        V220 = 1,
    
        V221 = 2,
    
        V222 = 3,
    
        V230 = 4,
    
    }
    
    /// <summary>Corresponds to exif.ExposureModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ExposureMode
    {
        Auto = 0,
    
        Manual = 1,
    
        AutoBracket = 2,
    
    }
    
    /// <summary>Corresponds to exif.ExposureProgramChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ExposureProgram
    {
        Undefined = 0,
    
        Manual = 1,
    
        NormalProgram = 2,
    
        AperturePriority = 3,
    
        ShutterPriority = 4,
    
        CreativeProgram = 5,
    
        ActionProgram = 6,
    
        PortraitMode = 7,
    
        LandscapeMode = 8,
    
        Unknown = 9,
    
    }
    
    /// <summary>Corresponds to exif.FileSourceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum FileSource
    {
        Other = 0,
    
        TransparentScanner = 1,
    
        ReflexScanner = 2,
    
        DSC = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Flash 
    {
        [Newtonsoft.Json.JsonProperty("Fired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Return", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlashReturn? Return { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlashMode? Mode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Function { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedEyeMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RedEyeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Flash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Flash>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Structure.Flash.ReturnChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum FlashReturn
    {
        NoStrobeReturnDetection = 0,
    
        StrobeReturnLightNotDetected = 1,
    
        StrobeReturnLightDetected = 2,
    
    }
    
    /// <summary>Corresponds to Xmp.Structure.Flash.ModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum FlashMode
    {
        Unknown = 0,
    
        CompulsoryFlashFiring = 1,
    
        CompulsoryFlashSuppression = 2,
    
        AutoMode = 3,
    
    }
    
    /// <summary>Corresponds to exif.FlashpixVersionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum FlashpixVersion
    {
        V100 = 0,
    
        V101 = 1,
    
        V110 = 2,
    
    }
    
    /// <summary>Corresponds to exif.FocalPlaneResolutionUnitChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum FocalPlaneResolutionUnit
    {
        None = 0,
    
        Inch = 1,
    
        Meter = 2,
    
        Centimeter = 3,
    
        Millimeter = 4,
    
        Micrometer = 5,
    
    }
    
    /// <summary>Corresponds to exif.GainControlChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GainControl
    {
        None = 0,
    
        LowGainUp = 1,
    
        HighGainUp = 2,
    
        LowGainDown = 3,
    
        HighGainDown = 4,
    
    }
    
    /// <summary>Corresponds to exif.GPSAltitudeRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GPSAltitudeRef
    {
        AboveSeaLevel = 0,
    
        BelowSeaLevel = 1,
    
    }
    
    /// <summary>Corresponds to exif.GPSDestBearingRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GPSDestBearingRef
    {
        TrueDirection = 0,
    
        MagneticDirection = 1,
    
    }
    
    /// <summary>Corresponds to exif.GPSDestDistanceRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GPSDestDistanceRef
    {
        Kilometers = 0,
    
        Miles = 1,
    
        Knots = 2,
    
    }
    
    /// <summary>Corresponds to exif.GPSDifferentialChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GPSDifferential
    {
        WithoutCorrection = 0,
    
        WithCorrection = 1,
    
    }
    
    /// <summary>Corresponds to exif.GPSImgDirectionRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GPSImgDirectionRef
    {
        TrueDirection = 0,
    
        MagneticDirection = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GPSCoordinate 
    {
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Lon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Lat { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GPSCoordinate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GPSCoordinate>(data);
        }
    }
    
    /// <summary>Corresponds to exif.GPSSpeedRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GPSSpeedRef
    {
        KilometersPerHour = 0,
    
        MilesPerHour = 1,
    
        Knots = 2,
    
    }
    
    /// <summary>Corresponds to exif.GPSStatusChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum GPSStatus
    {
        MeasurementInProgress = 0,
    
        MeasurementIsInteroperability = 1,
    
    }
    
    /// <summary>Corresponds to exif.LightSourceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum LightSource
    {
        Unidentified = 0,
    
        Daylight = 1,
    
        Fluorescent = 2,
    
        Tungsten = 3,
    
        Flash = 4,
    
        FineWeather = 5,
    
        CloudyWeather = 6,
    
        Shade = 7,
    
        DaylightFluorescent = 8,
    
        DayWhiteFluorescent = 9,
    
        CoolWhiteFluorescent = 10,
    
        WhiteFluorescent = 11,
    
        StandardIlluminantA = 12,
    
        StandardIlluminantB = 13,
    
        StandardIlluminantC = 14,
    
        D55Illuminant = 15,
    
        D65Illuminant = 16,
    
        D75Illuminant = 17,
    
        D50Illuminant = 18,
    
        ISOStudioTungsten = 19,
    
        Other = 20,
    
    }
    
    /// <summary>Corresponds to exif.MeteringModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum MeteringMode
    {
        Unidentified = 0,
    
        Average = 1,
    
        CenterWeightedAverage = 2,
    
        Spot = 3,
    
        MultiSpot = 4,
    
        Pattern = 5,
    
        Partial = 6,
    
        Reserved = 7,
    
        Other = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OECF 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OECF FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OECF>(data);
        }
    }
    
    /// <summary>Corresponds to exif.SaturationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Saturation
    {
        Normal = 0,
    
        Low = 1,
    
        High = 2,
    
        Unknown = 3,
    
    }
    
    /// <summary>Corresponds to exif.SceneCaptureTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SceneCaptureType
    {
        Standard = 0,
    
        Landscape = 1,
    
        Portrait = 2,
    
        NightScene = 3,
    
    }
    
    /// <summary>Corresponds to exif.SceneTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SceneType
    {
        DirectlyPhotographedImage = 0,
    
    }
    
    /// <summary>Corresponds to exif.SensingMethodChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SensingMethod
    {
        Undefined = 0,
    
        MonochromeArea = 1,
    
        OneChipColourAreaSensor = 2,
    
        TwoChipColourAreaSensor = 3,
    
        ThreeChipColourAreaSensor = 4,
    
        ColourSequentialAreaSensor = 5,
    
        MonochromeLinearArea = 6,
    
        TrilinearSensor = 7,
    
        ColourSequentialLinearSensor = 8,
    
    }
    
    /// <summary>Corresponds to exif.SharpnessChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Sharpness
    {
        Normal = 0,
    
        Soft = 1,
    
        Hard = 2,
    
        Unknown = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SFR 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SFR FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SFR>(data);
        }
    }
    
    /// <summary>Corresponds to exif.SubjectDistanceRangeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SubjectDistanceRange
    {
        Unknown = 0,
    
        Macro = 1,
    
        CloseView = 2,
    
        DistantView = 3,
    
    }
    
    /// <summary>Corresponds to exif.WhiteBalanceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum WhiteBalanceExif
    {
        Auto = 0,
    
        Manual = 1,
    
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExifAux 
    {
        [Newtonsoft.Json.JsonProperty("Lens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lens { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExifAux FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExifAux>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AudioMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("AudioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AudioStream 
    {
        [Newtonsoft.Json.JsonProperty("BitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitRateMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRateMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChannelPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelPositions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SamplingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplingRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StreamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStream>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CharacterCount", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CharacterCountWithSpaces", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCountWithSpaces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LineCount", Required = Newtonsoft.Json.Required.Always)]
        public int LineCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SlideCount", Required = Newtonsoft.Json.Required.Always)]
        public int SlideCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ParagraphCount", Required = Newtonsoft.Json.Required.Always)]
        public int ParagraphCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RevisionNumber", Required = Newtonsoft.Json.Required.Always)]
        public int RevisionNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Titles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Titles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageTitles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ImageTitles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EpsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmbeddedFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FileMetadata> EmbeddedFiles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class EpsMetadata 
    {
        [Newtonsoft.Json.JsonProperty("IsRasterized", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRasterized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInPoints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInPoints { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EpsMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpsMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ImageMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthInInch", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightInInch", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthInCm", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightInCm", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitsPerPixel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitsPerChannel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerChannel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PixelFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasAlpha", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAlpha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsIndexed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsIndexed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsExtended", Required = Newtonsoft.Json.Required.Always)]
        public bool IsExtended { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double HorizontalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double VerticalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalFrames", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.Always)]
        public int TotalUnspecifiedTiffExtraChannels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasExifData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasExifData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasIptcData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasIptcData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasAdobeResourceData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAdobeResourceData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasXmpData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasXmpData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UncompressedSizeInBytes", Required = Newtonsoft.Json.Required.Always)]
        public long UncompressedSizeInBytes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OverallBitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallBitrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<VideoStream> VideoStreams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class VideoStream 
    {
        [Newtonsoft.Json.JsonProperty("BitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FrameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FrameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PixelAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StreamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rotation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStream>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractArchiveEntriesResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ArchiveEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ArchiveEntry> ArchiveEntries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasError", Required = Newtonsoft.Json.Required.Always)]
        public bool HasError { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractArchiveEntriesResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractArchiveEntriesResultMessage>(data);
        }
    }
    
    /// <summary>An instances of the ArchiveEntry class is instantiated on DataExtracton for each file found in an archive, e.g. zip.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ArchiveEntry 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSize", Required = Newtonsoft.Json.Required.Always)]
        public long FileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Md5Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Md5Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ArchiveEntry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchiveEntry>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractArchiveEntriesMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractArchiveEntriesMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractArchiveEntriesMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractOcrDataMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractOcrDataMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractOcrDataMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractOcrDataResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("InputFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ocr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OcrInfo Ocr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractOcrDataResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractOcrDataResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OcrInfo 
    {
        [Newtonsoft.Json.JsonProperty("Tokens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Tokens { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OcrInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OcrInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractGeolocationResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GeolocationAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeolocationAddress GeolocationAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractGeolocationResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractGeolocationResultMessage>(data);
        }
    }
    
    /// <summary>The GeolocationAddress is the return value of the GeoInfoExtractor data extraction process.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GeolocationAddress 
    {
        [Newtonsoft.Json.JsonProperty("StreetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Route", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Route { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Intersection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Intersection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdministrativeAreaLevel1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdministrativeAreaLevel1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdministrativeAreaLevel2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdministrativeAreaLevel2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdministrativeAreaLevel3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdministrativeAreaLevel3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdministrativeAreaLevel4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdministrativeAreaLevel4 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdministrativeAreaLevel5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdministrativeAreaLevel5 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColloquialArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColloquialArea { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ward", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ward { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sublocality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sublocality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Neighborhood", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Premise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Premise { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Subpremise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subpremise { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NaturalFeature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NaturalFeature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Airport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Airport { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Park", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Park { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Floor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Floor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Establishment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Establishment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PointOfInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PointOfInterest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parking { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PostBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostBox { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PostalTown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalTown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Room { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StreetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusStation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusStation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrainStation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrainStation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransitStation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitStation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FormatedAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormatedAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Continent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Continent { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeolocationAddress FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeolocationAddress>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractGeolocationMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractGeolocationMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractGeolocationMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractUrlDataMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UrlId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenderingJobItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RenderingJobItem RenderingJobItem { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractUrlDataMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractUrlDataMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExtractUrlDataResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WebContent WebContent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BulkRenderingResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkRenderingResponse BulkRenderingResponse { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtractUrlDataResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractUrlDataResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class WebContent 
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentsBase64", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentsBase64 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextBase64", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextBase64 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WebContentLink> Links { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WebContentImage> Images { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Videos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WebContentVideo> Videos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<WebContentTable> Tables { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebContent>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class WebContentLink 
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebContentLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebContentLink>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class WebContentImage 
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebContentImage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebContentImage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class WebContentVideo 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Urls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Urls { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebContentVideo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebContentVideo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class WebContentTable 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> Values { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WebContentTable FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebContentTable>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferCancellationRequestMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerDatabaseIndex", Required = Newtonsoft.Json.Required.Always)]
        public int CustomerDatabaseIndex { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferCancellationRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferCancellationRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferCancellationResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferCancellationResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferCancellationResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class StartBusinessProcessMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartProcessRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartProcessRequest StartProcessRequest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StartBusinessProcessMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartBusinessProcessMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class StartProcessRequest 
    {
        [Newtonsoft.Json.JsonProperty("Variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Variables { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StartProcessRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartProcessRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SendBusinessProcessMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SendRequestRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SendMessageRequest SendRequestRequest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SendBusinessProcessMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendBusinessProcessMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ServiceProviderMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MessageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Variables { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ContentMetadataChangeEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        public DocumentChangeAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public DocumentActionState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentMetadataChangeEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentMetadataChangeEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ContentsPermissionsChangeEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        public DocumentChangeAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public DocumentActionState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsPermissionsChangeEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsPermissionsChangeEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateTransferFilesDriveMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TransferFile> Files { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateTransferFilesDriveMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTransferFilesDriveMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileTransferCleanupRequestMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileTransferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> FileTransferIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferCleanupRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferCleanupRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CleanupContentsMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ContentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CleanupContentsMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CleanupContentsMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ReactivationContentsMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ContentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReactivationContentsMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReactivationContentsMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DeactivationContentsMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("ContentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeactivationContentsMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeactivationContentsMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateContentsMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CreateContentRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateContentsMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateContentsMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateContentRequest 
    {
        /// <summary>The id of the schema with schema type content.</summary>
        [Newtonsoft.Json.JsonProperty("ContentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("LayerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LayerSchemaIds { get; set; }
    
        /// <summary>The dynamic data structure matching the field schematics of the content schema (ContentSchemaId).</summary>
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Content { get; set; }
    
        /// <summary>The dynamic data structure matching the field schematics of the schemas with type layer (LayerSchemaIds).</summary>
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("ContentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateContentRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateContentRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DownloadWebLinkMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetQueue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetQueue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadWebLinkMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadWebLinkMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DownloadWebLinkResultMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContainerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContainerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadWebLinkResultMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadWebLinkResultMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileTransferEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public FileTransferState State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum FileTransferState
    {
        Draft = 0,
    
        UploadInProgress = 1,
    
        UploadCompleted = 2,
    
        DataExtractionInProgress = 3,
    
        DataExtractionDone = 4,
    
        ImportInProgress = 5,
    
        ImportCompleted = 6,
    
        UploadCancelled = 7,
    
        ImportCancelled = 8,
    
        UploadFailed = 9,
    
        ImportFailed = 10,
    
        DeleteInProgress = 11,
    
        Deleted = 12,
    
        CleanupInProgress = 13,
    
        CleanupCompleted = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public TransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferType", Required = Newtonsoft.Json.Required.Always)]
        public TransferType TransferType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum TransferState
    {
        Draft = 0,
    
        UploadInProgress = 1,
    
        UploadCompleted = 2,
    
        ImportInProgress = 3,
    
        ImportCompleted = 4,
    
        UploadCancelled = 5,
    
        ImportCancelled = 6,
    
        ImportFailed = 7,
    
        Created = 8,
    
        UploadFailed = 9,
    
        Deleted = 10,
    
        TransferReady = 11,
    
        FileDeleteInProgress = 12,
    
        TransferCleanup = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateContentFileMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentFileUpdateRequest Request { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateContentFileMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateContentFileMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ContentFileUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("ContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentFileUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateContentsPermissionsMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Requests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UpdateContentPermissionsRequest> Requests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateContentsPermissionsMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateContentsPermissionsMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateContentPermissionsRequest 
    {
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("ContentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("ContentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateContentPermissionsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateContentPermissionsRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateMetadataMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataValuesChangeRequestBase Request { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateMetadataMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateMetadataMessage>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesChangeRequestBase 
    {
        /// <summary>A container for all change commads.</summary>
        [Newtonsoft.Json.JsonProperty("ChangeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MetadataValuesChangeCommandBase> ChangeCommands { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeRequestBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeRequestBase>(data);
        }
    }
    
    /// <summary>The base class for metadata value change commands.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesChangeCommandBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeCommandBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeCommandBase>(data);
        }
    }
    
    /// <summary>Updates schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesSchemaUpdateCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The id of the schema with type content or layer to be updated.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpdateCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpdateCommand>(data);
        }
    }
    
    /// <summary>Adds or updates schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesSchemaUpsertCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The id of the schema with type content or layer to be updated.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpsertCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpsertCommand>(data);
        }
    }
    
    /// <summary>Removes schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesSchemaRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The id of the schema with type layer to be removed.</summary>
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaRemoveCommand>(data);
        }
    }
    
    /// <summary>Removes a field and its value from the schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesFieldRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The fully qualified field name of the field to be removed, e.g. "Data.SchemaId.FieldId".</summary>
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesFieldRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesFieldRemoveCommand>(data);
        }
    }
    
    /// <summary>Adds a list item id reference to a multi tagbox.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesSchemaItemAddCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The fully qualified field name of the multi tagbox field.</summary>
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>The id of the list item to be added.</summary>
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemAddCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemAddCommand>(data);
        }
    }
    
    /// <summary>Removes a list item id reference from a multi tagbox.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class MetadataValuesSchemaItemRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The fully qualified field name of the multi tagbox field.</summary>
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>The id of the list item to be removed.</summary>
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemRemoveCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ContentsMetadataUpdateRequest : MetadataValuesChangeRequestBase
    {
        /// <summary>The ids of the content documents.</summary>
        [Newtonsoft.Json.JsonProperty("ContentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsMetadataUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsMetadataUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FilterContentsMetadataUpdateRequest : MetadataValuesChangeRequestBase
    {
        [Newtonsoft.Json.JsonProperty("ContentSearchRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentSearchRequest ContentSearchRequest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItemsCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterContentsMetadataUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterContentsMetadataUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ContentSearchRequest 
    {
        /// <summary>Limits the simple search fields to the fields available in the specified channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ChannelIds { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to x-default.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Limits the display values included in the search response. Defaults to all display values.</summary>
        [Newtonsoft.Json.JsonProperty("DisplayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> DisplayPatternIds { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("SearchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SearchLanguages { get; set; }
    
        /// <summary>The collection id.</summary>
        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Limits the content document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("LifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum LifeCycleFilter
    {
        ActiveOnly = 0,
    
        All = 1,
    
        InactiveOnly = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateContentPartialMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileTransferPartial2ContentCreateRequest Request { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyFiles", Required = Newtonsoft.Json.Required.Always)]
        public bool CopyFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenderOutputs", Required = Newtonsoft.Json.Required.Always)]
        public bool RenderOutputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidateSchemas", Required = Newtonsoft.Json.Required.Always)]
        public bool ValidateSchemas { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateContentPartialMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateContentPartialMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileTransferPartial2ContentCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FileTransferCreateItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferPartial2ContentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferPartial2ContentCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileTransferCreateItem 
    {
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("LayerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("ContentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferCreateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferCreateItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CreateContentMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Request", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileTransfer2ContentCreateRequest Request { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyFiles", Required = Newtonsoft.Json.Required.Always)]
        public bool CopyFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenderOutputs", Required = Newtonsoft.Json.Required.Always)]
        public bool RenderOutputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidateSchemas", Required = Newtonsoft.Json.Required.Always)]
        public bool ValidateSchemas { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateContentMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateContentMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileTransfer2ContentCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("LayerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("ContentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransfer2ContentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransfer2ContentCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ContentsOwnershipTransferEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        public DocumentChangeAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public DocumentActionState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsOwnershipTransferEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsOwnershipTransferEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SchemasOwnershipTransferEventMessage : ApplicationEventMessage
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Always)]
        public DocumentChangeAction Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public DocumentActionState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemasOwnershipTransferEventMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemasOwnershipTransferEventMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ApplicationEventsMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ApplicationEventMessage> Messages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationEventsMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationEventsMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CustomerCacheInvalidationMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheInvalidationType", Required = Newtonsoft.Json.Required.Always)]
        public CacheInvalidationType CacheInvalidationType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CacheScope", Required = Newtonsoft.Json.Required.Always)]
        public CacheScope CacheScope { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerCacheInvalidationMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerCacheInvalidationMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AvailableCustomerUpdatesRequestMessage : ServiceCustomerMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AvailableCustomerUpdatesRequestMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableCustomerUpdatesRequestMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class AvailableCustomerUpdatesResponseMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("Updates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UpdateInfoViewItem> Updates { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AvailableCustomerUpdatesResponseMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableCustomerUpdatesResponseMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class UpdateCustomerMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("TargetVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateCustomerMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateCustomerMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ReactivationCustomerMessage : ServiceCustomerMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ReactivationCustomerMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReactivationCustomerMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DeactivationCustomerMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("DeactivationMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary DeactivationMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeactivationCustomerMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeactivationCustomerMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class CancelPendingBusinessProcessesMessage : ServiceCustomerMessage
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancelPendingBusinessProcessesMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelPendingBusinessProcessesMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SearchIndexReindexMessage : ServiceCustomerMessage
    {
        [Newtonsoft.Json.JsonProperty("SearchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SourceIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceIndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetIndexId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchIndexReindexMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchIndexReindexMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ICacheInvalidationMessage 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ICacheInvalidationMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ICacheInvalidationMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DriveDoc 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LatestChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatestChange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveType", Required = Newtonsoft.Json.Required.Always)]
        public DriveType DriveType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveStatus", Required = Newtonsoft.Json.Required.Always)]
        public DriveStatus DriveStatus { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum DriveStatus
    {
        Offline = 0,
    
        Ready = 1,
    
        Synchronizing = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ExportRequest 
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExportRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExportRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GetFoldersRequest 
    {
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessToken AccessToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetFoldersRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetFoldersRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GoogleDriveFileDoc 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ThumbnailLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalSource { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GoogleDriveFileDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GoogleDriveFileDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IDriveFileDoc 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IDriveFileDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IDriveFileDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OneDriveFileDoc 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ThumbnailLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailLink { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalSource { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OneDriveFileDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OneDriveFileDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessToken AccessToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DropboxLimits 
    {
        [Newtonsoft.Json.JsonProperty("Limits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Limit> Limits { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DropboxLimits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DropboxLimits>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Limit 
    {
        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Always)]
        public Period Period { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PerDrive", Required = Newtonsoft.Json.Required.Always)]
        public bool PerDrive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfRequests", Required = Newtonsoft.Json.Required.Always)]
        public long NumberOfRequests { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SuggestedDelayInMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public int SuggestedDelayInMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Limit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Limit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum Period
    {
        Second = 0,
    
        Minute = 1,
    
        Hour = 2,
    
        Day = 3,
    
        Week = 4,
    
        Month = 5,
    
        Year = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class GoogleDriveLimits 
    {
        [Newtonsoft.Json.JsonProperty("Limits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Limit> Limits { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GoogleDriveLimits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GoogleDriveLimits>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class NoLimits 
    {
        [Newtonsoft.Json.JsonProperty("Limits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Limit> Limits { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NoLimits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NoLimits>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class OneDriveLimits 
    {
        [Newtonsoft.Json.JsonProperty("Limits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Limit> Limits { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OneDriveLimits FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OneDriveLimits>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class PeriodDoc 
    {
        [Newtonsoft.Json.JsonProperty("PeriodId", Required = Newtonsoft.Json.Required.Always)]
        public long PeriodId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Period", Required = Newtonsoft.Json.Required.Always)]
        public Period Period { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfRequests", Required = Newtonsoft.Json.Required.Always)]
        public long NumberOfRequests { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PeriodDoc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PeriodDoc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class WatchRequest 
    {
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static WatchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WatchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ColorProfileItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorSpace", Required = Newtonsoft.Json.Required.Always)]
        public ColorSpace2 ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProfileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProfileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ColorProfileItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ColorProfileItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum ColorSpace2
    {
        Unknown = 0,
    
        Rgb = 16777216,
    
        Grayscale = 301989888,
    
        Cmyk = 335544320,
    
        Lab = 553648128,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ColorProfileCollection 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ColorProfileCollection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ColorProfileCollection>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IServiceProviderMessage 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IServiceProviderMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IServiceProviderMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SystemMessageType
    {
        Shutdown = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SystemMessage 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MessageType", Required = Newtonsoft.Json.Required.Always)]
        public SystemMessageType MessageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SystemMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Queues 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Queues FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Queues>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class ApplicationEvent 
    {
        [Newtonsoft.Json.JsonProperty("SilentMode", Required = Newtonsoft.Json.Required.Always)]
        public bool SilentMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EventType", Required = Newtonsoft.Json.Required.Always)]
        public ApplicationEventType EventType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ApplicationEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationEvent>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class TransferEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public TransferState State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferEvent>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class FileTransferEvent : ApplicationEvent
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        public FileTransferState State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferEvent>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class SearchRequest2 
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime TimeStamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchRequest2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRequest2>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class LiveStreamMessage 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentChange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentChange DocumentChange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationEvent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationEvent ApplicationEvent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchRequest2 SearchRequest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Retries", Required = Newtonsoft.Json.Required.Always)]
        public int Retries { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LiveStreamMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class DocumentChange 
    {
        [Newtonsoft.Json.JsonProperty("DocumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime TimeStamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentChange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentChange>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IServiceMessage 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IServiceMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IServiceMessage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class IServiceCustomerMessage 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IServiceCustomerMessage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IServiceCustomerMessage>(data);
        }
    }
}