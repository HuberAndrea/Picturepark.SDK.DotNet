//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v9.6.6264.40734 (NJsonSchema v8.6.6263.34621) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Picturepark.SDK.V1.Contract
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IAssetsClient
    {
        /// <summary>Aggregate fields</summary>
        /// <param name="assetAggregationRequest">Aggregation request. Required.</param>
        /// <returns>Aggregation results.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ObjectAggregationResult Aggregate(AssetAggregationRequest assetAggregationRequest);
    
        /// <summary>Aggregate fields</summary>
        /// <param name="assetAggregationRequest">Aggregation request. Required.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Aggregation results.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(AssetAggregationRequest assetAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ObjectAggregationResult AggregateByChannel(string channelId, AssetAggregationRequest assetAggregationRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateByChannelAsync(string channelId, AssetAggregationRequest assetAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetBatchDownloadItem CreateBatchAssetDownload(AssetBatchDownloadRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetBatchDownloadItem> CreateBatchAssetDownloadAsync(AssetBatchDownloadRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetDetailViewItem CreateVirtualAssets(CreateVirtualAssetRequest createVirtualAssetRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetDetailViewItem> CreateVirtualAssetsAsync(CreateVirtualAssetRequest createVirtualAssetRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        FileResponse Download(string assetId, string outputFormatId, string range = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string assetId, string outputFormatId, string range = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Provides a lightweight endpoint to get asset thumbnails</summary>
        /// <param name="assetId">Asset id</param>
        /// <param name="size">Thumbnail size. Either small, medium or large</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        FileResponse DownloadThumbnail(string assetId, ThumbnailSize size);
    
        /// <summary>Provides a lightweight endpoint to get asset thumbnails</summary>
        /// <param name="assetId">Asset id</param>
        /// <param name="size">Thumbnail size. Either small, medium or large</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadThumbnailAsync(string assetId, ThumbnailSize size, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        FileResponse DownloadResized(string assetId, string outputFormatId, int width, int height);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadResizedAsync(string assetId, string outputFormatId, int width, int height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetDetailViewItem Get(string assetId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetDetailViewItem> GetAsync(string assetId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetDetailViewItem UpdateMetadata(string assetId, UpdateAssetMetadataRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetDetailViewItem> UpdateMetadataAsync(string assetId, UpdateAssetMetadataRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetDetailViewItem UpdatePermissions(string assetId, UpdateAssetPermissionsRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetDetailViewItem> UpdatePermissionsAsync(string assetId, UpdateAssetPermissionsRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetSearchResult Search(AssetSearchRequest assetSearchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetSearchResult> SearchAsync(AssetSearchRequest assetSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetSearchResult SearchByChannel(string channelId, AssetSearchRequest assetSearchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetSearchResult> SearchByChannelAsync(string channelId, AssetSearchRequest assetSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void Deactivate(string assetId, int timeout);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeactivateAsync(string assetId, int timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetDetailViewItem Reactivate(string assetId, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetDetailViewItem> ReactivateAsync(string assetId, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem DeactivateMany(AssetDeactivationRequest deactivationRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> DeactivateManyAsync(AssetDeactivationRequest deactivationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem ReactivateMany(AssetReactivationRequest reactivationRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> ReactivateManyAsync(AssetReactivationRequest reactivationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem UpdateMetadataMany(AssetsMetadataUpdateRequest updateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> UpdateMetadataManyAsync(AssetsMetadataUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem UpdatePermissionsMany(System.Collections.Generic.IEnumerable<UpdateAssetPermissionsRequest> updateRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> UpdatePermissionsManyAsync(System.Collections.Generic.IEnumerable<UpdateAssetPermissionsRequest> updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IBusinessProcessesClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem Start(string processDefinitionId, StartProcessRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> StartAsync(string processDefinitionId, StartProcessRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void MarkAsEnded(string processId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MarkAsEndedAsync(string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void MarkAsStarted(string processId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MarkAsStartedAsync(string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void SendMessage(string processId, SendMessageRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SendMessageAsync(string processId, SendMessageRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessWaitResult WaitForStates(string processId, string states, int timeout);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessWaitResult> WaitForStatesAsync(string processId, string states, int timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IDocumentHistoryClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        DocumentHistoryViewItem Get(string id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentHistoryViewItem> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        DocumentHistoryViewItem GetVersion(string id, string version);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentHistoryViewItem> GetVersionAsync(string id, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        DocumentHistoryDifferenceViewItem GetDifferenceLatest(string id, long oldVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentHistoryDifferenceViewItem> GetDifferenceLatestAsync(string id, long oldVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        DocumentHistoryDifferenceViewItem GetDifference(string id, long oldVersion, long newVersion);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentHistoryDifferenceViewItem> GetDifferenceAsync(string id, long oldVersion, long newVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IJsonSchemasClient
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IMetadataObjectsClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        MetadataObjectDetailViewItem Create(MetadataObjectCreateRequest metadataObject, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataObjectDetailViewItem> CreateAsync(MetadataObjectCreateRequest metadataObject, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem DeleteMany(System.Collections.Generic.IEnumerable<string> ids = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> DeleteManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem UpdateMany(System.Collections.Generic.IEnumerable<MetadataObjectUpdateRequest> objects);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> UpdateManyAsync(System.Collections.Generic.IEnumerable<MetadataObjectUpdateRequest> objects, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ObjectAggregationResult Aggregate(MetadataObjectAggregationRequest metadataObjectAggregationRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(MetadataObjectAggregationRequest metadataObjectAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BaseResultOfMetadataObjectViewItem Search(MetadataObjectSearchRequest metadataObjectSearchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResultOfMetadataObjectViewItem> SearchAsync(MetadataObjectSearchRequest metadataObjectSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void Delete(string objectId, int timeout);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string objectId, int timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        MetadataObjectDetailViewItem Get(string objectId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataObjectDetailViewItem> GetAsync(string objectId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        MetadataObjectDetailViewItem Update(string objectId, MetadataObjectUpdateRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataObjectDetailViewItem> UpdateAsync(string objectId, MetadataObjectUpdateRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessWaitResult WaitForStates(string processId, int timeout, System.Collections.Generic.IEnumerable<string> states = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessWaitResult> WaitForStatesAsync(string processId, int timeout, System.Collections.Generic.IEnumerable<string> states = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void Import(string assetId, string fileTransferId, bool includeObjects);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(string assetId, string fileTransferId, bool includeObjects, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IMetadataSchemasClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        MetadataSchemaDetailViewItem Get(string schemaId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataSchemaDetailViewItem> GetAsync(string schemaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ExistsResponse Exists(string schemaId, string fieldId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExistsResponse> ExistsAsync(string schemaId, string fieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BusinessProcessViewItem Create(MetadataSchemaCreateRequest schema);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BusinessProcessViewItem> CreateAsync(MetadataSchemaCreateRequest schema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BaseResultOfMetadataSchemaViewItem Search(MetadataSchemaSearchRequest metadataSchemaSearchRequest);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResultOfMetadataSchemaViewItem> SearchAsync(MetadataSchemaSearchRequest metadataSchemaSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IPermissionsClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        PermissionSetSearchResult SearchAssetPermissions(PermissionSetSearchRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchAssetPermissionsAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        AssetPermissionSetDetailViewItem GetAssetPermissions(string permissionSetId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssetPermissionSetDetailViewItem> GetAssetPermissionsAsync(string permissionSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        PermissionSetSearchResult SearchMetadataPermissions(PermissionSetSearchRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchMetadataPermissionsAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        MetadataPermissionSetDetailViewItem GetMetadataPermissions(string permissionSetId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataPermissionSetDetailViewItem> GetMetadataPermissionsAsync(string permissionSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IPublicAccessClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BasicShareDetailViewItem GetShare(string token);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicShareDetailViewItem> GetShareAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface ISharesClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ObjectAggregationResult Aggregate(ShareAggregationRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ShareAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        ShareDetailViewItem GetShareByToken(string token);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ShareDetailViewItem> GetShareByTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CreateShareResult CreateBasicShare(BasicShareCreateItem request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateShareResult> CreateBasicShareAsync(BasicShareCreateItem request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        CreateShareResult CreateEmbedShare(EmbedShareCreateItem request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateShareResult> CreateEmbedShareAsync(EmbedShareCreateItem request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BasicShareDetailViewItem GetBasicShare(string shareId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BasicShareDetailViewItem> GetBasicShareAsync(string shareId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        EmbedShareDetailViewItem GetEmbedShare(string shareId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EmbedShareDetailViewItem> GetEmbedShareAsync(string shareId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        BaseResultOfShareViewItem Search(AssetSearchRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResultOfShareViewItem> SearchAsync(AssetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface ITransfersClient
    {
        /// <summary>Cancels an active batch. Valid states: TODO</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void CancelBatch(string transferId);
    
        /// <summary>Cancels an active batch. Valid states: TODO</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CancelBatchAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        TransferViewItem Create(CreateTransferRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferViewItem> CreateAsync(CreateTransferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void Delete(string transferId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        TransferDetailViewItem Get(string transferId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferDetailViewItem> GetAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        FileTransferDetailViewItem GetFile(string fileTransferId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileTransferDetailViewItem> GetFileAsync(string fileTransferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        TransferViewItem ImportBatch(string transferId, FileTransfer2AssetCreateRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferViewItem> ImportBatchAsync(string transferId, FileTransfer2AssetCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        TransferViewItem PartialImport(string transferId, FileTransferPartial2AssetCreateRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferViewItem> PartialImportAsync(string transferId, FileTransferPartial2AssetCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        TransferSearchResult Search(TransferSearchRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TransferSearchResult> SearchAsync(TransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        FileTransferSearchResult SearchFiles(FileTransferSearchRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileTransferSearchResult> SearchFilesAsync(FileTransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <exception cref="ApiException">A server side error occurred.</exception>
        void UploadFile(string transferId, string identifier, FileParameter formFile = null, string flowRelativePath = null, long? flowChunkNumber = null, long? flowCurrentChunkSize = null, long? flowTotalSize = null, long? flowTotalChunks = null);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadFileAsync(string transferId, string identifier, FileParameter formFile = null, string flowRelativePath = null, long? flowChunkNumber = null, long? flowCurrentChunkSize = null, long? flowTotalSize = null, long? flowTotalChunks = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public partial interface IUsersClient
    {
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Collections.Generic.List<ChannelViewItem> GetChannels();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<ChannelViewItem>> GetChannelsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetAggregationRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationFilter> AggregationFilters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetAggregationRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class SortInfo 
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection Direction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SortInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum SortDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Desc")]
        Desc = 1,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FilterBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AndFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AndFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class OrFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NotFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DateRangeFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DateRange 
    {
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TranslatedStringDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ExistsFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TopLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation TopLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BottomRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation BottomRight { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoBoundingBoxFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class GeoLocation 
    {
        [Newtonsoft.Json.JsonProperty("Lat", Required = Newtonsoft.Json.Required.Always)]
        public double Lat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lon", Required = Newtonsoft.Json.Required.Always)]
        public double Lon { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class GeoDistanceFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class GeoDistanceRangeFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NumericRange 
    {
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NestedFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Join", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Join { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NumericRangeFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PrefixFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PrefixFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TermFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Term { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TermsFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Terms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AggregationFilter : FilterBase
    {
        [Newtonsoft.Json.JsonProperty("AggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AggregatorBase 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregatorBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregatorBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DateRangeAggregator : AggregatorBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DateRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FilterAggregator : AggregatorBase
    {
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class GeoDistanceAggregator : AggregatorBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NumericRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NestedAggregator : AggregatorBase
    {
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NumericRangeAggregator : AggregatorBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NumericRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TermsAggregator : AggregatorBase
    {
        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Includes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Excludes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Excludes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TermsRelationAggregator : TermsAggregator
    {
        [Newtonsoft.Json.JsonProperty("DocumentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermsRelationAggregatorDocumentType DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsRelationAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsRelationAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TermsRelationAggregatorDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asset")]
        Asset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MetadataObject")]
        MetadataObject = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "MetadataSchema")]
        MetadataSchema = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TermsEnumAggregator : TermsAggregator
    {
        [Newtonsoft.Json.JsonProperty("EnumType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnumType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsEnumAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsEnumAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum LifeCycleFilter
    {
        [System.Runtime.Serialization.EnumMember(Value = "ActiveOnly")]
        ActiveOnly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InactiveOnly")]
        InactiveOnly = 2,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PictureparkException : System.Exception
    {
        [Newtonsoft.Json.JsonProperty("TraceLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceLevel TraceLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TraceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TraceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HttpStatusCode", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatusCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TraceLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Critical")]
        Critical = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Information")]
        Information = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PictureparkBusinessException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkBusinessException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkBusinessException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PictureparkApplicationException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkApplicationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkApplicationException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PictureparkArgumentNullException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("ArgumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkArgumentNullException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkArgumentNullException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("AssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BusinessProcessDefinitionCreateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("ProcessDefinitionIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ProcessDefinitionIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDefinitionCreateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionCreateException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BusinessProcessDefinitionNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("ProcessDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDefinitionNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BusinessProcessNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CustomerHostNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("HostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerHostNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CustomerNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DocumentNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DocumentVersionNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentVersionNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DriveRequestException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveRequestException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveRequestException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DuplicateRightException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("PermissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateRightException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateRightException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DuplicateDocumentException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateDocumentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateDocumentException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DuplicateAggregatorException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("AggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateAggregatorException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAggregatorException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FailedToLockException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("ResourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FailedToLockException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FailedToLockException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class IndexException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("IndexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class InvalidArgumentException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("ArgumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ArgumentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidArgumentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidArgumentException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class InvalidCustomerException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidCustomerException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidCustomerException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PictureparkInvalidMetadataException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("MetadataErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataError> MetadataErrors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkInvalidMetadataException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkInvalidMetadataException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataError 
    {
        [Newtonsoft.Json.JsonProperty("ErrorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LineNumber", Required = Newtonsoft.Json.Required.Always)]
        public int LineNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LinePosition", Required = Newtonsoft.Json.Required.Always)]
        public int LinePosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataError>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class InvalidStateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("ResourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidStateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class InvalidStateTransitionException : InvalidStateException
    {
        [Newtonsoft.Json.JsonProperty("Transition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidStateTransitionException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateTransitionException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class InvalidUserOrPasswordException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidUserOrPasswordException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidUserOrPasswordException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PictureparkMappingException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("IndexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkMappingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkMappingException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MessagePerformerTaskCanceledException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MessagePerformerTaskCanceledException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessagePerformerTaskCanceledException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ObjectStoreException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("RowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectStoreException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ObjectStoreResponseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("RowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectStoreResponseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreResponseException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PictureparkOperationCanceledException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("CancellationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancellationToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkOperationCanceledException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkOperationCanceledException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class OperationTimeoutException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OperationTimeoutException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationTimeoutException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class OutputNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("AssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PermissionException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class QueryException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("DebugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static QueryException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class RenderingException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RenderingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class RenderingJobItemNotSetException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RenderingJobItemNotSetException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingJobItemNotSetException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ServiceProviderCreateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VirtualHost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VirtualHost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DetailErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderCreateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderCreateException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ServiceProviderDeleteException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("ServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DetailedErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderDeleteException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderDeleteException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ServiceProviderNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("MissingServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingServiceProviderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TokenValidationException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TokenValidationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenValidationException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UnknownException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("ExceptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionDetail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnknownException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnknownException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("MissingUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserPermanentlyRemovedException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("RemovedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemovedUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserPermanentlyRemovedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPermanentlyRemovedException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserRoleAssignedException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("UserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleAssignedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleAssignedException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserRolesRightsAssignedException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("AssetPermissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetPermissionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRolesRightsAssignedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRolesRightsAssignedException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ObjectAggregationResult 
    {
        [Newtonsoft.Json.JsonProperty("ElapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectAggregationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectAggregationResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AggregationResult 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SumOtherDocCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SumOtherDocCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AggregationResultItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResultItem> AggregationResultItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AggregationResultItem 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public long Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregationFilter Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationResultItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResultItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetBatchDownloadRequest 
    {
        [Newtonsoft.Json.JsonProperty("Assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Asset> Assets { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetBatchDownloadRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetBatchDownloadRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Asset 
    {
        [Newtonsoft.Json.JsonProperty("AssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Asset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Asset>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DownloadItem 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetBatchDownloadItem : DownloadItem
    {
        [Newtonsoft.Json.JsonProperty("DownloadToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DownloadUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadUrl { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetBatchDownloadItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetBatchDownloadItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CreateVirtualAssetRequest 
    {
        [Newtonsoft.Json.JsonProperty("ContentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateVirtualAssetRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateVirtualAssetRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataDictionary : System.Collections.Generic.Dictionary<string, object>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetDetailViewItem 
    {
        [Newtonsoft.Json.JsonProperty("AssetTypeId", Required = Newtonsoft.Json.Required.Always)]
        public int AssetTypeId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetPermissionSetIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OutputViewItem> Outputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OwnerTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AssetType AssetType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueViewItem DisplayValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum EntityType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asset")]
        Asset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BasicShare")]
        BasicShare = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "EmbedShare")]
        EmbedShare = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Metadata")]
        Metadata = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "FileTransfer")]
        FileTransfer = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class OutputViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class StoreAudit 
    {
        [Newtonsoft.Json.JsonProperty("CreationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem CreatedByUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StoreAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StoreAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum AssetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Bitmap")]
        Bitmap = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VectorGraphic")]
        VectorGraphic = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "RawImage")]
        RawImage = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InterchangeDocument")]
        InterchangeDocument = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "WordProcessingDocument")]
        WordProcessingDocument = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "TextDocument")]
        TextDocument = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "DesktopPublishingDocument")]
        DesktopPublishingDocument = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Presentation")]
        Presentation = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Spreadsheet")]
        Spreadsheet = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Archive")]
        Archive = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "Audio")]
        Audio = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Video")]
        Video = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "Font")]
        Font = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Multimedia")]
        Multimedia = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "Application")]
        Application = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SourceCode")]
        SourceCode = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "Database")]
        Database = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cad")]
        Cad = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "Model3d")]
        Model3d = 19,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DisplayValueViewItem : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DisplayValueViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayValueViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ThumbnailSize
    {
        [System.Runtime.Serialization.EnumMember(Value = "Small")]
        Small = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Large")]
        Large = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UpdateAssetPermissionsRequest 
    {
        [Newtonsoft.Json.JsonProperty("AssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateAssetPermissionsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateAssetPermissionsRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("ChannelIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ChannelIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DisplayPatternIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CollectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BaseResultOfAssetViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AssetViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfAssetViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfAssetViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetSearchResult : BaseResultOfAssetViewItem
    {
        [Newtonsoft.Json.JsonProperty("AggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UpdateAssetMetadataRequest 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateAssetMetadataRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateAssetMetadataRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetDeactivationRequest 
    {
        [Newtonsoft.Json.JsonProperty("AssetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetDeactivationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetDeactivationRequest>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BusinessProcessViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProcessDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime StartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BusinessProcessStateItem> StateHistory { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BusinessProcessStateItem 
    {
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessStateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessStateItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("Exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TraceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TraceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BusinessProcessBulkResponseViewItem : BusinessProcessViewItem
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkResponseViewItem Response { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessBulkResponseViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessBulkResponseViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BulkResponseViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BulkResponseRowViewItem> Rows { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkResponseViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponseViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BulkResponseRowViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkResponseRowViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponseRowViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetReactivationRequest 
    {
        [Newtonsoft.Json.JsonProperty("AssetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetReactivationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetReactivationRequest>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesChangeRequestBase 
    {
        [Newtonsoft.Json.JsonProperty("ChangeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataValuesChangeCommandBase> ChangeCommands { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeRequestBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeRequestBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetsMetadataUpdateRequest : MetadataValuesChangeRequestBase
    {
        [Newtonsoft.Json.JsonProperty("AssetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetsMetadataUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetsMetadataUpdateRequest>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesChangeCommandBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeCommandBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeCommandBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesSchemaUpdateCommand : MetadataValuesChangeCommandBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpdateCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpdateCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesSchemaUpsertCommand : MetadataValuesChangeCommandBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpsertCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpsertCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesSchemaRemoveCommand : MetadataValuesChangeCommandBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaRemoveCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesFieldRemoveCommand : MetadataValuesChangeCommandBase
    {
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesFieldRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesFieldRemoveCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesSchemaItemAddCommand : MetadataValuesChangeCommandBase
    {
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemAddCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemAddCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataValuesSchemaItemRemoveCommand : MetadataValuesChangeCommandBase
    {
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemRemoveCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FilterAssetsMetadataUpdateRequest : MetadataValuesChangeRequestBase
    {
        [Newtonsoft.Json.JsonProperty("AssetSearchRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetSearchRequest AssetSearchRequest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItemsCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterAssetsMetadataUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterAssetsMetadataUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class StartProcessRequest 
    {
        [Newtonsoft.Json.JsonProperty("Variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Variables { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StartProcessRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartProcessRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class SendMessageRequest 
    {
        [Newtonsoft.Json.JsonProperty("MessageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Variables { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SendMessageRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendMessageRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BusinessProcessWaitResult 
    {
        [Newtonsoft.Json.JsonProperty("HasStateHit", Required = Newtonsoft.Json.Required.Always)]
        public bool HasStateHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProcessEnded", Required = Newtonsoft.Json.Required.Always)]
        public bool ProcessEnded { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StateHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcessViewItem BusinessProcess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessWaitResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessWaitResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DocumentHistoryViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime DocumentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistoryViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistoryViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class HistoryAudit 
    {
        [Newtonsoft.Json.JsonProperty("ModificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HistoryAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DocumentHistoryDifferenceViewItem 
    {
        [Newtonsoft.Json.JsonProperty("DocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OldDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long OldDocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NewDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long NewDocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object OldValues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NewValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object NewValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistoryDifferenceViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistoryDifferenceViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataObjectCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("MetadataObjectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataObjectId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataObjectCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataObjectCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataObjectDetailViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueViewItem DisplayValues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataObjectDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataObjectDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataObjectAggregationRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationFilter> AggregationFilters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeAllMetadataSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllMetadataSchemaChildren { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataObjectAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataObjectAggregationRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataObjectSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeAllMetadataSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllMetadataSchemaChildren { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DisplayPatternIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IncludeMetadata", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeMetadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataObjectSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataObjectSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BaseResultOfMetadataObjectViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataObjectViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfMetadataObjectViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfMetadataObjectViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataObjectViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueViewItem DisplayValues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataObjectViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataObjectViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataObjectUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataObjectUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataObjectUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataSchemaDetailViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ParentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<MetadataSchemaType> Types { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullTextFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> FullTextFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DisplayPattern> DisplayPatterns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FieldBase> Fields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OwnerTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataPermissionSetIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferencedInMetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferencedInMetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DescendantMetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DescendantMetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataSchemaDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataSchemaDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum MetadataSchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = "AssetContent")]
        AssetContent = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "AssetLayer")]
        AssetLayer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "MetadataContent")]
        MetadataContent = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "MetadataLayer")]
        MetadataLayer = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Struct")]
        Struct = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DisplayPattern 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TemplateEngine", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateEngine TemplateEngine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayPatternType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType DisplayPatternType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Templates { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DisplayPattern FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayPattern>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TemplateEngine
    {
        [System.Runtime.Serialization.EnumMember(Value = "DotLiquid")]
        DotLiquid = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum DisplayPatternType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Thumbnail")]
        Thumbnail = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "List")]
        List = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Detail")]
        Detail = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Name")]
        Name = 4,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldBase 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Fixed", Required = Newtonsoft.Json.Required.Always)]
        public bool Fixed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SimpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldBoolean : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBoolean FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBoolean>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldDate : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDate>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldDateTime : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTime FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTime>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldDateTimeArray : FieldDateTime
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTimeArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTimeArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldDecimal : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDecimal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDecimal>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldDictionary : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldDictionaryArray : FieldDictionary
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionaryArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionaryArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldGeoPoint : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("LongitudeNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary LongitudeNames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LatitudeNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary LatitudeNames { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldGeoPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldGeoPoint>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldInteger : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldInteger FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldInteger>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldIntegerArray : FieldInteger
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldIntegerArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldIntegerArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldObject : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldObject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldObject>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldObjects : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldObjects FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldObjects>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldSchemaItem : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSchemaItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSchemaItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldSchemaItems : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSchemaItems FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSchemaItems>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldString : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("KeepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AnalyzerBase> Analyzers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MultiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GrantedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> GrantedValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldString>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AnalyzerBase 
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SimpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyzerBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyzerBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class EdgeNGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EdgeNGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EdgeNGramAnalyzer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class LanguageAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LanguageAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageAnalyzer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class NGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NGramAnalyzer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PathHierarchyAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PathHierarchyAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PathHierarchyAnalyzer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class SimpleAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("FieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimpleAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleAnalyzer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldStringArray : FieldString
    {
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldStringArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldStringArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldTranslatedString : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AnalyzerBase> Analyzers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MultiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RequiredMetadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> RequiredMetadataLanguages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("KeepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldTranslatedString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldTranslatedString>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldRelation : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RelationType> RelationTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldRelation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldRelation>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class RelationType 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TargetContext", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TargetContext TargetContext { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationType>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TargetContext
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asset")]
        Asset = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MetadataObject")]
        MetadataObject = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FieldRelations : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("MetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RelationType> RelationTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldRelations FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldRelations>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ExistsResponse 
    {
        [Newtonsoft.Json.JsonProperty("Exists", Required = Newtonsoft.Json.Required.Always)]
        public bool Exists { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataSchemaCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ParentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<MetadataSchemaType> Types { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DisplayPattern> DisplayPatterns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullTextFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> FullTextFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FieldBase> Fields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataPermissionSetIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferencedInMetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferencedInMetadataSchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataSchemaCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataSchemaCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataSchemaUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DisplayPattern> DisplayPatterns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullTextFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> FullTextFields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FieldBase> Fields { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataPermissionSetIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferencedInMetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferencedInMetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<MetadataSchemaType> Types { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataSchemaUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataSchemaUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataSchemaSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataSchemaSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataSchemaSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BaseResultOfMetadataSchemaViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataSchemaViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfMetadataSchemaViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfMetadataSchemaViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataSchemaViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ParentMetadataSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentMetadataSchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<MetadataSchemaType> Types { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FieldCount", Required = Newtonsoft.Json.Required.Always)]
        public int FieldCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChildCount", Required = Newtonsoft.Json.Required.Always)]
        public int ChildCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Level", Required = Newtonsoft.Json.Required.Always)]
        public int Level { get; set; }
    
        [Newtonsoft.Json.JsonProperty("System", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataSchemaViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataSchemaViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PermissionSetSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BaseResultOfPermissionSetViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PermissionSetViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfPermissionSetViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfPermissionSetViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PermissionSetSearchResult : BaseResultOfPermissionSetViewItem
    {
        [Newtonsoft.Json.JsonProperty("AggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ElapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PermissionSetViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PermissionSetDetailViewItemOfAssetRight 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserRoleRightsViewItemOfAssetRight> UserRolesRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserRoleRightsViewItemOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetDetailViewItemOfAssetRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailViewItemOfAssetRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetPermissionSetDetailViewItem : PermissionSetDetailViewItemOfAssetRight
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetPermissionSetDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetPermissionSetDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserRoleRightsViewItemOfAssetRight 
    {
        [Newtonsoft.Json.JsonProperty("UserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<AssetRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleRightsViewItemOfAssetRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleRightsViewItemOfAssetRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum AssetRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "View")]
        View = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edit")]
        Edit = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manage")]
        Manage = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Trash")]
        Trash = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserRoleRightsViewItemOfPermissionSetRight 
    {
        [Newtonsoft.Json.JsonProperty("UserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<PermissionSetRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleRightsViewItemOfPermissionSetRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleRightsViewItemOfPermissionSetRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum PermissionSetRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "Apply")]
        Apply = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PermissionSetDetailViewItemOfMetadataRight 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserRoleRightsViewItemOfMetadataRight> UserRolesRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserRoleRightsViewItemOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetDetailViewItemOfMetadataRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailViewItemOfMetadataRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MetadataPermissionSetDetailViewItem : PermissionSetDetailViewItemOfMetadataRight
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataPermissionSetDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataPermissionSetDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserRoleRightsViewItemOfMetadataRight 
    {
        [Newtonsoft.Json.JsonProperty("UserRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<MetadataRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleRightsViewItemOfMetadataRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleRightsViewItemOfMetadataRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum MetadataRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "View")]
        View = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edit")]
        Edit = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manage")]
        Manage = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ShareDetailViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetSelections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AssetSelection> AssetSelections { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BasicShareDetailViewItem : ShareDetailViewItem
    {
        [Newtonsoft.Json.JsonProperty("MailRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MailRecipientViewItem> MailRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InternalRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InternalRecipientViewItem> InternalRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BasicShareDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BasicShareDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class MailRecipientViewItem 
    {
        [Newtonsoft.Json.JsonProperty("UserEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserEmail UserEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MailRecipientViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MailRecipientViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserEmail 
    {
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class InternalRecipientViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem Recipient { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InternalRecipientViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InternalRecipientViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AssetSelection 
    {
        [Newtonsoft.Json.JsonProperty("Asset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssetViewItem Asset { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OutputViewItem> Outputs { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AssetSelection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssetSelection>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ShareAggregationRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationFilter> AggregationFilters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareAggregationRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BasicShareCreateItem 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecipientsEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserEmail> RecipientsEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecipientsUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserItem> RecipientsUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecipientsGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserRoleViewItem> RecipientsGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Assets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ShareAssetItem> Assets { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemplateId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BasicShareCreateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BasicShareCreateItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class UserRoleViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsSuperUser", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSuperUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<UserRight> UserRights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum UserRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "ManageContent")]
        ManageContent = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSharings")]
        ManageSharings = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageDrives")]
        ManageDrives = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageDropzone")]
        ManageDropzone = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageAnalytics")]
        ManageAnalytics = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageChannels")]
        ManageChannels = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageMetadataSchemas")]
        ManageMetadataSchemas = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageUsers")]
        ManageUsers = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageUserRoles")]
        ManageUserRoles = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManagePermissions")]
        ManagePermissions = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSearchIndexes")]
        ManageSearchIndexes = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageRecipients")]
        ManageRecipients = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageCollections")]
        ManageCollections = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageComments")]
        ManageComments = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageMetadataObjects")]
        ManageMetadataObjects = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageServiceProviders")]
        ManageServiceProviders = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ShareAssetItem 
    {
        [Newtonsoft.Json.JsonProperty("AssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OutputFormatIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareAssetItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareAssetItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CreateShareResult 
    {
        [Newtonsoft.Json.JsonProperty("ShareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateShareResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShareResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class EmbedShareCreateItem 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShareAssetItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ShareAssetItem> ShareAssetItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmbedShareCreateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbedShareCreateItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class EmbedShareDetailViewItem : ShareDetailViewItem
    {
        [Newtonsoft.Json.JsonProperty("EmbedAssetItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EmbedAssetViewItem> EmbedAssetItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmbedShareDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbedShareDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class EmbedAssetViewItem 
    {
        [Newtonsoft.Json.JsonProperty("AssetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmbedAssetViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbedAssetViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BaseResultOfShareViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ShareViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfShareViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfShareViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ShareViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CreateTransferRequest 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransferUploadFile> Files { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransferDriveFile> DriveFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransferWebLink> WebLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CollectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreateCollection", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateCollection { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTransferRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TransferType
    {
        [System.Runtime.Serialization.EnumMember(Value = "FileUpload")]
        FileUpload = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DriveImport")]
        DriveImport = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DriveExport")]
        DriveExport = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "WebDownload")]
        WebDownload = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferFile 
    {
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferUploadFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferUploadFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferUploadFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferDriveFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("DriveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExternalOutputFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputFolderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferDriveFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDriveFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferWebLink : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferWebLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferWebLink>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BusinessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TransferState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadInProgress")]
        UploadInProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCompleted")]
        UploadCompleted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportInProgress")]
        ImportInProgress = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCompleted")]
        ImportCompleted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCancelled")]
        UploadCancelled = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCancelled")]
        ImportCancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportFailed")]
        ImportFailed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Created")]
        Created = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadFailed")]
        UploadFailed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReady")]
        TransferReady = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "FileDeleteInProgress")]
        FileDeleteInProgress = 12,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferDetailViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemProgress", Required = Newtonsoft.Json.Required.Always)]
        public long ItemProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemCount", Required = Newtonsoft.Json.Required.Always)]
        public long ItemCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsFailed", Required = Newtonsoft.Json.Required.Always)]
        public long ItemsFailed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ItemsCancelled", Required = Newtonsoft.Json.Required.Always)]
        public long ItemsCancelled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastProgressStamp", Required = Newtonsoft.Json.Required.Always)]
        public long LastProgressStamp { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileTransferDetailViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoreAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileTransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileMetadata FileMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DriveMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadata DriveMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OutputItem> OutputItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetStoreItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetStoreItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferDetailViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferDetailViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum FileTransferState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadInProgress")]
        UploadInProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCompleted")]
        UploadCompleted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DataExtractionInProgress")]
        DataExtractionInProgress = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "DataExtractionDone")]
        DataExtractionDone = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportInProgress")]
        ImportInProgress = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCompleted")]
        ImportCompleted = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCancelled")]
        UploadCancelled = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCancelled")]
        ImportCancelled = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadFailed")]
        UploadFailed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportFailed")]
        ImportFailed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "DeleteInProgress")]
        DeleteInProgress = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "CleanupInProgress")]
        CleanupInProgress = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "CleanupCompleted")]
        CleanupCompleted = 14,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "Kind")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpMetadata XmpMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExifMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExifMetadata ExifMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Dc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dc Dc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Crs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Crs Crs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IptcCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcCore IptcCore { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IptcExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcExt IptcExt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IptcIIM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcIIM IptcIIM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Lr Lr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Pdf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pdf Pdf { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Photoshop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Photoshop Photoshop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Plus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plus Plus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tiff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tiff Tiff { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Xmp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Xmp Xmp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpBJ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpBJ XmpBJ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpDM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpDM XmpDM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpG XmpG { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpGImg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpGImg XmpGImg { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Xmpidq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Xmpidq Xmpidq { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpMM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpMM XmpMM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpNote XmpNote { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpRights XmpRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XmpTPg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpTPg XmpTPg { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Dc 
    {
        [Newtonsoft.Json.JsonProperty("Contributor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Contributor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.DateTime> Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Publisher { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Relation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Rights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Subject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Dc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Crs 
    {
        [Newtonsoft.Json.JsonProperty("AutoBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoBrightness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutoContrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoContrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutoExposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoExposure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AutoShadows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoShadows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BlueHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlueHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BlueSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlueSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Brightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Brightness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChromaticAberrationB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChromaticAberrationB { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChromaticAberrationR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChromaticAberrationR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorNoiseReduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ColorNoiseReduction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Contrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Contrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropTop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropBottom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropRight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropAngle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CropUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CropUnit? CropUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Exposure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GreenHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GreenHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GreenSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GreenSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasCrop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCrop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasSettings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LuminanceSmoothing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LuminanceSmoothing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RawFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawFileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RedHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RedSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Saturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Saturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Shadows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Shadows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShadowTint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShadowTint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sharpness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sharpness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Temperature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ToneCurve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ToneCurve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ToneCurveName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ToneCurve? ToneCurveName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VignetteAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VignetteAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VignetteMidpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VignetteMidpoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WhiteBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WhiteBalance? WhiteBalance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Crs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Crs>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum CropUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = "Pixels")]
        Pixels = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inches")]
        Inches = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeters")]
        Centimeters = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ToneCurve
    {
        [System.Runtime.Serialization.EnumMember(Value = "Linear")]
        Linear = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MediumContrast")]
        MediumContrast = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "StrongContrast")]
        StrongContrast = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum WhiteBalance
    {
        [System.Runtime.Serialization.EnumMember(Value = "AsShot")]
        AsShot = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Daylight")]
        Daylight = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cloudy")]
        Cloudy = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shade")]
        Shade = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Tungsten")]
        Tungsten = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Fluorescent")]
        Fluorescent = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Flash")]
        Flash = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class IptcCore 
    {
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IntellectualGenre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntellectualGenre { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Scene", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Scene { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SubjectCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatorContactInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorContactInfo CreatorContactInfo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcCore FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcCore>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CreatorContactInfo 
    {
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }
    
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreatorContactInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatorContactInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class IptcExt 
    {
        [Newtonsoft.Json.JsonProperty("AdditionalModelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalModelInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ArtworkOrObject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtworkOrObjectInfo> ArtworkOrObject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrganisationInImageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OrganisationInImageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ControlledVocabularyTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ControlledVocabularyTerm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationShown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LocationInfo> LocationShown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> ModelAge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrganisationInImageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OrganisationInImageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PersonInImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PersonInImage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalImageGUID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalImageGUID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalSourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalSourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageRegistryEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RegistryEntryInfo> ImageRegistryEntry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataLastEdited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MetadataLastEdited { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LocationCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LocationInfo> LocationCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxAvailHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAvailHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxAvailWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAvailWidth { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcExt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcExt>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ArtworkOrObjectInfo 
    {
        [Newtonsoft.Json.JsonProperty("CopyrightNotice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightNotice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SourceInventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceInventoryNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Title { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ArtworkOrObjectInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtworkOrObjectInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class LocationInfo 
    {
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProvinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sublocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sublocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WorldRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorldRegion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LocationInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class RegistryEntryInfo 
    {
        [Newtonsoft.Json.JsonProperty("RegistryItemIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistryItemIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RegistryOrganisationIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistryOrganisationIdentifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RegistryEntryInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegistryEntryInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class IptcIIM 
    {
        [Newtonsoft.Json.JsonProperty("ModelVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModelVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileFormatVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileFormatVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ServiceIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EnvelopeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvelopeNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProductID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ProductID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EnvelopePriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnvelopePriority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateSent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeSent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UNO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UNO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RecordVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ObjectTypeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectTypeReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ObjectAttributeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectAttributeReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ObjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ObjectName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EditStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Urgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Urgency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SubjectReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupplementalCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SupplementalCategory { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FixtureIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FixtureIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Keywords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentLocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContentLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentLocationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReleaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReleaseTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExpirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpecialInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialInstruction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ActionAdvised", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionAdvised { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceService { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReferenceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalCreationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DigitalCreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalCreationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DigitalCreationTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginatingProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginatingProgram { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProgramVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgramVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Byline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Byline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BylineTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BylineTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sublocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sublocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProvinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryPrimaryLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryPrimaryLocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CountryPrimaryLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryPrimaryLocationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalTransmissionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalTransmissionReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightNotice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CopyrightNotice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CaptionAbstract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CaptionAbstract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WriterEditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WriterEditor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageOrientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageOrientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LanguageIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageIdentifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcIIM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcIIM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Lr 
    {
        [Newtonsoft.Json.JsonProperty("HierarchicalSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> HierarchicalSubject { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Lr FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Lr>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Pdf 
    {
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PDFVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PDFVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Producer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Producer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Trapped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Trapped { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pdf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Photoshop 
    {
        [Newtonsoft.Json.JsonProperty("AuthorsPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorsPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CaptionWriter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionWriter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorMode? ColorMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentAncestors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DocumentAncestors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("History", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string History { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ICCProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ICCProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SupplementalCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SupplementalCategories { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PhotoshopLayer> TextLayers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransmissionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransmissionReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Urgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Urgency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LegacyIPTCDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegacyIPTCDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Photoshop FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Photoshop>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ColorMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Bitmap")]
        Bitmap = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Grayscale")]
        Grayscale = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indexed")]
        Indexed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "RGB")]
        RGB = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CMYK")]
        CMYK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Multichannel")]
        Multichannel = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Duotone")]
        Duotone = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "LAB")]
        LAB = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class PhotoshopLayer 
    {
        [Newtonsoft.Json.JsonProperty("LayerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LayerText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PhotoshopLayer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PhotoshopLayer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Plus 
    {
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Licensee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LicenseeInfo> Licensee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EndUserInfo> EndUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUserID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Licensor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LicensorInfo> Licensor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> LicensorNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MediaSummaryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaSummaryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MediaConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MediaConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RegionConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> RegionConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProductOrServiceConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ProductOrServiceConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageFileConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ImageFileConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageAlterationConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ImageAlterationConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageDuplicationConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageDuplicationConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelReleaseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelReleaseStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModelReleaseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ModelReleaseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinorModelAgeDisclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinorModelAgeDisclosure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PropertyReleaseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyReleaseStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PropertyReleaseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PropertyReleaseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreditLineRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditLineRequired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AdultContentWarning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdultContentWarning { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherLicenseRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherLicenseRequirements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TermsAndConditionsText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> TermsAndConditionsText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TermsAndConditionsURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsAndConditionsURL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherConditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileNameAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileNameAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageFileFormatAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageFileFormatAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageFileSizeAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageFileSizeAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightRegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstPublicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FirstPublicationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CopyrightOwnerInfo> CopyrightOwner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightOwnerImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageCreator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ImageCreatorInfo> ImageCreator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageCreatorImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageSupplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ImageSupplierInfo> ImageSupplier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageSupplierImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeImageNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> LicenseeImageNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherImageInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherImageInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LicensorTransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LicenseeTransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeProjectReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LicenseeProjectReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseTransactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseTransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reuse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reuse { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherLicenseDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OtherLicenseDocuments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OtherLicenseInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherLicenseInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom4 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom5 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom6 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom7 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom8 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom9 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Custom10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom10 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Plus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Plus>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class LicenseeInfo 
    {
        [Newtonsoft.Json.JsonProperty("LicenseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicenseeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LicenseeInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseeInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class EndUserInfo 
    {
        [Newtonsoft.Json.JsonProperty("EndUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EndUserID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EndUserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EndUserInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class LicensorInfo 
    {
        [Newtonsoft.Json.JsonProperty("LicensorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorStreetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorStreetAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorExtendedAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorExtendedAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorRegion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorPostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorPostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephoneType1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephoneType1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephone1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephoneType2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephoneType2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorTelephone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephone2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LicensorURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorURL { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LicensorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicensorInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CopyrightOwnerInfo 
    {
        [Newtonsoft.Json.JsonProperty("CopyrightOwnerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CopyrightOwnerID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CopyrightOwnerInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CopyrightOwnerInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ImageCreatorInfo 
    {
        [Newtonsoft.Json.JsonProperty("ImageCreatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageCreatorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageCreatorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageCreatorInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ImageSupplierInfo 
    {
        [Newtonsoft.Json.JsonProperty("ImageSupplierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageSupplierID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageSupplierInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageSupplierInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Tiff 
    {
        [Newtonsoft.Json.JsonProperty("Artist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitsPerSample", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> BitsPerSample { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Compression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Compression? Compression { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Copyright { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ImageDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Make", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Make { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Orientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Orientation? Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PhotometricInterpretation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhotometricInterpretation? PhotometricInterpretation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PlanarConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlanarConfiguration? PlanarConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PrimaryChromaticities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PrimaryChromaticities { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceBlackWhite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferenceBlackWhite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResolutionUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResolutionUnit? ResolutionUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SamplesPerPixel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplesPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Software", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Software { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> TransferFunction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WhitePoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> WhitePoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("XResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string YResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YCbCrCoefficients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> YCbCrCoefficients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YCbCrPositioning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public YCbCrPositioning? YCbCrPositioning { get; set; }
    
        [Newtonsoft.Json.JsonProperty("YCbCrSubSampling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public YCbCrSubSampling? YCbCrSubSampling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NativeDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tiff FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tiff>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Compression
    {
        [System.Runtime.Serialization.EnumMember(Value = "Uncompressed")]
        Uncompressed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CCITT")]
        CCITT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "T4")]
        T4 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "T6")]
        T6 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "LZW")]
        LZW = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "OJPEG")]
        OJPEG = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "JPEG")]
        JPEG = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deflate")]
        Deflate = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "T82")]
        T82 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "T43")]
        T43 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "NeXT")]
        NeXT = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "ARW")]
        ARW = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "RAW")]
        RAW = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "SRW")]
        SRW = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Group3_1D")]
        Group3_1D = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "PackBits")]
        PackBits = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThunderScan")]
        ThunderScan = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "KDC")]
        KDC = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "RasterPadding")]
        RasterPadding = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "LineWork")]
        LineWork = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "HighContinuous")]
        HighContinuous = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "BinaryLineWork")]
        BinaryLineWork = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "PixarFilm")]
        PixarFilm = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "PixarLog")]
        PixarLog = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "DCS")]
        DCS = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = "JBIG")]
        JBIG = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = "JPEG2000")]
        JPEG2000 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = "NEF")]
        NEF = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = "JBIG2")]
        JBIG2 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = "DCR")]
        DCR = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = "PEF")]
        PEF = 30,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Orientation
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TopRowLeftColumn")]
        TopRowLeftColumn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TopRowRightColumn")]
        TopRowRightColumn = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "BottomRowLeftColumn")]
        BottomRowLeftColumn = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "BottomRowRightColumn")]
        BottomRowRightColumn = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "LeftRowTopColumn")]
        LeftRowTopColumn = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "RightRowTopColumn")]
        RightRowTopColumn = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "RightRowBottomColumn")]
        RightRowBottomColumn = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "LeftRowBottomColumn")]
        LeftRowBottomColumn = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum PhotometricInterpretation
    {
        [System.Runtime.Serialization.EnumMember(Value = "WhiteIsZero")]
        WhiteIsZero = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BlackIsZero")]
        BlackIsZero = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "RGB")]
        RGB = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Palette")]
        Palette = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransparencyMask")]
        TransparencyMask = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "CMYK")]
        CMYK = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr")]
        YCbCr = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "CIELab")]
        CIELab = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ICCLab")]
        ICCLab = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "ITULab")]
        ITULab = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ColorFilterArray")]
        ColorFilterArray = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "LogL")]
        LogL = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "LogLUV")]
        LogLUV = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "LinearRaw")]
        LinearRaw = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum PlanarConfiguration
    {
        [System.Runtime.Serialization.EnumMember(Value = "Chunky")]
        Chunky = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Planar")]
        Planar = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Line")]
        Line = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ResolutionUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inch")]
        Inch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeter")]
        Centimeter = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum YCbCrPositioning
    {
        [System.Runtime.Serialization.EnumMember(Value = "Centered")]
        Centered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cosited")]
        Cosited = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum YCbCrSubSampling
    {
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr111")]
        YCbCr111 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr422")]
        YCbCr422 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr420")]
        YCbCr420 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Xmp 
    {
        [Newtonsoft.Json.JsonProperty("BaseURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseURL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreateDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CreatorTool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatorTool { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MetadataDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Rating? Rating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Thumbnails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<XmpGImg> Thumbnails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<XmpGImg> PageInfo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Xmp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Xmp>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Rating
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unrated")]
        Unrated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "One")]
        One = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Two")]
        Two = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Three")]
        Three = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Four")]
        Four = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Five")]
        Five = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpGImg 
    {
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImgFormat? Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpGImg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpGImg>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ImgFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "JPEG")]
        JPEG = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpBJ 
    {
        [Newtonsoft.Json.JsonProperty("JobRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Job> JobRef { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpBJ FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpBJ>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Job 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Job FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Job>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpDM 
    {
        [Newtonsoft.Json.JsonProperty("AbsPeakAudioFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbsPeakAudioFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Artist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Album", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Album { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AltTapeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltTapeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AltTimecode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeCode AltTimecode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioChannelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioChannelType? AudioChannelType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioCompressor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AudioCompressor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioSampleRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AudioSampleRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioSampleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioSampleType? AudioSampleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BeatSpliceParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BeatSpliceStretch BeatSpliceParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CameraAngle? CameraAngle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraLabel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraModel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CameraMove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CameraMove? CameraMove { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Client", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Client { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Composer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Composer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ContributedMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Media> ContributedMedia { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Director", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Director { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DirectorPhotography", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DirectorPhotography { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Engineer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Engineer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileDataRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileDataRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Genre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Good", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Good { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Instrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instrument { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IntroTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time IntroTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioMusicalKey? Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Loop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Loop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NumberOfBeats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NumberOfBeats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Markers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Marker> Markers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutCue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time OutCue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProjectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProjectRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectLink ProjectRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PullDown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoPullDown? PullDown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelativePeakAudioFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelativePeakAudioFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelativeTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time RelativeTimestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReleaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ResampleParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResampleStretch ResampleParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ScaleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioMusicalScaleType? ScaleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Scene", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scene { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShotDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotDay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShotSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShotSize? ShotSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpeakerPlacement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpeakerPlacement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartTimecode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeCode StartTimecode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StretchMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioStretchMode? StretchMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TakeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TakeNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TapeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TapeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Tempo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeScaleParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeScaleStretch TimeScaleParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeSignature? TimeSignature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrackNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Tracks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Track> Tracks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoAlphaMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoAlphaMode? VideoAlphaMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoAlphaPremultipleColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpG VideoAlphaPremultipleColor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoAlphaUnityIsTransparent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VideoAlphaUnityIsTransparent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoColorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoColorSpace? VideoColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoCompressor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VideoCompressor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoFieldOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoFieldOrder? VideoFieldOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoFrameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoFrameRate? VideoFrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoFrameSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension VideoFrameSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoPixelDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoPixelDepth? VideoPixelDepth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoPixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VideoPixelAspectRatio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpDM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpDM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TimeCode 
    {
        [Newtonsoft.Json.JsonProperty("TimeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeFormat? TimeFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeCode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCode>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TimeFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "Timecode24")]
        Timecode24 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode25")]
        Timecode25 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode2997Drop")]
        Timecode2997Drop = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode2997NonDrop")]
        Timecode2997NonDrop = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode30")]
        Timecode30 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode50")]
        Timecode50 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode5994Drop")]
        Timecode5994Drop = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode5994NonDrop")]
        Timecode5994NonDrop = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode60")]
        Timecode60 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode23976")]
        Timecode23976 = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum AudioChannelType
    {
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_MONO")]
        CHANNEL_MONO = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_STEREO")]
        CHANNEL_STEREO = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_5_1")]
        CHANNEL_5_1 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_7_1")]
        CHANNEL_7_1 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_16")]
        CHANNEL_16 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_OTHER")]
        CHANNEL_OTHER = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum AudioSampleType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_8_INT")]
        SAMPLE_8_INT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_16_INT")]
        SAMPLE_16_INT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_24_INT")]
        SAMPLE_24_INT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_32_INT")]
        SAMPLE_32_INT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_32_FLOAT")]
        SAMPLE_32_FLOAT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_COMPRESSED")]
        SAMPLE_COMPRESSED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_PACKED")]
        SAMPLE_PACKED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_OTHER")]
        SAMPLE_OTHER = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BeatSpliceStretch 
    {
        [Newtonsoft.Json.JsonProperty("RiseInDecibel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? RiseInDecibel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RiseInTimeDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time RiseInTimeDuration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UseFileBeatsMarker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseFileBeatsMarker { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BeatSpliceStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BeatSpliceStretch>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Time 
    {
        [Newtonsoft.Json.JsonProperty("Scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scale { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Time FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Time>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum CameraAngle
    {
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_LOW")]
        ANGLE_LOW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_EYE_LEVEL")]
        ANGLE_EYE_LEVEL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_HIGH")]
        ANGLE_HIGH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_OVERHEAD_SHOT")]
        ANGLE_OVERHEAD_SHOT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_BIRDS_EYE_SHOT")]
        ANGLE_BIRDS_EYE_SHOT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_DUTCH")]
        ANGLE_DUTCH = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_POV")]
        ANGLE_POV = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_OVER_THE_SHOULDER")]
        ANGLE_OVER_THE_SHOULDER = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_REACTION_SHOT")]
        ANGLE_REACTION_SHOT = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum CameraMove
    {
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_AERIAL")]
        MOVE_AERIAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_BOOM_UP")]
        MOVE_BOOM_UP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_BOOM_DOWN")]
        MOVE_BOOM_DOWN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_CRANE_UP")]
        MOVE_CRANE_UP = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_CRANE_DOWN")]
        MOVE_CRANE_DOWN = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_DOLLY_IN")]
        MOVE_DOLLY_IN = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_DOLLY_OUT")]
        MOVE_DOLLY_OUT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PAN_LEFT")]
        MOVE_PAN_LEFT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PAN_RIGHT")]
        MOVE_PAN_RIGHT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PEDESTAL_UP")]
        MOVE_PEDESTAL_UP = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PEDESTAL_DOWN")]
        MOVE_PEDESTAL_DOWN = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TILT_UP")]
        MOVE_TILT_UP = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TILT_DOWN")]
        MOVE_TILT_DOWN = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TRACKING")]
        MOVE_TRACKING = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TRUCK_LEFT")]
        MOVE_TRUCK_LEFT = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TRUCK_RIGHT")]
        MOVE_TRUCK_RIGHT = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_ZOOM_IN")]
        MOVE_ZOOM_IN = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_ZOOM_OUT")]
        MOVE_ZOOM_OUT = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Media 
    {
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Managed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Managed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Track", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Track { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebStatement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Media FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Media>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum AudioMusicalKey
    {
        [System.Runtime.Serialization.EnumMember(Value = "KEY_C")]
        KEY_C = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_C_SHARP")]
        KEY_C_SHARP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_D")]
        KEY_D = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_D_SHARP")]
        KEY_D_SHARP = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_E")]
        KEY_E = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_F")]
        KEY_F = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_F_SHARP")]
        KEY_F_SHARP = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_G")]
        KEY_G = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_G_SHARP")]
        KEY_G_SHARP = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_A")]
        KEY_A = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_A_SHARP")]
        KEY_A_SHARP = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_B")]
        KEY_B = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Marker 
    {
        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CuePointParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CuePointParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CuePointType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CuePointType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Probability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Probability { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Speaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Speaker { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarkerType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Marker FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Marker>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum MarkerType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Chapter")]
        Chapter = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cue")]
        Cue = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Index")]
        Index = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Speech")]
        Speech = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Track")]
        Track = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ProjectLink 
    {
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectLinkType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectLink>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ProjectLinkType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Movie")]
        Movie = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Still")]
        Still = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Audio")]
        Audio = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum VideoPullDown
    {
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WSSWW")]
        PULLDOWN_WSSWW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_SSWWW")]
        PULLDOWN_SSWWW = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_SWWWS")]
        PULLDOWN_SWWWS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWWSS")]
        PULLDOWN_WWWSS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWSSW")]
        PULLDOWN_WWSSW = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWWSW")]
        PULLDOWN_WWWSW = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWSWW")]
        PULLDOWN_WWSWW = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WSWWW")]
        PULLDOWN_WSWWW = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_SWWWW")]
        PULLDOWN_SWWWW = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWWWS")]
        PULLDOWN_WWWWS = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ResampleStretch 
    {
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Quality? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResampleStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResampleStretch>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Quality
    {
        [System.Runtime.Serialization.EnumMember(Value = "High")]
        High = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Low")]
        Low = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum AudioMusicalScaleType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_MAJOR")]
        SCALE_MAJOR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_MINOR")]
        SCALE_MINOR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_BOTH")]
        SCALE_BOTH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_NEITHER")]
        SCALE_NEITHER = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ShotSize
    {
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_ECU")]
        SHOT_ECU = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_MCU")]
        SHOT_MCU = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_CU")]
        SHOT_CU = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_MS")]
        SHOT_MS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_WS")]
        SHOT_WS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_MWS")]
        SHOT_MWS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_EWS")]
        SHOT_EWS = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum AudioStretchMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_FIXED_LENGTH")]
        STRETCH_FIXED_LENGTH = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_TIME_SCALE")]
        STRETCH_TIME_SCALE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_RESAMPLE")]
        STRETCH_RESAMPLE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_BEAT_SPLICE")]
        STRETCH_BEAT_SPLICE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_HYBRID")]
        STRETCH_HYBRID = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TimeScaleStretch 
    {
        [Newtonsoft.Json.JsonProperty("FrameOverlappingPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FrameOverlappingPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FrameSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FrameSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Quality? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeScaleStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeScaleStretch>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum TimeSignature
    {
        [System.Runtime.Serialization.EnumMember(Value = "TIME_2_4")]
        TIME_2_4 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_3_4")]
        TIME_3_4 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_4_4")]
        TIME_4_4 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_5_4")]
        TIME_5_4 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_7_4")]
        TIME_7_4 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_6_8")]
        TIME_6_8 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_9_8")]
        TIME_9_8 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_12_8")]
        TIME_12_8 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_OTHER")]
        TIME_OTHER = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Track 
    {
        [Newtonsoft.Json.JsonProperty("FrameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Markers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Marker> Markers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrackName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TrackType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarkerType? TrackType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Track FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Track>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum VideoAlphaMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "ALPHA_MODE_STRAIGHT")]
        ALPHA_MODE_STRAIGHT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALPHA_MODE_PREMULTIPLIED")]
        ALPHA_MODE_PREMULTIPLIED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALPHA_MODE_NONE")]
        ALPHA_MODE_NONE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpG 
    {
        [Newtonsoft.Json.JsonProperty("A", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? A { get; set; }
    
        [Newtonsoft.Json.JsonProperty("B", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? B { get; set; }
    
        [Newtonsoft.Json.JsonProperty("L", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? L { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Black", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Black { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Cyan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Cyan { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Magenta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Magenta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Yellow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Yellow { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Blue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Blue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Green", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Green { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Red", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Red { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorantMode? Mode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SwatchName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwatchName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorantType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpG FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpG>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ColorantMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "CMYK")]
        CMYK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "RGB")]
        RGB = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LAB")]
        LAB = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ColorantType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Process")]
        Process = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Spot")]
        Spot = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum VideoColorSpace
    {
        [System.Runtime.Serialization.EnumMember(Value = "COLOR_SPACE_SRGB")]
        COLOR_SPACE_SRGB = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "COLOR_SPACE_CCIR_601")]
        COLOR_SPACE_CCIR_601 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "COLOR_SPACE_CCIR_709")]
        COLOR_SPACE_CCIR_709 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum VideoFieldOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_ORDER_UPPER")]
        FIELD_ORDER_UPPER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_ORDER_LOWER")]
        FIELD_ORDER_LOWER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_ORDER_PROGRESSIVE")]
        FIELD_ORDER_PROGRESSIVE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum VideoFrameRate
    {
        [System.Runtime.Serialization.EnumMember(Value = "FRAME_RATE_24")]
        FRAME_RATE_24 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FRAME_RATE_NTSC")]
        FRAME_RATE_NTSC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "FRAME_RATE_PAL")]
        FRAME_RATE_PAL = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Dimension 
    {
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit? Unit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Dimension FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dimension>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Unit
    {
        [System.Runtime.Serialization.EnumMember(Value = "Inch")]
        Inch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Millimeter")]
        Millimeter = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeter")]
        Centimeter = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pixel")]
        Pixel = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pica")]
        Pica = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Point")]
        Point = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum VideoPixelDepth
    {
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_8_INT")]
        PIXEL_DEPTH_8_INT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_16_INT")]
        PIXEL_DEPTH_16_INT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_24_INT")]
        PIXEL_DEPTH_24_INT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_32_INT")]
        PIXEL_DEPTH_32_INT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_32_FLOAT")]
        PIXEL_DEPTH_32_FLOAT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_OTHER")]
        PIXEL_DEPTH_OTHER = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Xmpidq 
    {
        [Newtonsoft.Json.JsonProperty("Scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Xmpidq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Xmpidq>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpMM 
    {
        [Newtonsoft.Json.JsonProperty("DerivedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference DerivedFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("History", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Event> History { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ingredients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Reference> Ingredients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManagedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference ManagedFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageUI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageUI { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManagerVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManagerVariant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalDocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionClass { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VersionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Versions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VersionInfo> Versions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpMM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Reference 
    {
        [Newtonsoft.Json.JsonProperty("AlternatePaths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AlternatePaths { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FromPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromPart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LastModifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManagerVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManagerVariant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ManageUI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageUI { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaskMarkers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MaskMarkers? MaskMarkers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OriginalDocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PartMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartMapping { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionClass { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RenditionParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ToPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToPart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VersionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Reference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Reference>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum MaskMarkers
    {
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Event 
    {
        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventAction? Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Changed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Changed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("InstanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SoftwareAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SoftwareAgent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("When", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? When { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Event FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum EventAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "Converted")]
        Converted = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Copied")]
        Copied = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Created")]
        Created = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cropped")]
        Cropped = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edited")]
        Edited = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Filtered")]
        Filtered = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Formatted")]
        Formatted = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "VersionUpdated")]
        VersionUpdated = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Published")]
        Published = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Managed")]
        Managed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "Produced")]
        Produced = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Resized")]
        Resized = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "Saved")]
        Saved = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Derived")]
        Derived = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class VersionInfo 
    {
        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Event Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ModifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VersionInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpNote 
    {
        [Newtonsoft.Json.JsonProperty("HasExtendedXMP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HasExtendedXMP { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpNote FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpNote>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpRights 
    {
        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Marked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Marked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UsageTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> UsageTerms { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WebStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebStatement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpRights FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpRights>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class XmpTPg 
    {
        [Newtonsoft.Json.JsonProperty("Colorants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<XmpG> Colorants { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Fonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Font> Fonts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxPageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension MaxPageSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NPages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PlateNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PlateNames { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpTPg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpTPg>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Font 
    {
        [Newtonsoft.Json.JsonProperty("ChildFontFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ChildFontFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Composite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Composite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontFace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFamily { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FontType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FontType? FontType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VersionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionString { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Font FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Font>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum FontType
    {
        [System.Runtime.Serialization.EnumMember(Value = "TrueType")]
        TrueType = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Type1")]
        Type1 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OpenType")]
        OpenType = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "OpenTypeCFF")]
        OpenTypeCFF = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ExifMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Exif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Exif Exif { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExifAux", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExifAux ExifAux { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExifMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExifMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Exif 
    {
        [Newtonsoft.Json.JsonProperty("ApertureValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApertureValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrightnessValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrightnessValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CFAPattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CFAPattern CFAPattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorSpace? ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ComponentsConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> ComponentsConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CompressedBitsPerPixel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompressedBitsPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Contrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Contrast? Contrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CustomRendered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomRendered? CustomRendered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateTimeOriginal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTimeOriginal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DateTimeDigitized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTimeDigitized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DeviceSettingDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceSettings DeviceSettingDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DigitalZoomRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalZoomRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExifVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExifVersion? ExifVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureBiasValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureBiasValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExposureMode? ExposureMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExposureProgram? ExposureProgram { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExposureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileSource? FileSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Flash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Flash Flash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FlashEnergy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlashEnergy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FlashpixVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlashpixVersion? FlashpixVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalLengthIn35mmFilm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FocalLengthIn35mmFilm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalPlaneResolutionUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FocalPlaneResolutionUnit? FocalPlaneResolutionUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalPlaneXResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPlaneXResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FocalPlaneYResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPlaneYResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GainControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GainControl? GainControl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSAltitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSAltitudeRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSAltitudeRef? GPSAltitudeRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSAreaInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSAreaInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestBearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestBearing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestBearingRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSDestBearingRef? GPSDestBearingRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestDistanceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSDestDistanceRef? GPSDestDistanceRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestLatitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDestLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDestLongitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDifferential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSDifferential? GPSDifferential { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSDOP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSDOP { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSImgDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSImgDirection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSImgDirectionRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSImgDirectionRef? GPSImgDirectionRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSCoordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSCoordinate GPSCoordinate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSLatitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSLongitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSMapDatum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSMapDatum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSMeasureMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSMeasureMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSProcessingMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSProcessingMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSSatellites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSSatellites { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSSpeedRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSSpeedRef? GPSSpeedRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSStatus? GPSStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? GPSTimeStamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSTrack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSTrack { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSTrackRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSTrackRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("GPSVersionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GPSVersionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageUniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUniqueID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ISOSpeedRatings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> ISOSpeedRatings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LightSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LightSource? LightSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxApertureValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxApertureValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MeteringMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeteringMode? MeteringMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OECF", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OECF OECF { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelXDimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PixelXDimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelYDimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PixelYDimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RelatedSoundFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedSoundFile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Saturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Saturation? Saturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SceneCaptureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SceneCaptureType? SceneCaptureType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SceneType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SceneType? SceneType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SensingMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SensingMethod? SensingMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sharpness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sharpness? Sharpness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShutterSpeedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShutterSpeedValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpatialFrequencyResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SFR SpatialFrequencyResponse { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpectralSensitivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpectralSensitivity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> SubjectArea { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubjectDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectDistanceRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubjectDistanceRange? SubjectDistanceRange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubjectLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> SubjectLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UserComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> UserComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WhiteBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WhiteBalanceExif? WhiteBalance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NativeDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Exif FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Exif>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class CFAPattern 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Values { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CFAPattern FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CFAPattern>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ColorSpace
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "sRGB")]
        SRGB = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "AdobeRGB")]
        AdobeRGB = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Uncalibrated")]
        Uncalibrated = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Contrast
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Soft")]
        Soft = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hard")]
        Hard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum CustomRendered
    {
        [System.Runtime.Serialization.EnumMember(Value = "NormalProcess")]
        NormalProcess = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomProcess")]
        CustomProcess = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DeviceSettings 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Settings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeviceSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeviceSettings>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ExifVersion
    {
        [System.Runtime.Serialization.EnumMember(Value = "V210")]
        V210 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "V220")]
        V220 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "V221")]
        V221 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "V222")]
        V222 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "V230")]
        V230 = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ExposureMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "AutoBracket")]
        AutoBracket = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum ExposureProgram
    {
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NormalProgram")]
        NormalProgram = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "AperturePriority")]
        AperturePriority = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ShutterPriority")]
        ShutterPriority = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreativeProgram")]
        CreativeProgram = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActionProgram")]
        ActionProgram = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PortraitMode")]
        PortraitMode = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "LandscapeMode")]
        LandscapeMode = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum FileSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "Other")]
        Other = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransparentScanner")]
        TransparentScanner = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReflexScanner")]
        ReflexScanner = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DSC")]
        DSC = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Flash 
    {
        [Newtonsoft.Json.JsonProperty("Fired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Return", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlashReturn? Return { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlashMode? Mode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Function { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RedEyeMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RedEyeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Flash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Flash>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum FlashReturn
    {
        [System.Runtime.Serialization.EnumMember(Value = "NoStrobeReturnDetection")]
        NoStrobeReturnDetection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "StrobeReturnLightNotDetected")]
        StrobeReturnLightNotDetected = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "StrobeReturnLightDetected")]
        StrobeReturnLightDetected = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum FlashMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CompulsoryFlashFiring")]
        CompulsoryFlashFiring = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CompulsoryFlashSuppression")]
        CompulsoryFlashSuppression = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "AutoMode")]
        AutoMode = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum FlashpixVersion
    {
        [System.Runtime.Serialization.EnumMember(Value = "V100")]
        V100 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "V101")]
        V101 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "V110")]
        V110 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum FocalPlaneResolutionUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inch")]
        Inch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Meter")]
        Meter = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeter")]
        Centimeter = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Millimeter")]
        Millimeter = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Micrometer")]
        Micrometer = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GainControl
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LowGainUp")]
        LowGainUp = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HighGainUp")]
        HighGainUp = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "LowGainDown")]
        LowGainDown = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "HighGainDown")]
        HighGainDown = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GPSAltitudeRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "AboveSeaLevel")]
        AboveSeaLevel = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BelowSeaLevel")]
        BelowSeaLevel = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GPSDestBearingRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "TrueDirection")]
        TrueDirection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MagneticDirection")]
        MagneticDirection = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GPSDestDistanceRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "Kilometers")]
        Kilometers = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Miles")]
        Miles = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Knots")]
        Knots = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GPSDifferential
    {
        [System.Runtime.Serialization.EnumMember(Value = "WithoutCorrection")]
        WithoutCorrection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "WithCorrection")]
        WithCorrection = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GPSImgDirectionRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "TrueDirection")]
        TrueDirection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MagneticDirection")]
        MagneticDirection = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class GPSCoordinate 
    {
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Lon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Lat { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GPSCoordinate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GPSCoordinate>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GPSSpeedRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "KilometersPerHour")]
        KilometersPerHour = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MilesPerHour")]
        MilesPerHour = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Knots")]
        Knots = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum GPSStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "MeasurementInProgress")]
        MeasurementInProgress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MeasurementIsInteroperability")]
        MeasurementIsInteroperability = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum LightSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unidentified")]
        Unidentified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Daylight")]
        Daylight = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Fluorescent")]
        Fluorescent = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Tungsten")]
        Tungsten = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Flash")]
        Flash = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "FineWeather")]
        FineWeather = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "CloudyWeather")]
        CloudyWeather = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shade")]
        Shade = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "DaylightFluorescent")]
        DaylightFluorescent = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "DayWhiteFluorescent")]
        DayWhiteFluorescent = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CoolWhiteFluorescent")]
        CoolWhiteFluorescent = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "WhiteFluorescent")]
        WhiteFluorescent = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardIlluminantA")]
        StandardIlluminantA = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardIlluminantB")]
        StandardIlluminantB = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardIlluminantC")]
        StandardIlluminantC = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "D55Illuminant")]
        D55Illuminant = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "D65Illuminant")]
        D65Illuminant = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "D75Illuminant")]
        D75Illuminant = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "D50Illuminant")]
        D50Illuminant = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "ISOStudioTungsten")]
        ISOStudioTungsten = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "Other")]
        Other = 20,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum MeteringMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unidentified")]
        Unidentified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Average")]
        Average = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CenterWeightedAverage")]
        CenterWeightedAverage = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Spot")]
        Spot = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "MultiSpot")]
        MultiSpot = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pattern")]
        Pattern = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Partial")]
        Partial = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Reserved")]
        Reserved = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Other")]
        Other = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class OECF 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OECF FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OECF>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Saturation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Low")]
        Low = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "High")]
        High = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum SceneCaptureType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Landscape")]
        Landscape = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Portrait")]
        Portrait = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "NightScene")]
        NightScene = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum SceneType
    {
        [System.Runtime.Serialization.EnumMember(Value = "DirectlyPhotographedImage")]
        DirectlyPhotographedImage = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum SensingMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MonochromeArea")]
        MonochromeArea = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneChipColourAreaSensor")]
        OneChipColourAreaSensor = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TwoChipColourAreaSensor")]
        TwoChipColourAreaSensor = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThreeChipColourAreaSensor")]
        ThreeChipColourAreaSensor = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ColourSequentialAreaSensor")]
        ColourSequentialAreaSensor = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "MonochromeLinearArea")]
        MonochromeLinearArea = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "TrilinearSensor")]
        TrilinearSensor = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ColourSequentialLinearSensor")]
        ColourSequentialLinearSensor = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum Sharpness
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Soft")]
        Soft = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hard")]
        Hard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class SFR 
    {
        [Newtonsoft.Json.JsonProperty("Columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SFR FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SFR>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum SubjectDistanceRange
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Macro")]
        Macro = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CloseView")]
        CloseView = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DistantView")]
        DistantView = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum WhiteBalanceExif
    {
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ExifAux 
    {
        [Newtonsoft.Json.JsonProperty("Lens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lens { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExifAux FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExifAux>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AudioMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("AudioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class AudioStream 
    {
        [Newtonsoft.Json.JsonProperty("BitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitRateMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRateMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChannelPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelPositions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SamplingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplingRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StreamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStream>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DocumentMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ApplicationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DocumentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CharacterCount", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CharacterCountWithSpaces", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCountWithSpaces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LineCount", Required = Newtonsoft.Json.Required.Always)]
        public int LineCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SlideCount", Required = Newtonsoft.Json.Required.Always)]
        public int SlideCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ParagraphCount", Required = Newtonsoft.Json.Required.Always)]
        public int ParagraphCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RevisionNumber", Required = Newtonsoft.Json.Required.Always)]
        public int RevisionNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Titles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Titles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageTitles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ImageTitles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EpsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EmbeddedFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FileMetadata> EmbeddedFiles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class EpsMetadata 
    {
        [Newtonsoft.Json.JsonProperty("IsRasterized", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRasterized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInPoints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInPoints { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EpsMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpsMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ImageMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthInInch", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightInInch", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("WidthInCm", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HeightInCm", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ColorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitsPerPixel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BitsPerChannel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerChannel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PixelFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasAlpha", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAlpha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsIndexed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsIndexed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsExtended", Required = Newtonsoft.Json.Required.Always)]
        public bool IsExtended { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HorizontalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double HorizontalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VerticalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double VerticalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalFrames", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.Always)]
        public int TotalUnspecifiedTiffExtraChannels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasExifData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasExifData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasIptcData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasIptcData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasAdobeResourceData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAdobeResourceData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HasXmpData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasXmpData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("UncompressedSizeInBytes", Required = Newtonsoft.Json.Required.Always)]
        public long UncompressedSizeInBytes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class VideoMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OverallBitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallBitrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VideoStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VideoStream> VideoStreams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AudioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class VideoStream 
    {
        [Newtonsoft.Json.JsonProperty("BitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DisplayAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DurationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FrameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FrameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PixelAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StreamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Rotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rotation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStream>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DriveMetadata 
    {
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadataAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class DriveMetadataAudit 
    {
        [Newtonsoft.Json.JsonProperty("Owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Opened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Opened { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadataAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadataAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class OutputItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OutputSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputSource OutputSource { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public enum OutputSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rendered")]
        Rendered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Embedded")]
        Embedded = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileTransfer2AssetCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransfer2AssetCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransfer2AssetCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileTransferPartial2AssetCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FileTransferCreateItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferPartial2AssetCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferPartial2AssetCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileTransferCreateItem 
    {
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MetadataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AssetPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferCreateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferCreateItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("Channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BaseResultOfTransferViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransferViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfTransferViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfTransferViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class TransferSearchResult : BaseResultOfTransferViewItem
    {
        [Newtonsoft.Json.JsonProperty("ElapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileTransferSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("SearchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class BaseResultOfFileTransferViewItem 
    {
        [Newtonsoft.Json.JsonProperty("TotalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FileTransferViewItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfFileTransferViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfFileTransferViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileTransferSearchResult : BaseResultOfFileTransferViewItem
    {
        [Newtonsoft.Json.JsonProperty("ElapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class FileTransferViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileTransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AssetStoreItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssetStoreItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class ChannelViewItem 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MetadataSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MetadataSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtendedSimpleSearchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ExtendedSimpleSearchFields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChannelViewItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChannelViewItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
            
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, value.GetType().Name));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false; 
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            var objectTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType);
            var customAttributes = System.Reflection.CustomAttributeExtensions.GetCustomAttributes(objectTypeInfo);
    
            var knownTypeAttributes = System.Linq.Enumerable.Where(customAttributes, a => a.GetType().Name == "KnownTypeAttribute");
            dynamic knownTypeAttribute = System.Linq.Enumerable.SingleOrDefault(knownTypeAttributes, a => IsKnwonTypeTargetType(a, discriminator));
            if (knownTypeAttribute != null)
                return knownTypeAttribute.Type;
            
            var typeName = objectType.Namespace + "." + discriminator;
            return System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType).Assembly.GetType(typeName);
        }
    
        private bool IsKnwonTypeTargetType(dynamic attribute, string discriminator)
        {
            return attribute?.Type.Name == discriminator;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    public class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public string StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == "206"; }
        }

        public FileResponse(string statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public class ApiException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "9.6.6264.40734")]
    public class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }


}