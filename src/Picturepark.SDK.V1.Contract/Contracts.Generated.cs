//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.7.1.0 (NJsonSchema v9.6.0.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Picturepark.SDK.V1.Contract
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IContentClient
    {
        /// <summary>Update Single - OwnershipTransfer</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The content ownership transfer request update request.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentDetail UpdateTransferOwnership(string contentId, ContentOwnershipTransferRequest updateRequest, int? timeout = null);
    
        /// <summary>Update Single - OwnershipTransfer</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The content ownership transfer request update request.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentDetail> UpdateTransferOwnershipAsync(string contentId, ContentOwnershipTransferRequest updateRequest, int? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Many</summary>
        /// <param name="ids">Comma-separated list of contentIds</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>List of ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Collections.Generic.List<ContentDetail> GetMany(System.Collections.Generic.IEnumerable<string> ids, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Get Many</summary>
        /// <param name="ids">Comma-separated list of contentIds</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List of ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<ContentDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Process many ownership trasnfer request</summary>
        /// <param name="contentsOwnershipTransferRequest">The content ownership transfer request request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess TransferOwnershipMany(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest);
    
        /// <summary>Process many ownership trasnfer request</summary>
        /// <param name="contentsOwnershipTransferRequest">The content ownership transfer request request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> TransferOwnershipManyAsync(ContentsOwnershipTransferRequest contentsOwnershipTransferRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate</summary>
        /// <param name="contentAggregationRequest">The aggregation request.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ObjectAggregationResult Aggregate(ContentAggregationRequest contentAggregationRequest);
    
        /// <summary>Aggregate</summary>
        /// <param name="contentAggregationRequest">The aggregation request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ContentAggregationRequest contentAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate by Channel</summary>
        /// <param name="channelId">The channel id</param>
        /// <param name="contentAggregationRequest">The content aggregation request.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ObjectAggregationResult AggregateByChannel(string channelId, ContentAggregationRequest contentAggregationRequest);
    
        /// <summary>Aggregate by Channel</summary>
        /// <param name="channelId">The channel id</param>
        /// <param name="contentAggregationRequest">The content aggregation request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateByChannelAsync(string channelId, ContentAggregationRequest contentAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Creates a content batch download</summary>
        /// <param name="request">The content batch download request</param>
        /// <returns>ContentBatchDonloadItem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentBatchDownloadItem CreateDownloadLink(ContentBatchDownloadRequest request);
    
        /// <summary>Creates a content batch download</summary>
        /// <param name="request">The content batch download request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentBatchDonloadItem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentBatchDownloadItem> CreateDownloadLinkAsync(ContentBatchDownloadRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create Single</summary>
        /// <param name="createRequest">The content create request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentDetail CreateContent(CreateContentRequest createRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Create Single</summary>
        /// <param name="createRequest">The content create request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentDetail> CreateContentAsync(CreateContentRequest createRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Downloads content in a specific outputformat</summary>
        /// <param name="contentId">The content id</param>
        /// <param name="outputFormatId">The output format id</param>
        /// <param name="range">the range</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        FileResponse Download(string contentId, string outputFormatId, string range = null);
    
        /// <summary>Downloads content in a specific outputformat</summary>
        /// <param name="contentId">The content id</param>
        /// <param name="outputFormatId">The output format id</param>
        /// <param name="range">the range</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string contentId, string outputFormatId, string range = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Thumbnail</summary>
        /// <param name="contentId">The Content id</param>
        /// <param name="size">Thumbnail size. Either small, medium or large</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        FileResponse DownloadThumbnail(string contentId, ThumbnailSize size);
    
        /// <summary>Get Thumbnail</summary>
        /// <param name="contentId">The Content id</param>
        /// <param name="size">Thumbnail size. Either small, medium or large</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadThumbnailAsync(string contentId, ThumbnailSize size, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Download resized content</summary>
        /// <param name="contentId">The Content id</param>
        /// <param name="outputFormatId">The output format id</param>
        /// <param name="width">The content width</param>
        /// <param name="height">The content height</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        FileResponse DownloadResized(string contentId, string outputFormatId, int width, int height);
    
        /// <summary>Download resized content</summary>
        /// <param name="contentId">The Content id</param>
        /// <param name="outputFormatId">The output format id</param>
        /// <param name="width">The content width</param>
        /// <param name="height">The content height</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>HttpResponseMessage</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadResizedAsync(string contentId, string outputFormatId, int width, int height, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Single</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ContentNotFoundException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentDetail Get(string contentId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Get Single</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ContentNotFoundException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentDetail> GetAsync(string contentId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update Single - Metadata</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentDetail UpdateMetadata(string contentId, UpdateContentMetadataRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Update Single - Metadata</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentDetail> UpdateMetadataAsync(string contentId, UpdateContentMetadataRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update Single - Permissions</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The content permission update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentDetail UpdatePermissions(string contentId, UpdateContentPermissionsRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Update Single - Permissions</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="updateRequest">The content permission update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentDetail> UpdatePermissionsAsync(string contentId, UpdateContentPermissionsRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="contentSearchRequest">The content search request.</param>
        /// <returns>ContentSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentSearchResult Search(ContentSearchRequest contentSearchRequest);
    
        /// <summary>Search</summary>
        /// <param name="contentSearchRequest">The content search request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentSearchResult> SearchAsync(ContentSearchRequest contentSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search By Channel</summary>
        /// <param name="channelId">The channel id.</param>
        /// <param name="contentSearchRequest">The content search request.</param>
        /// <returns>ContentSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentSearchResult SearchByChannel(string channelId, ContentSearchRequest contentSearchRequest);
    
        /// <summary>Search By Channel</summary>
        /// <param name="channelId">The channel id.</param>
        /// <param name="contentSearchRequest">The content search request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentSearchResult> SearchByChannelAsync(string channelId, ContentSearchRequest contentSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Deactivates a content</summary>
        /// <param name="contentId">the id of the content to deactivate</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void Deactivate(string contentId, int timeout);
    
        /// <summary>Deactivates a content</summary>
        /// <param name="contentId">the id of the content to deactivate</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeactivateAsync(string contentId, int timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update Single - File</summary>
        /// <param name="contentId">The id of the content to replace</param>
        /// <param name="updateRequest">Update request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess UpdateFile(string contentId, ContentFileUpdateRequest updateRequest);
    
        /// <summary>Update Single - File</summary>
        /// <param name="contentId">The id of the content to replace</param>
        /// <param name="updateRequest">Update request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateFileAsync(string contentId, ContentFileUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Reactivate - Content</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentDetail Reactivate(string contentId, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Reactivate - Content</summary>
        /// <param name="contentId">The content id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the contents's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentDetail> ReactivateAsync(string contentId, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Dactivate Many - Content</summary>
        /// <param name="deactivationRequest">The deactivation request</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess DeactivateMany(ContentDeactivationRequest deactivationRequest);
    
        /// <summary>Dactivate Many - Content</summary>
        /// <param name="deactivationRequest">The deactivation request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeactivateManyAsync(ContentDeactivationRequest deactivationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Reactivate Many - Content</summary>
        /// <param name="reactivationRequest">The content reactivation request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess ReactivateMany(ContentReactivationRequest reactivationRequest);
    
        /// <summary>Reactivate Many - Content</summary>
        /// <param name="reactivationRequest">The content reactivation request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> ReactivateManyAsync(ContentReactivationRequest reactivationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update Many - Metadata</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess UpdateMetadataMany(ContentsMetadataUpdateRequest updateRequest);
    
        /// <summary>Update Many - Metadata</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateMetadataManyAsync(ContentsMetadataUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update by filter - Metadata</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess UpdateMetadataByFilter(FilterContentsMetadataUpdateRequest updateRequest);
    
        /// <summary>Update by filter - Metadata</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateMetadataByFilterAsync(FilterContentsMetadataUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update Many - Permissions</summary>
        /// <param name="updateRequest">The permissions update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess UpdatePermissionsMany(System.Collections.Generic.IEnumerable<UpdateContentPermissionsRequest> updateRequest);
    
        /// <summary>Update Many - Permissions</summary>
        /// <param name="updateRequest">The permissions update request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdatePermissionsManyAsync(System.Collections.Generic.IEnumerable<UpdateContentPermissionsRequest> updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IBusinessProcessClient
    {
        /// <summary>Search</summary>
        /// <param name="businessProcessSearchRequest">The business process request</param>
        /// <returns>BusinessProcessSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcessSearchResult Search(BusinessProcessSearchRequest businessProcessSearchRequest);
    
        /// <summary>Search</summary>
        /// <param name="businessProcessSearchRequest">The business process request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcessSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcessSearchResult> SearchAsync(BusinessProcessSearchRequest businessProcessSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Start</summary>
        /// <param name="processDefinitionId">The process definition id</param>
        /// <param name="request">The start process request</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess Start(string processDefinitionId, StartProcessRequest request);
    
        /// <summary>Start</summary>
        /// <param name="processDefinitionId">The process definition id</param>
        /// <param name="request">The start process request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> StartAsync(string processDefinitionId, StartProcessRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Mark as ended</summary>
        /// <param name="processId">The process id</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void MarkAsEnded(string processId);
    
        /// <summary>Mark as ended</summary>
        /// <param name="processId">The process id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task MarkAsEndedAsync(string processId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Send message</summary>
        /// <param name="processId">The process id</param>
        /// <param name="request">The send message request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void SendMessage(string processId, SendMessageRequest request);
    
        /// <summary>Send message</summary>
        /// <param name="processId">The process id</param>
        /// <param name="request">The send message request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task SendMessageAsync(string processId, SendMessageRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Wait for states</summary>
        /// <param name="processId">The process id</param>
        /// <param name="states">The states to wait for</param>
        /// <param name="timeout">The timeout in ms</param>
        /// <returns>BusinessProcessWaitResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcessWaitResult WaitForStates(string processId, string states, int timeout);
    
        /// <summary>Wait for states</summary>
        /// <param name="processId">The process id</param>
        /// <param name="states">The states to wait for</param>
        /// <param name="timeout">The timeout in ms</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcessWaitResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcessWaitResult> WaitForStatesAsync(string processId, string states, int timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IDocumentHistoryClient
    {
        /// <summary>Search for document history</summary>
        /// <param name="documentHistorySearchRequest">The document history search request</param>
        /// <returns>DocumentHistorySearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        DocumentHistorySearchResult Search(DocumentHistorySearchRequest documentHistorySearchRequest);
    
        /// <summary>Search for document history</summary>
        /// <param name="documentHistorySearchRequest">The document history search request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>DocumentHistorySearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistorySearchResult> SearchAsync(DocumentHistorySearchRequest documentHistorySearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Gets a document history</summary>
        /// <param name="id">The id</param>
        /// <returns>DocumentHistory</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        DocumentHistory Get(string id);
    
        /// <summary>Gets a document history</summary>
        /// <param name="id">The id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>DocumentHistory</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistory> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get document history version</summary>
        /// <param name="id">The id</param>
        /// <param name="version">The version</param>
        /// <returns>DocumentHistory</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        DocumentHistory GetVersion(string id, string version);
    
        /// <summary>Get document history version</summary>
        /// <param name="id">The id</param>
        /// <param name="version">The version</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>DocumentHistory</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistory> GetVersionAsync(string id, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get latest difference of document history</summary>
        /// <param name="id">The id</param>
        /// <param name="oldVersion">The old version</param>
        /// <returns>DocumentHistoryDifference</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        DocumentHistoryDifference GetDifferenceLatest(string id, long oldVersion);
    
        /// <summary>Get latest difference of document history</summary>
        /// <param name="id">The id</param>
        /// <param name="oldVersion">The old version</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>DocumentHistoryDifference</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistoryDifference> GetDifferenceLatestAsync(string id, long oldVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get the difference between tho document history</summary>
        /// <param name="id">The id</param>
        /// <param name="oldVersion">The old version</param>
        /// <param name="newVersion">The new version</param>
        /// <returns>DocumentHistoryDifference</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        DocumentHistoryDifference GetDifference(string id, long oldVersion, long newVersion);
    
        /// <summary>Get the difference between tho document history</summary>
        /// <param name="id">The id</param>
        /// <param name="oldVersion">The old version</param>
        /// <param name="newVersion">The new version</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>DocumentHistoryDifference</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<DocumentHistoryDifference> GetDifferenceAsync(string id, long oldVersion, long newVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IJsonSchemaClient
    {
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IListItemClient
    {
        /// <summary>Create Single</summary>
        /// <param name="listItem">List item create request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>ListItemDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ListItemDetail Create(ListItemCreateRequest listItem, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Create Single</summary>
        /// <param name="listItem">List item create request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ListItemDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemDetail> CreateAsync(ListItemCreateRequest listItem, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete Many</summary>
        /// <param name="ids">The list item id list.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess DeleteMany(System.Collections.Generic.IEnumerable<string> ids = null);
    
        /// <summary>Delete Many</summary>
        /// <param name="ids">The list item id list.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update Many</summary>
        /// <param name="objects">A list of ListItemUpdateRequests.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess UpdateMany(System.Collections.Generic.IEnumerable<ListItemUpdateRequest> objects);
    
        /// <summary>Update Many</summary>
        /// <param name="objects">A list of ListItemUpdateRequests.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateManyAsync(System.Collections.Generic.IEnumerable<ListItemUpdateRequest> objects, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate</summary>
        /// <param name="listItemAggregationRequest">The list item aggregation request.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ObjectAggregationResult Aggregate(ListItemAggregationRequest listItemAggregationRequest);
    
        /// <summary>Aggregate</summary>
        /// <param name="listItemAggregationRequest">The list item aggregation request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ObjectAggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ListItemAggregationRequest listItemAggregationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="listItemSearchRequest">The list item search request.</param>
        /// <returns>List item result set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ListItemSearchResult Search(ListItemSearchRequest listItemSearchRequest);
    
        /// <summary>Search</summary>
        /// <param name="listItemSearchRequest">The list item search request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>List item result set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemSearchResult> SearchAsync(ListItemSearchRequest listItemSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete Single</summary>
        /// <param name="objectId">The list item id.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void Delete(string objectId, int timeout);
    
        /// <summary>Delete Single</summary>
        /// <param name="objectId">The list item id.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string objectId, int timeout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Single</summary>
        /// <param name="listItemId">The list item id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ListItemDetail Get(string listItemId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Get Single</summary>
        /// <param name="listItemId">The list item id.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemDetail> GetAsync(string listItemId, bool resolve, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update Single</summary>
        /// <param name="listItemId">The list item id.</param>
        /// <param name="updateRequest">The list item update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <returns>ListItemDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ListItemDetail Update(string listItemId, ListItemUpdateRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null);
    
        /// <summary>Update Single</summary>
        /// <param name="listItemId">The list item id.</param>
        /// <param name="updateRequest">The list item update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the list item's content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="patterns">Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ListItemDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ListItemDetail> UpdateAsync(string listItemId, ListItemUpdateRequest updateRequest, bool resolve, int? timeout = null, System.Collections.Generic.IEnumerable<string> patterns = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update by filter - Fields</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess UpdateFieldsByFilter(ListItemFieldsFilterUpdateRequest updateRequest);
    
        /// <summary>Update by filter - Fields</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateFieldsByFilterAsync(ListItemFieldsFilterUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update - Fields</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess UpdateFields(ListItemFieldsUpdateRequest updateRequest);
    
        /// <summary>Update - Fields</summary>
        /// <param name="updateRequest">The metadata update request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> UpdateFieldsAsync(ListItemFieldsUpdateRequest updateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Wait For States</summary>
        /// <param name="processId">The business process id.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="states">Comma-separated list of business process states to wait for.</param>
        /// <returns>BusinessProcessWaitResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcessWaitResult WaitForStates(string processId, int timeout, System.Collections.Generic.IEnumerable<string> states = null);
    
        /// <summary>Wait For States</summary>
        /// <param name="processId">The business process id.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="states">Comma-separated list of business process states to wait for.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcessWaitResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcessWaitResult> WaitForStatesAsync(string processId, int timeout, System.Collections.Generic.IEnumerable<string> states = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface ILiveStreamClient
    {
        /// <summary>Search LiveStream</summary>
        /// <param name="liveStreamSearchRequest">The livestream search request</param>
        /// <returns>ObjectSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ObjectSearchResult Search(LiveStreamSearchRequest liveStreamSearchRequest);
    
        /// <summary>Search LiveStream</summary>
        /// <param name="liveStreamSearchRequest">The livestream search request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ObjectSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectSearchResult> SearchAsync(LiveStreamSearchRequest liveStreamSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface ISchemaClient
    {
        /// <summary>Get Many</summary>
        /// <param name="ids">Comma separated list of schema ids</param>
        /// <returns>SchemaDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Collections.Generic.List<SchemaDetail> GetMany(System.Collections.Generic.IEnumerable<string> ids = null);
    
        /// <summary>Get Many</summary>
        /// <param name="ids">Comma separated list of schema ids</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>SchemaDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<SchemaDetail>> GetManyAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create Single</summary>
        /// <param name="schema">The schema create request.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess Create(SchemaCreateRequest schema);
    
        /// <summary>Create Single</summary>
        /// <param name="schema">The schema create request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> CreateAsync(SchemaCreateRequest schema, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Single</summary>
        /// <param name="schemaId">The schema id.</param>
        /// <returns>SchemaDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        SchemaDetail Get(string schemaId);
    
        /// <summary>Get Single</summary>
        /// <param name="schemaId">The schema id.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>SchemaDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<SchemaDetail> GetAsync(string schemaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Exists</summary>
        /// <param name="schemaId">The schema id.</param>
        /// <param name="fieldId">The optional field id.</param>
        /// <returns>ExistsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ExistsResponse Exists(string schemaId, string fieldId);
    
        /// <summary>Exists</summary>
        /// <param name="schemaId">The schema id.</param>
        /// <param name="fieldId">The optional field id.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ExistsResponse</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ExistsResponse> ExistsAsync(string schemaId, string fieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="schemaSearchRequest">The schema search request.</param>
        /// <returns>Schema result set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        SchemaSearchResult Search(SchemaSearchRequest schemaSearchRequest);
    
        /// <summary>Search</summary>
        /// <param name="schemaSearchRequest">The schema search request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Schema result set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<SchemaSearchResult> SearchAsync(SchemaSearchRequest schemaSearchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IPermissionClient
    {
        /// <summary>Get UserRight validation result</summary>
        /// <param name="permission">The UserRight to validate</param>
        /// <returns>Boolean - user has permission</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        bool GetUserPermissions(UserRight permission);
    
        /// <summary>Get UserRight validation result</summary>
        /// <param name="permission">The UserRight to validate</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Boolean - user has permission</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<bool> GetUserPermissionsAsync(UserRight permission, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search Content Permissions</summary>
        /// <param name="request">The permission search request.</param>
        /// <returns>PermissionSetSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        PermissionSetSearchResult SearchContentPermissions(PermissionSetSearchRequest request);
    
        /// <summary>Search Content Permissions</summary>
        /// <param name="request">The permission search request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>PermissionSetSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchContentPermissionsAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Content Permission Single</summary>
        /// <param name="permissionSetId">The content permission set id.</param>
        /// <returns>ContentPermissionSetDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ContentPermissionSetDetail GetContentPermissions(string permissionSetId);
    
        /// <summary>Get Content Permission Single</summary>
        /// <param name="permissionSetId">The content permission set id.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ContentPermissionSetDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ContentPermissionSetDetail> GetContentPermissionsAsync(string permissionSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search Schema Permissions</summary>
        /// <param name="request">The permission search request.</param>
        /// <returns>PermissionSetSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        PermissionSetSearchResult SearchSchemaPermissions(PermissionSetSearchRequest request);
    
        /// <summary>Search Schema Permissions</summary>
        /// <param name="request">The permission search request.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>PermissionSetSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<PermissionSetSearchResult> SearchSchemaPermissionsAsync(PermissionSetSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Schema Permission Single</summary>
        /// <param name="permissionSetId">The schema permission set id.</param>
        /// <returns>SchemaPermissionSetDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        SchemaPermissionSetDetail GetSchemaPermissions(string permissionSetId);
    
        /// <summary>Get Schema Permission Single</summary>
        /// <param name="permissionSetId">The schema permission set id.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>SchemaPermissionSetDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<SchemaPermissionSetDetail> GetSchemaPermissionsAsync(string permissionSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IPublicAccessClient
    {
        /// <summary>Get Version</summary>
        /// <returns>VersionInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        VersionInfo GetVersion();
    
        /// <summary>Get Version</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>VersionInfo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<VersionInfo> GetVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Share</summary>
        /// <param name="token">The token</param>
        /// <returns>ShareBaseDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ShareBaseDetail GetShare(string token);
    
        /// <summary>Get Share</summary>
        /// <param name="token">The token</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>ShareBaseDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareBaseDetail> GetShareAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IShareClient
    {
        /// <summary>Update single</summary>
        /// <param name="id">The share id.</param>
        /// <param name="updateRequest">The share update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the shares content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <returns>Share</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BaseResultOfShareBase Update(string id, ShareBaseUpdateRequest updateRequest, bool resolve, int? timeout = null);
    
        /// <summary>Update single</summary>
        /// <param name="id">The share id.</param>
        /// <param name="updateRequest">The share update request.</param>
        /// <param name="resolve">Resolves the data of referenced list items into the shares content.</param>
        /// <param name="timeout">Maximum time in milliseconds to wait for the business process completed state.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Share</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BaseResultOfShareBase> UpdateAsync(string id, ShareBaseUpdateRequest updateRequest, bool resolve, int? timeout = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get single</summary>
        /// <param name="id">Share Id (not token, use PublicAccess to get share by token)</param>
        /// <returns>Polymorph share</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ShareBaseDetail Get(string id);
    
        /// <summary>Get single</summary>
        /// <param name="id">Share Id (not token, use PublicAccess to get share by token)</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Polymorph share</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareBaseDetail> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete many</summary>
        /// <param name="shareIds">A list of ListItemCreateRequests.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        BusinessProcess DeleteMany(System.Collections.Generic.IEnumerable<string> shareIds);
    
        /// <summary>Delete many</summary>
        /// <param name="shareIds">A list of ListItemCreateRequests.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>BusinessProcess</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<BusinessProcess> DeleteManyAsync(System.Collections.Generic.IEnumerable<string> shareIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Aggregate</summary>
        /// <param name="request">Aggregation request</param>
        /// <returns>AggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ObjectAggregationResult Aggregate(ShareAggregationRequest request);
    
        /// <summary>Aggregate</summary>
        /// <param name="request">Aggregation request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>AggregationResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ObjectAggregationResult> AggregateAsync(ShareAggregationRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create single</summary>
        /// <param name="request">Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest</param>
        /// <returns>Create result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ContentNotFoundException">Submited content could not be found</exception>
        /// <exception cref="PermissionException">No permission to share content</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        CreateShareResult Create(ShareBaseCreateRequest request);
    
        /// <summary>Create single</summary>
        /// <param name="request">Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Create result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="ContentNotFoundException">Submited content could not be found</exception>
        /// <exception cref="PermissionException">No permission to share content</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<CreateShareResult> CreateAsync(ShareBaseCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="request">Search request</param>
        /// <returns>Share search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        ShareSearchResult Search(ShareSearchRequest request);
    
        /// <summary>Search</summary>
        /// <param name="request">Search request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Share search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<ShareSearchResult> SearchAsync(ShareSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface ITransferClient
    {
        /// <summary>Delete Files</summary>
        /// <param name="request">The filetransfer delete request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void DeleteFiles(FileTransferDeleteRequest request);
    
        /// <summary>Delete Files</summary>
        /// <param name="request">The filetransfer delete request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteFilesAsync(FileTransferDeleteRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Blacklist</summary>
        /// <returns>Blacklist</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        Blacklist GetBlacklist();
    
        /// <summary>Get Blacklist</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Blacklist</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Blacklist> GetBlacklistAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Cancels an active transfer. Valid states: TODO</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void CancelTransfer(string transferId);
    
        /// <summary>Cancels an active transfer. Valid states: TODO</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task CancelTransferAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create Transfer</summary>
        /// <param name="request">The create transfer request</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        Transfer Create(CreateTransferRequest request);
    
        /// <summary>Create Transfer</summary>
        /// <param name="request">The create transfer request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Transfer> CreateAsync(CreateTransferRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete Transfer</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void Delete(string transferId);
    
        /// <summary>Delete Transfer</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task DeleteAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Transferdetail</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <returns>TransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        TransferDetail Get(string transferId);
    
        /// <summary>Get Transferdetail</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>TransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<TransferDetail> GetAsync(string transferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get File</summary>
        /// <param name="fileTransferId">The filetransfer id</param>
        /// <returns>FileTransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        FileTransferDetail GetFile(string fileTransferId);
    
        /// <summary>Get File</summary>
        /// <param name="fileTransferId">The filetransfer id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>FileTransferDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileTransferDetail> GetFileAsync(string fileTransferId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Delete Transfer</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <param name="request">The filetransfer to content create request</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        Transfer ImportTransfer(string transferId, FileTransfer2ContentCreateRequest request);
    
        /// <summary>Delete Transfer</summary>
        /// <param name="transferId">The tranfer id</param>
        /// <param name="request">The filetransfer to content create request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Transfer</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Transfer> ImportTransferAsync(string transferId, FileTransfer2ContentCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Create a partial import</summary>
        /// <param name="transferId">The transfer id</param>
        /// <param name="request">The filetransfer partial to content create request</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        Transfer PartialImport(string transferId, FileTransferPartial2ContentCreateRequest request);
    
        /// <summary>Create a partial import</summary>
        /// <param name="transferId">The transfer id</param>
        /// <param name="request">The filetransfer partial to content create request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<Transfer> PartialImportAsync(string transferId, FileTransferPartial2ContentCreateRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search</summary>
        /// <param name="request">The transfer search request</param>
        /// <returns>TransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        TransferSearchResult Search(TransferSearchRequest request);
    
        /// <summary>Search</summary>
        /// <param name="request">The transfer search request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>TransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<TransferSearchResult> SearchAsync(TransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Search for files</summary>
        /// <param name="request">The file transfer search request</param>
        /// <returns>FileTransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        FileTransferSearchResult SearchFiles(FileTransferSearchRequest request);
    
        /// <summary>Search for files</summary>
        /// <param name="request">The file transfer search request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>FileTransferSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<FileTransferSearchResult> SearchFilesAsync(FileTransferSearchRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Upload file</summary>
        /// <param name="formFile">Gets or sets the form file.</param>
        /// <param name="relativePath">Relative path of the uploading file</param>
        /// <param name="chunkNumber">Current chunk number. starts with 1</param>
        /// <param name="currentChunkSize">Size in bytes of the current chunk</param>
        /// <param name="totalSize">Total size in bytes of the uploading file</param>
        /// <param name="totalChunks">Total chunks of the uploading file</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        void UploadFile(string transferId, string identifier, FileParameter formFile = null, string relativePath = null, long? chunkNumber = null, long? currentChunkSize = null, long? totalSize = null, long? totalChunks = null);
    
        /// <summary>Upload file</summary>
        /// <param name="formFile">Gets or sets the form file.</param>
        /// <param name="relativePath">Relative path of the uploading file</param>
        /// <param name="chunkNumber">Current chunk number. starts with 1</param>
        /// <param name="currentChunkSize">Size in bytes of the current chunk</param>
        /// <param name="totalSize">Total size in bytes of the uploading file</param>
        /// <param name="totalChunks">Total chunks of the uploading file</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task UploadFileAsync(string transferId, string identifier, FileParameter formFile = null, string relativePath = null, long? chunkNumber = null, long? currentChunkSize = null, long? totalSize = null, long? totalChunks = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IUserClient
    {
        /// <summary>Search for users</summary>
        /// <param name="searchRequest">The user search request</param>
        /// <returns>UserSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        UserSearchResult Search(UserSearchRequest searchRequest);
    
        /// <summary>Search for users</summary>
        /// <param name="searchRequest">The user search request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>UserSearchResult</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserSearchResult> SearchAsync(UserSearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Userdetail by id</summary>
        /// <param name="userId">The user id</param>
        /// <returns>UserDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        UserDetail GetUser(string userId);
    
        /// <summary>Get Userdetail by id</summary>
        /// <param name="userId">The user id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>UserDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserDetail> GetUserAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get userdetail by owner token</summary>
        /// <param name="tokenId">The token id</param>
        /// <returns>UserDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        UserDetail GetByOwnerToken(string tokenId);
    
        /// <summary>Get userdetail by owner token</summary>
        /// <param name="tokenId">The token id</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>UserDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserDetail> GetByOwnerTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get List of Channels</summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Collections.Generic.List<Channel> GetChannels();
    
        /// <summary>Get List of Channels</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<Channel>> GetChannelsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IOutputClient
    {
        /// <summary>Get outputs by contentIds</summary>
        /// <param name="contentsByIdsRequest">Contains the list of contentIds for which the outputs are requested</param>
        /// <returns>The Result containing a list of OutputDetail's</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Collections.Generic.List<OutputDetail> GetByContentIds(ContentsByIdsRequest contentsByIdsRequest);
    
        /// <summary>Get outputs by contentIds</summary>
        /// <param name="contentsByIdsRequest">Contains the list of contentIds for which the outputs are requested</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The Result containing a list of OutputDetail's</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.List<OutputDetail>> GetByContentIdsAsync(ContentsByIdsRequest contentsByIdsRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Get Single</summary>
        /// <param name="outputId">The output id.</param>
        /// <returns>OutputDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="OutputNotFoundException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        OutputDetail Get(string outputId);
    
        /// <summary>Get Single</summary>
        /// <param name="outputId">The output id.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OutputDetail</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="OutputNotFoundException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<OutputDetail> GetAsync(string outputId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public partial interface IProfileClient
    {
        /// <summary>Get</summary>
        /// <returns>UserProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        UserProfile Get();
    
        /// <summary>Get</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>UserProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserProfile> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <summary>Update</summary>
        /// <returns>UserProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        UserProfile Update(UserProfile profile);
    
        /// <summary>Update</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>UserProfile</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        /// <exception cref="PictureparkException">Internal server error</exception>
        System.Threading.Tasks.Task<UserProfile> UpdateAsync(UserProfile profile, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentOwnershipTransferRequest 
    {
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        /// <summary>The id of the user to whom the content document has to be transfered to.</summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentOwnershipTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentOwnershipTransferRequest>(data);
        }
    }
    
    /// <summary>A content detail.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentDetail 
    {
        /// <summary>Audit data with information regarding document creation and modification.</summary>
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        /// <summary>The content data</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentPermissionSetIds { get; set; }
    
        /// <summary>The id of the content schema</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>The type of content</summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the content schema's
        ///              display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        /// <summary>The entity type</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>An optional list of layer schemas ids</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        /// <summary>The metadata dictionary</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>A list of rendering ouputs for underlying digital file.</summary>
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Output> Outputs { get; set; }
    
        /// <summary>The id of a owner token. Defines the content owner.</summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenId { get; set; }
    
        /// <summary>The trashed flag.</summary>
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserAudit 
    {
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime CreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatedByUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ContentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Bitmap")]
        Bitmap = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VectorGraphic")]
        VectorGraphic = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "RawImage")]
        RawImage = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "InterchangeDocument")]
        InterchangeDocument = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "WordProcessingDocument")]
        WordProcessingDocument = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "TextDocument")]
        TextDocument = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "DesktopPublishingDocument")]
        DesktopPublishingDocument = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Presentation")]
        Presentation = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Spreadsheet")]
        Spreadsheet = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Archive")]
        Archive = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "Audio")]
        Audio = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Video")]
        Video = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "Font")]
        Font = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Multimedia")]
        Multimedia = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "Application")]
        Application = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SourceCode")]
        SourceCode = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "Database")]
        Database = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cad")]
        Cad = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "Model3d")]
        Model3d = 19,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DisplayValueDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DisplayValueDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayValueDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum EntityType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Content")]
        Content = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BasicShare")]
        BasicShare = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "EmbedShare")]
        EmbedShare = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Metadata")]
        Metadata = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "FileTransfer")]
        FileTransfer = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DataDictionary : System.Collections.Generic.Dictionary<string, object>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DataDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DataDictionary>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OutputDetail", typeof(OutputDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Output 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OutputDetailBase Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Output FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Output>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("OutputDetailImage", typeof(OutputDetailImage))]
    [JsonInheritanceAttribute("OutputDetailAudio", typeof(OutputDetailAudio))]
    [JsonInheritanceAttribute("OutputDetailVideo", typeof(OutputDetailVideo))]
    [JsonInheritanceAttribute("OutputDetailDocument", typeof(OutputDetailDocument))]
    [JsonInheritanceAttribute("OutputDetailDefault", typeof(OutputDetailDefault))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputDetailBase 
    {
        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputDetailImage : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailImage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailImage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputDetailAudio : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DurationInSeconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailAudio FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailAudio>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputDetailVideo : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sprites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Sprite> Sprites { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailVideo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailVideo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Sprite 
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }
    
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.TimeSpan Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.TimeSpan End { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Sprite FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sprite>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputDetailDocument : OutputDetailBase
    {
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailDocument>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputDetailDefault : OutputDetailBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetailDefault FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetailDefault>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputDetail : Output
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputDetail>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ContentNotFoundException", typeof(ContentNotFoundException))]
    [JsonInheritanceAttribute("PermissionException", typeof(PermissionException))]
    [JsonInheritanceAttribute("OutputNotFoundException", typeof(OutputNotFoundException))]
    [JsonInheritanceAttribute("PictureparkApplicationException", typeof(PictureparkApplicationException))]
    [JsonInheritanceAttribute("PictureparkBusinessException", typeof(PictureparkBusinessException))]
    [JsonInheritanceAttribute("PictureparkArgumentNullException", typeof(PictureparkArgumentNullException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionCreateException", typeof(BusinessProcessDefinitionCreateException))]
    [JsonInheritanceAttribute("BusinessProcessDefinitionNotFoundException", typeof(BusinessProcessDefinitionNotFoundException))]
    [JsonInheritanceAttribute("BusinessProcessNotFoundException", typeof(BusinessProcessNotFoundException))]
    [JsonInheritanceAttribute("CustomerHostNotFoundException", typeof(CustomerHostNotFoundException))]
    [JsonInheritanceAttribute("CustomerNotFoundException", typeof(CustomerNotFoundException))]
    [JsonInheritanceAttribute("DocumentNotFoundException", typeof(DocumentNotFoundException))]
    [JsonInheritanceAttribute("DocumentVersionNotFoundException", typeof(DocumentVersionNotFoundException))]
    [JsonInheritanceAttribute("DriveRequestException", typeof(DriveRequestException))]
    [JsonInheritanceAttribute("DuplicateRightException", typeof(DuplicateRightException))]
    [JsonInheritanceAttribute("DuplicateDocumentException", typeof(DuplicateDocumentException))]
    [JsonInheritanceAttribute("DuplicateAggregatorException", typeof(DuplicateAggregatorException))]
    [JsonInheritanceAttribute("FailedToLockException", typeof(FailedToLockException))]
    [JsonInheritanceAttribute("IndexException", typeof(IndexException))]
    [JsonInheritanceAttribute("InvalidArgumentException", typeof(InvalidArgumentException))]
    [JsonInheritanceAttribute("InvalidCustomerException", typeof(InvalidCustomerException))]
    [JsonInheritanceAttribute("PictureparkInvalidMetadataException", typeof(PictureparkInvalidMetadataException))]
    [JsonInheritanceAttribute("InvalidStateTransitionException", typeof(InvalidStateTransitionException))]
    [JsonInheritanceAttribute("InvalidStateException", typeof(InvalidStateException))]
    [JsonInheritanceAttribute("InvalidUserOrPasswordException", typeof(InvalidUserOrPasswordException))]
    [JsonInheritanceAttribute("PictureparkMappingException", typeof(PictureparkMappingException))]
    [JsonInheritanceAttribute("MessagePerformerTaskCanceledException", typeof(MessagePerformerTaskCanceledException))]
    [JsonInheritanceAttribute("NotFoundException", typeof(NotFoundException))]
    [JsonInheritanceAttribute("ObjectStoreException", typeof(ObjectStoreException))]
    [JsonInheritanceAttribute("ObjectStoreResponseException", typeof(ObjectStoreResponseException))]
    [JsonInheritanceAttribute("PictureparkOperationCanceledException", typeof(PictureparkOperationCanceledException))]
    [JsonInheritanceAttribute("OperationTimeoutException", typeof(OperationTimeoutException))]
    [JsonInheritanceAttribute("QueryException", typeof(QueryException))]
    [JsonInheritanceAttribute("RenderingException", typeof(RenderingException))]
    [JsonInheritanceAttribute("RenderingJobItemNotSetException", typeof(RenderingJobItemNotSetException))]
    [JsonInheritanceAttribute("ServiceProviderCreateException", typeof(ServiceProviderCreateException))]
    [JsonInheritanceAttribute("ServiceProviderDeleteException", typeof(ServiceProviderDeleteException))]
    [JsonInheritanceAttribute("ServiceProviderNotFoundException", typeof(ServiceProviderNotFoundException))]
    [JsonInheritanceAttribute("TokenValidationException", typeof(TokenValidationException))]
    [JsonInheritanceAttribute("UnknownException", typeof(UnknownException))]
    [JsonInheritanceAttribute("UserNotFoundException", typeof(UserNotFoundException))]
    [JsonInheritanceAttribute("UserPermanentlyRemovedException", typeof(UserPermanentlyRemovedException))]
    [JsonInheritanceAttribute("UserRoleAssignedException", typeof(UserRoleAssignedException))]
    [JsonInheritanceAttribute("UserRolesRightsAssignedException", typeof(UserRolesRightsAssignedException))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PictureparkException : System.Exception
    {
        [Newtonsoft.Json.JsonProperty("traceLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceLevel TraceLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("httpStatusCode", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatusCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TraceLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Critical")]
        Critical = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Information")]
        Information = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PictureparkBusinessException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerAlias { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkBusinessException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkBusinessException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PictureparkApplicationException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkApplicationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkApplicationException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PictureparkArgumentNullException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkArgumentNullException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkArgumentNullException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessDefinitionCreateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ProcessDefinitionIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDefinitionCreateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionCreateException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessDefinitionNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessDefinitionNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessDefinitionNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CustomerHostNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerHostNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerHostNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CustomerNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CustomerNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DocumentNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DocumentVersionNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentVersion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentVersionNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersionNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DriveRequestException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveRequestException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveRequestException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DuplicateRightException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("permissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PermissionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateRightException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateRightException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DuplicateDocumentException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateDocumentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateDocumentException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DuplicateAggregatorException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("aggregatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregatorName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DuplicateAggregatorException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DuplicateAggregatorException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FailedToLockException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FailedToLockException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FailedToLockException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class IndexException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IndexException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IndexException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class InvalidArgumentException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("argumentName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("argumentValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArgumentValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidArgumentException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidArgumentException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class InvalidCustomerException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidCustomerException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidCustomerException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PictureparkInvalidMetadataException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("metadataErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataError> MetadataErrors { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkInvalidMetadataException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkInvalidMetadataException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataError 
    {
        [Newtonsoft.Json.JsonProperty("errorType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lineNumber", Required = Newtonsoft.Json.Required.Always)]
        public int LineNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("linePosition", Required = Newtonsoft.Json.Required.Always)]
        public int LinePosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataError>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class InvalidStateException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidStateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class InvalidStateTransitionException : InvalidStateException
    {
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transition { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidStateTransitionException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidStateTransitionException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class InvalidUserOrPasswordException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InvalidUserOrPasswordException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InvalidUserOrPasswordException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PictureparkMappingException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("indexName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkMappingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkMappingException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MessagePerformerTaskCanceledException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("messageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MessagePerformerTaskCanceledException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MessagePerformerTaskCanceledException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ObjectStoreException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectStoreException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ObjectStoreResponseException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("rowErrorMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RowErrorMessages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectStoreResponseException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectStoreResponseException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PictureparkOperationCanceledException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PictureparkOperationCanceledException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PictureparkOperationCanceledException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OperationTimeoutException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OperationTimeoutException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationTimeoutException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class QueryException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("debugInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DebugInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serverError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageServerError ServerError { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static QueryException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<QueryException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class StorageServerError 
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageError Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageServerError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageServerError>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class StorageError 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rootCause", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StorageRootCause> RootCause { get; set; }
    
        [Newtonsoft.Json.JsonProperty("causedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageCausedBy CausedBy { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageError>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class StorageRootCause 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageRootCause FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageRootCause>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class StorageCausedBy 
    {
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("innerCausedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageCausedBy InnerCausedBy { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StorageCausedBy FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageCausedBy>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RenderingException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RenderingException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RenderingJobItemNotSetException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RenderingJobItemNotSetException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RenderingJobItemNotSetException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ServiceProviderCreateException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("virtualHost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VirtualHost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detailErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderCreateException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderCreateException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ServiceProviderDeleteException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detailedErrorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedErrorMessage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderDeleteException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderDeleteException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ServiceProviderNotFoundException : PictureparkException
    {
        [Newtonsoft.Json.JsonProperty("missingServiceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingServiceProviderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ServiceProviderNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceProviderNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TokenValidationException : PictureparkBusinessException
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TokenValidationException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenValidationException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UnknownException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("exceptionDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionDetail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UnknownException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnknownException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserNotFoundException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("missingUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissingUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserNotFoundException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserNotFoundException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserPermanentlyRemovedException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("removedUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemovedUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserPermanentlyRemovedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPermanentlyRemovedException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserRoleAssignedException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRoleAssignedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRoleAssignedException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserRolesRightsAssignedException : PictureparkBusinessException
    {
        [Newtonsoft.Json.JsonProperty("contentPermissionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentPermissionSetId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRolesRightsAssignedException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRolesRightsAssignedException>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentsOwnershipTransferRequest 
    {
        /// <summary>The content ids.</summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentIds { get; set; }
    
        /// <summary>The id of user to whom the content documents have to be transfered to.</summary>
        [Newtonsoft.Json.JsonProperty("transferUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferUserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsOwnershipTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsOwnershipTransferRequest>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("BusinessProcessBulkResponse", typeof(BusinessProcessBulkResponse))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcess 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processDefinitionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceDocType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceDocType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notificationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcessScope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessScope BusinessProcessScope { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lifeCycle", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BusinessProcessLifeCylce LifeCycle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime StartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime EndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stateHistory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BusinessProcessStateItem> StateHistory { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processDefinitionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessDefinitionName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentState { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcess FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcess>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum BusinessProcessScope
    {
        [System.Runtime.Serialization.EnumMember(Value = "System")]
        System = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum BusinessProcessLifeCylce
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Started")]
        Started = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Ended")]
        Ended = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cancelled")]
        Cancelled = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessStateItem 
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessStateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessStateItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ErrorResponse 
    {
        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exception { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("traceJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceJobId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessBulkResponse : BusinessProcess
    {
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkResponse Response { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessBulkResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessBulkResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BulkResponse 
    {
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BulkResponseRow> Rows { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BulkResponseRow 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        public long Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("succeeded", Required = Newtonsoft.Json.Required.Always)]
        public bool Succeeded { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BulkResponseRow FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkResponseRow>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentAggregationRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Special filters used to filter down on a specific aggregated value.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationFilter> AggregationFilters { get; set; }
    
        /// <summary>Defines the aggregation resultset.</summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        /// <summary>Limits the simple search fields to the fields available in the specified channel.</summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelId { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to x-default.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages in configured within the customer's language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        /// <summary>The collection id.</summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        /// <summary>Limits the content document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        /// <summary>Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.</summary>
        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentAggregationRequest>(data);
        }
    }
    
    /// <summary>The FilterBase is the base class for all filters.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AggregationFilter", typeof(AggregationFilter))]
    [JsonInheritanceAttribute("AndFilter", typeof(AndFilter))]
    [JsonInheritanceAttribute("OrFilter", typeof(OrFilter))]
    [JsonInheritanceAttribute("NotFilter", typeof(NotFilter))]
    [JsonInheritanceAttribute("DateRangeFilter", typeof(DateRangeFilter))]
    [JsonInheritanceAttribute("ExistsFilter", typeof(ExistsFilter))]
    [JsonInheritanceAttribute("GeoBoundingBoxFilter", typeof(GeoBoundingBoxFilter))]
    [JsonInheritanceAttribute("GeoDistanceFilter", typeof(GeoDistanceFilter))]
    [JsonInheritanceAttribute("GeoDistanceRangeFilter", typeof(GeoDistanceRangeFilter))]
    [JsonInheritanceAttribute("NestedFilter", typeof(NestedFilter))]
    [JsonInheritanceAttribute("NumericRangeFilter", typeof(NumericRangeFilter))]
    [JsonInheritanceAttribute("PrefixFilter", typeof(PrefixFilter))]
    [JsonInheritanceAttribute("TermFilter", typeof(TermFilter))]
    [JsonInheritanceAttribute("TermsFilter", typeof(TermsFilter))]
    [JsonInheritanceAttribute("ChildFilter", typeof(ChildFilter))]
    [JsonInheritanceAttribute("ParentFilter", typeof(ParentFilter))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FilterBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterBase>(data);
        }
    }
    
    /// <summary>The AndFilter> is a compound filter and returns documents that match all of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AndFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AndFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AndFilter>(data);
        }
    }
    
    /// <summary>The OrFilter is a compound filter and returns documents that match any of the specified filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OrFilter : FilterBase
    {
        /// <summary>Accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FilterBase> Filters { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OrFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrFilter>(data);
        }
    }
    
    /// <summary>The NotFilter is a compound filter and returns documents that do not match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NotFilter : FilterBase
    {
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NotFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotFilter>(data);
        }
    }
    
    /// <summary>The DateRangeFilter returns documents with fields that have date values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DateRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The date range. Supported pattern: now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilter>(data);
        }
    }
    
    /// <summary>The date range class used in aggregators and filters.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DateRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
        /// <summary>The to value can be a datetime string or a pattern now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRange>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TranslatedStringDictionary : System.Collections.Generic.Dictionary<string, string>
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TranslatedStringDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TranslatedStringDictionary>(data);
        }
    }
    
    /// <summary>The ExistsFilter returns documents that have at least one non-null value in the original field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ExistsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsFilter>(data);
        }
    }
    
    /// <summary>The GeoBoundingBoxFilter returns documents that are found based on a point location using a bounding box.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class GeoBoundingBoxFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The top left longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("topLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation TopLeft { get; set; }
    
        /// <summary>The bottom right longitude/latitude configuration.</summary>
        [Newtonsoft.Json.JsonProperty("bottomRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation BottomRight { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoBoundingBoxFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoBoundingBoxFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class GeoLocation 
    {
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Always)]
        public double Lat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Always)]
        public double Lon { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoLocation>(data);
        }
    }
    
    /// <summary>The GeoDistanceRangeFilter returns documents that include only hits that exists within a specific distance from a geo point.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class GeoDistanceFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The longitude/latitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>The range distance in meters.</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Always)]
        public double Distance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceFilter>(data);
        }
    }
    
    /// <summary>The GeoDistanceRangeFilter returns documents that exists within a range from a specific point.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class GeoDistanceRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The longitude/latitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>The numeric range.</summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceRangeFilter>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NumericRange 
    {
        /// <summary>Tranlsated range names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>The from value.</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? From { get; set; }
    
        /// <summary>The to value.</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? To { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRange>(data);
        }
    }
    
    /// <summary>The NestedFilter is a joining filter and returns documents whose nested objects / documents (see nested mapping) match the specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NestedFilter : FilterBase
    {
        /// <summary>The path pointing to the nested object.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedFilter>(data);
        }
    }
    
    /// <summary>The NumericRangeFilter returns documents with fields that have numeric values within a certain range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NumericRangeFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The numeric range with from and to properties.</summary>
        [Newtonsoft.Json.JsonProperty("range", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NumericRange Range { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeFilter>(data);
        }
    }
    
    /// <summary>The PrefixFilter returns documents that have fields containing terms with a specified prefix (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PrefixFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The prefix term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PrefixFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PrefixFilter>(data);
        }
    }
    
    /// <summary>The TermFilter returns documents that contain the exact term specified in the inverted index.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TermFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The term to filter on.</summary>
        [Newtonsoft.Json.JsonProperty("term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Term { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermFilter>(data);
        }
    }
    
    /// <summary>The TermsFilter returns documents that have fields that match any of the provided terms (not analyzed).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TermsFilter : FilterBase
    {
        /// <summary>The elastic search index field to execute the filter on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of OR combined terms.</summary>
        [Newtonsoft.Json.JsonProperty("terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Terms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsFilter>(data);
        }
    }
    
    /// <summary>An AggregationFilter is provided with each aggregated value. When selecting the aggregated value the aggregation filter is added to the search query and returns doucments meeting the aggregation condition.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AggregationFilter : FilterBase
    {
        /// <summary>The name of the aggregation this filter is connected to.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AggregationName { get; set; }
    
        /// <summary>The aggregation filter property. Available filters are TermFilter, DateRangeFilter, NumericRangeFilter and GeoDistanceRangeFilter.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("temporaryAggregatorRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemporaryAggregatorRequestId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationFilter>(data);
        }
    }
    
    /// <summary>The ChildFilter allows to apply filters on child documents and returns documents that match the specified filter on the child document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ChildFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a child.</summary>
        [Newtonsoft.Json.JsonProperty("childType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChildType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ChildFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChildFilter>(data);
        }
    }
    
    /// <summary>The ParentFilter allows to apply filters on parent documents and returns documents that match the specified filter on the parent document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ParentFilter : FilterBase
    {
        /// <summary>The elastic search index type to filter as a parent.</summary>
        [Newtonsoft.Json.JsonProperty("parentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentType { get; set; }
    
        /// <summary>The filter to apply on the child entity. It accepts all filters.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParentFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParentFilter>(data);
        }
    }
    
    /// <summary>The AggregatorBase is the base class for all aggregators.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("DateRangeAggregator", typeof(DateRangeAggregator))]
    [JsonInheritanceAttribute("FilterAggregator", typeof(FilterAggregator))]
    [JsonInheritanceAttribute("GeoDistanceAggregator", typeof(GeoDistanceAggregator))]
    [JsonInheritanceAttribute("NestedAggregator", typeof(NestedAggregator))]
    [JsonInheritanceAttribute("NumericRangeAggregator", typeof(NumericRangeAggregator))]
    [JsonInheritanceAttribute("TermsAggregator", typeof(TermsAggregator))]
    [JsonInheritanceAttribute("TermsRelationAggregator", typeof(TermsRelationAggregator))]
    [JsonInheritanceAttribute("TermsEnumAggregator", typeof(TermsEnumAggregator))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AggregatorBase 
    {
        /// <summary>The slug name of the aggregation. Must be unique per aggregation request.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The translated names of the aggregation.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>An optional aggregator list for nested aggregations.</summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregatorBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregatorBase>(data);
        }
    }
    
    /// <summary>The DateRangeAggregator is a multi-bucket range aggregation dedicated for date values. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DateRangeAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of date ranges. Supported pattern: now(+-)(int)(YMDHm).</summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DateRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DateRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeAggregator>(data);
        }
    }
    
    /// <summary>The FilterAggregator is a single bucket aggregation of documents that match a specified filter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FilterAggregator : AggregatorBase
    {
        /// <summary>Limits the result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterAggregator>(data);
        }
    }
    
    /// <summary>The GeoDistanceAggregator is a multi-bucket range aggregation that works on geo_point fields. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class GeoDistanceAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The latitude/logitude configuration for the point of origin.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoLocation Location { get; set; }
    
        /// <summary>A list of numeric ranges in meter.</summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NumericRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GeoDistanceAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GeoDistanceAggregator>(data);
        }
    }
    
    /// <summary>The NestedAggregator is a special single bucket aggregation that enables aggregating nested documents.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NestedAggregator : AggregatorBase
    {
        /// <summary>The path pointing to the nested object.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NestedAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedAggregator>(data);
        }
    }
    
    /// <summary>The NumericRangeAggregator is a multi-bucket range aggregation. Each bucket represents a range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NumericRangeAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>A list of numeric ranges.</summary>
        [Newtonsoft.Json.JsonProperty("ranges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NumericRange> Ranges { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NumericRangeAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NumericRangeAggregator>(data);
        }
    }
    
    /// <summary>The TermsAggregator is a multi-bucket value aggregation where buckets are dynamically built - one per unique value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TermsAggregator : AggregatorBase
    {
        /// <summary>The elastic search index field (not analyzed) to execute the aggregation on.</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        /// <summary>The size parameter can be set to define how many term buckets should be returned out of the overall terms list.</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }
    
        /// <summary>Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.</summary>
        [Newtonsoft.Json.JsonProperty("includes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Includes { get; set; }
    
        /// <summary>Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.</summary>
        [Newtonsoft.Json.JsonProperty("excludes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Excludes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAggregator>(data);
        }
    }
    
    /// <summary>The TermsRelationAggregator is derived from TermsAggregator and used for aggregations on relation item ids.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TermsRelationAggregator : TermsAggregator
    {
        /// <summary>When aggregating on relations ids the DocumentType is needed to resolve the target item translation.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TermsRelationAggregatorDocumentType DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsRelationAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsRelationAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TermsRelationAggregatorDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Content")]
        Content = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ListItem")]
        ListItem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Schema")]
        Schema = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ContentPermissionSet")]
        ContentPermissionSet = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Owner")]
        Owner = 5,
    
    }
    
    /// <summary>The TermsRelationAggregator is derived from the TermsAggregator and used for aggregations on indexed enum values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TermsEnumAggregator : TermsAggregator
    {
        /// <summary>When aggregating on enum fields EnumType is needed to resolve the enum translation.</summary>
        [Newtonsoft.Json.JsonProperty("enumType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnumType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TermsEnumAggregator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsEnumAggregator>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum LifeCycleFilter
    {
        [System.Runtime.Serialization.EnumMember(Value = "ActiveOnly")]
        ActiveOnly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "InactiveOnly")]
        InactiveOnly = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ContentSearchType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Metadata")]
        Metadata = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FullText")]
        FullText = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "MetadataAndFullText")]
        MetadataAndFullText = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ObjectAggregationResult 
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        /// <summary>The search string used to query the data</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Flag to notify if the SearchString was modified compared to the original requested one</summary>
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectAggregationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectAggregationResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AggregationResult 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sumOtherDocCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SumOtherDocCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("temporaryRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TemporaryRequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationResultItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResultItem> AggregationResultItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AggregationResultItem 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public long Count { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AggregationFilter Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AggregationResultItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregationResultItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentBatchDownloadRequest 
    {
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ContentBatchDownloadRequestItem> Contents { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentBatchDownloadRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentBatchDownloadRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentBatchDownloadRequestItem 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentBatchDownloadRequestItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentBatchDownloadRequestItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DownloadItem 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DownloadItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DownloadItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentBatchDownloadItem : DownloadItem
    {
        [Newtonsoft.Json.JsonProperty("downloadToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("downloadUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadUrl { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentBatchDownloadItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentBatchDownloadItem>(data);
        }
    }
    
    /// <summary>A request structure for creating a content document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CreateContentRequest 
    {
        /// <summary>The id of a schema with schema type content.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>An optional id list of schemas with schema type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        /// <summary>The content data of the content document.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The layer metadata of the content document.</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. </summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateContentRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateContentRequest>(data);
        }
    }
    
    /// <summary>Values that represent thumbnail sizes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ThumbnailSize
    {
        [System.Runtime.Serialization.EnumMember(Value = "Small")]
        Small = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Large")]
        Large = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UpdateContentPermissionsRequest 
    {
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateContentPermissionsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateContentPermissionsRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentSearchRequest 
    {
        /// <summary>Limits the simple search fields to the fields available in the specified channel.</summary>
        [Newtonsoft.Json.JsonProperty("channelIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ChannelIds { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to x-default.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Limits the display values included in the search response. Defaults to all display values.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DisplayPatternIds { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        /// <summary>The collection id.</summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }
    
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Limits the content document result set to that life cycle state. Defaults to ActiveOnly.</summary>
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        /// <summary>Limits the content document result set to specific ContentRights the user has</summary>
        [Newtonsoft.Json.JsonProperty("rightsFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<ContentRight> RightsFilter { get; set; }
    
        /// <summary>Type of search to be performed: against metadata, extracted fulltext from documents or both. Default to Metadata.</summary>
        [Newtonsoft.Json.JsonProperty("searchType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentSearchType SearchType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SortInfo 
    {
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }
    
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SortDirection Direction { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SortInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SortInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum SortDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = "Asc")]
        Asc = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Desc")]
        Desc = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ContentRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "View")]
        View = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edit")]
        Edit = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manage")]
        Manage = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Trash")]
        Trash = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfContent 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Content> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfContent>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentSearchResult : BaseResultOfContent
    {
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Content 
    {
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        /// <summary>The entity type of a content document is content.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>The id of the schema with schema type content.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>An optional id list of schemas with schema type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        /// <summary>Contains display values of the specified language, rendered according to the content schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> DisplayValues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Content FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Content>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentFileUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileTransferId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentFileUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentFileUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UpdateContentMetadataRequest 
    {
        /// <summary>The content id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>An id list of schemas with schema type content or layer.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SchemaIds { get; set; }
    
        /// <summary>The dynamic data structure matching the field schematics of the schemas with schema type content or layer.</summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UpdateContentMetadataRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateContentMetadataRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentDeactivationRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentDeactivationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDeactivationRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentReactivationRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentReactivationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentReactivationRequest>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ContentsMetadataUpdateRequest", typeof(ContentsMetadataUpdateRequest))]
    [JsonInheritanceAttribute("FilterContentsMetadataUpdateRequest", typeof(FilterContentsMetadataUpdateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesChangeRequestBase 
    {
        /// <summary>A container for all change commads.</summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataValuesChangeCommandBase> ChangeCommands { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeRequestBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeRequestBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentsMetadataUpdateRequest : MetadataValuesChangeRequestBase
    {
        /// <summary>The ids of the content documents.</summary>
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsMetadataUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsMetadataUpdateRequest>(data);
        }
    }
    
    /// <summary>The base class for metadata value change commands.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("MetadataValuesSchemaUpdateCommand", typeof(MetadataValuesSchemaUpdateCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaUpsertCommand", typeof(MetadataValuesSchemaUpsertCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaRemoveCommand", typeof(MetadataValuesSchemaRemoveCommand))]
    [JsonInheritanceAttribute("MetadataValuesFieldRemoveCommand", typeof(MetadataValuesFieldRemoveCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaItemAddCommand", typeof(MetadataValuesSchemaItemAddCommand))]
    [JsonInheritanceAttribute("MetadataValuesSchemaItemRemoveCommand", typeof(MetadataValuesSchemaItemRemoveCommand))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesChangeCommandBase 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesChangeCommandBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesChangeCommandBase>(data);
        }
    }
    
    /// <summary>Updates schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesSchemaUpdateCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The id of the schema with type content or layer to be updated.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpdateCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpdateCommand>(data);
        }
    }
    
    /// <summary>Adds or updates schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesSchemaUpsertCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The id of the schema with type content or layer to be updated.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        /// <summary>The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaUpsertCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaUpsertCommand>(data);
        }
    }
    
    /// <summary>Removes schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesSchemaRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The id of the schema with type layer to be removed.</summary>
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaRemoveCommand>(data);
        }
    }
    
    /// <summary>Removes a field and its value from the schema values.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesFieldRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The fully qualified field name of the field to be removed, e.g. "Data.SchemaId.FieldId".</summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesFieldRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesFieldRemoveCommand>(data);
        }
    }
    
    /// <summary>Adds a list item id reference to a multi tagbox.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesSchemaItemAddCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The fully qualified field name of the multi tagbox field.</summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>The id of the list item to be added.</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemAddCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemAddCommand>(data);
        }
    }
    
    /// <summary>Removes a list item id reference from a multi tagbox.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MetadataValuesSchemaItemRemoveCommand : MetadataValuesChangeCommandBase
    {
        /// <summary>The fully qualified field name of the multi tagbox field.</summary>
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        /// <summary>The id of the list item to be removed.</summary>
        [Newtonsoft.Json.JsonProperty("referenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MetadataValuesSchemaItemRemoveCommand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MetadataValuesSchemaItemRemoveCommand>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FilterContentsMetadataUpdateRequest : MetadataValuesChangeRequestBase
    {
        [Newtonsoft.Json.JsonProperty("contentSearchRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContentSearchRequest ContentSearchRequest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItemsCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FilterContentsMetadataUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterContentsMetadataUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfBusinessProcess 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BusinessProcess> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfBusinessProcess FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfBusinessProcess>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessSearchResult : BaseResultOfBusinessProcess
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class StartProcessRequest 
    {
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Variables { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StartProcessRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartProcessRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SendMessageRequest 
    {
        [Newtonsoft.Json.JsonProperty("messageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Variables { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SendMessageRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendMessageRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BusinessProcessWaitResult 
    {
        [Newtonsoft.Json.JsonProperty("hasStateHit", Required = Newtonsoft.Json.Required.Always)]
        public bool HasStateHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("processEnded", Required = Newtonsoft.Json.Required.Always)]
        public bool ProcessEnded { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stateHit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateHit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BusinessProcess BusinessProcess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BusinessProcessWaitResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BusinessProcessWaitResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DocumentHistorySearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistorySearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistorySearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DocumentHistorySearchResult 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DocumentHistory> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistorySearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistorySearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DocumentHistory 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long DocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentTypeContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTypeContract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime DocumentDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Timestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuditHistory Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentChangeAction Action { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistory>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserAuditHistory 
    {
        [Newtonsoft.Json.JsonProperty("modificationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime ModificationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifiedByUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedByUser { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserAuditHistory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAuditHistory>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum DocumentChangeAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "Create")]
        Create = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Update")]
        Update = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Delete")]
        Delete = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Activate")]
        Activate = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deactivate")]
        Deactivate = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DocumentHistoryDifference 
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oldDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long OldDocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newDocumentVersion", Required = Newtonsoft.Json.Required.Always)]
        public long NewDocumentVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oldValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object OldValues { get; set; }
    
        [Newtonsoft.Json.JsonProperty("newValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object NewValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentHistoryDifference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentHistoryDifference>(data);
        }
    }
    
    /// <summary>A request structure for creating a list item document.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemCreateRequest 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The id of the schema with schema type list.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>The list item id. When not provided a Guid is generated.</summary>
        [Newtonsoft.Json.JsonProperty("listItemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemCreateRequest>(data);
        }
    }
    
    /// <summary>The detail view item for the list item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemDetail 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The id of the schema with schema type list.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the list schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        /// <summary>The entity type of the list item is metadata.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>The list item id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemAggregationRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Special filters used to filter down on a specific aggregated value.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationFilter> AggregationFilters { get; set; }
    
        /// <summary>Defines the aggregation resultset.</summary>
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        /// <summary>Broadens the aggregation and include all schema descendant list items.</summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }
    
        /// <summary>Limits the aggregation to list items of the provided schemas.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SchemaIds { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to x-default.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemAggregationRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        /// <summary>An optional search filter. Limits the list item result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Broadens the search and include all schema descendant list items.</summary>
        [Newtonsoft.Json.JsonProperty("includeAllSchemaChildren", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeAllSchemaChildren { get; set; }
    
        /// <summary>Limits the search to list items of the provided schemas.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SchemaIds { get; set; }
    
        /// <summary>Defines the return language of translation values. Defaults to x-default.</summary>
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        /// <summary>Limits the display values included in the search response. Defaults to all display values.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DisplayPatternIds { get; set; }
    
        /// <summary>Define the display values included in the search response for the referenced fields. Defaults to no display value.</summary>
        [Newtonsoft.Json.JsonProperty("referencedFieldsDisplayPatternIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferencedFieldsDisplayPatternIds { get; set; }
    
        /// <summary>Only searches the specified language values. Defaults to all metadata languages of the language configuration.</summary>
        [Newtonsoft.Json.JsonProperty("searchLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SearchLanguages { get; set; }
    
        /// <summary>When set to true the content data is included in the result items.</summary>
        [Newtonsoft.Json.JsonProperty("includeMetadata", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludeMetadata { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfListItem 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ListItem> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfListItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfListItem>(data);
        }
    }
    
    /// <summary>Encapsulates the result of a list item search.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemSearchResult : BaseResultOfListItem
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemSearchResult>(data);
        }
    }
    
    /// <summary>A document stored in the elastic search metadata index, with fields corresponding to the the schemantics of its underlying list schema.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItem 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The id of the schema with schema type list.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the list schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        /// <summary>The entity type of the list item is metadata.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>The list item id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItem>(data);
        }
    }
    
    /// <summary>A request structure for updating a list item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemUpdateRequest 
    {
        /// <summary>The content data of the list item.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Content { get; set; }
    
        /// <summary>The list item id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemUpdateRequest>(data);
        }
    }
    
    /// <summary>ListItemFieldsFilterUpdateRequest class</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemFieldsFilterUpdateRequest 
    {
        /// <summary>The search request used to filter the list items on which the change commands must be applied</summary>
        [Newtonsoft.Json.JsonProperty("searchRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListItemSearchRequest SearchRequest { get; set; }
    
        /// <summary>The change commads to be applied to the list items</summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataValuesSchemaUpdateCommand> ChangeCommands { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemFieldsFilterUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFieldsFilterUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListItemFieldsUpdateRequest 
    {
        /// <summary>The ids of the list items whose fields need to be updated</summary>
        [Newtonsoft.Json.JsonProperty("listItemIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ListItemIds { get; set; }
    
        /// <summary>The change commads to be applied to the list items</summary>
        [Newtonsoft.Json.JsonProperty("changeCommands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MetadataValuesSchemaUpdateCommand> ChangeCommands { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListItemFieldsUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListItemFieldsUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class LiveStreamSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LiveStreamSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LiveStreamSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfObject 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<object> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfObject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfObject>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RewritableBaseResultOfObject : BaseResultOfObject
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RewritableBaseResultOfObject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RewritableBaseResultOfObject>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ObjectSearchResult : RewritableBaseResultOfObject
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ObjectSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ObjectSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SchemaDetail 
    {
        /// <summary>The schema id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The parent schema id.</summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }
    
        /// <summary>Types control schema usage.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SchemaType> Types { get; set; }
    
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FieldBase> Fields { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and list items.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>A simple ordering property for schemas.</summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        /// <summary>Is true when schema is system provided.</summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        /// <summary>The owner token id. Defines the schema owner.</summary>
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenId { get; set; }
    
        /// <summary>Opens list item document accessibility. If true the SchemaPermissionSetIds must be empty.</summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferencedInContentSchemaIds { get; set; }
    
        /// <summary>A complete id list of all descendant schemas.</summary>
        [Newtonsoft.Json.JsonProperty("descendantSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DescendantSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        /// <summary>The number of fields generated by the schema for the Search operations.</summary>
        [Newtonsoft.Json.JsonProperty("searchFieldCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchFieldCount SearchFieldCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum SchemaType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Content")]
        Content = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Layer")]
        Layer = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "List")]
        List = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Struct")]
        Struct = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DisplayPattern 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("templateEngine", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateEngine TemplateEngine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayPatternType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DisplayPatternType DisplayPatternType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Templates { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DisplayPattern FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DisplayPattern>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TemplateEngine
    {
        [System.Runtime.Serialization.EnumMember(Value = "DotLiquid")]
        DotLiquid = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum DisplayPatternType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Thumbnail")]
        Thumbnail = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "List")]
        List = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Detail")]
        Detail = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Name")]
        Name = 4,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("FieldBoolean", typeof(FieldBoolean))]
    [JsonInheritanceAttribute("FieldDate", typeof(FieldDate))]
    [JsonInheritanceAttribute("FieldDateTime", typeof(FieldDateTime))]
    [JsonInheritanceAttribute("FieldDateTimeArray", typeof(FieldDateTimeArray))]
    [JsonInheritanceAttribute("FieldDecimal", typeof(FieldDecimal))]
    [JsonInheritanceAttribute("FieldDictionary", typeof(FieldDictionary))]
    [JsonInheritanceAttribute("FieldDictionaryArray", typeof(FieldDictionaryArray))]
    [JsonInheritanceAttribute("FieldGeoPoint", typeof(FieldGeoPoint))]
    [JsonInheritanceAttribute("FieldLong", typeof(FieldLong))]
    [JsonInheritanceAttribute("FieldLongArray", typeof(FieldLongArray))]
    [JsonInheritanceAttribute("FieldSingleFieldset", typeof(FieldSingleFieldset))]
    [JsonInheritanceAttribute("FieldMultiFieldset", typeof(FieldMultiFieldset))]
    [JsonInheritanceAttribute("FieldSingleTagbox", typeof(FieldSingleTagbox))]
    [JsonInheritanceAttribute("FieldMultiTagbox", typeof(FieldMultiTagbox))]
    [JsonInheritanceAttribute("FieldString", typeof(FieldString))]
    [JsonInheritanceAttribute("FieldStringArray", typeof(FieldStringArray))]
    [JsonInheritanceAttribute("FieldTranslatedString", typeof(FieldTranslatedString))]
    [JsonInheritanceAttribute("FieldSingleRelation", typeof(FieldSingleRelation))]
    [JsonInheritanceAttribute("FieldMultiRelation", typeof(FieldMultiRelation))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldBase 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("indexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldNamespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldNamespace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fixed", Required = Newtonsoft.Json.Required.Always)]
        public bool Fixed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("simpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldBoolean : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldBoolean FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldBoolean>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldDate : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDate>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldDateTime : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTime FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTime>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldDateTimeArray : FieldDateTime
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDateTimeArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDateTimeArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldDecimal : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDecimal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDecimal>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldDictionary : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionary>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldDictionaryArray : FieldDictionary
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldDictionaryArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDictionaryArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldGeoPoint : FieldBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldGeoPoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldGeoPoint>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldLong : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Minimum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Maximum { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldLong FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLong>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldLongArray : FieldLong
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldLongArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLongArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldSingleFieldset : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleFieldset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleFieldset>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SchemaIndexingInfo 
    {
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FieldIndexingInfo> Fields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaIndexingInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaIndexingInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldIndexingInfo 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public bool Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("simpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("boost", Required = Newtonsoft.Json.Required.Always)]
        public double Boost { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relatedSchemaIndexing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo RelatedSchemaIndexing { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldIndexingInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldIndexingInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldMultiFieldset : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiFieldset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiFieldset>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldSingleTagbox : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleTagbox>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldMultiTagbox : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("listItemCreateTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListItemCreateTemplate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiTagbox FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiTagbox>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldString : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AnalyzerBase> Analyzers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("multiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("grantedValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> GrantedValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldString>(data);
        }
    }
    
    /// <summary>The analyzer base class.</summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("EdgeNGramAnalyzer", typeof(EdgeNGramAnalyzer))]
    [JsonInheritanceAttribute("LanguageAnalyzer", typeof(LanguageAnalyzer))]
    [JsonInheritanceAttribute("NGramAnalyzer", typeof(NGramAnalyzer))]
    [JsonInheritanceAttribute("PathHierarchyAnalyzer", typeof(PathHierarchyAnalyzer))]
    [JsonInheritanceAttribute("SimpleAnalyzer", typeof(SimpleAnalyzer))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AnalyzerBase 
    {
        /// <summary>Includes the analyzed field in the simple search.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearch", Required = Newtonsoft.Json.Required.Always)]
        public bool SimpleSearch { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AnalyzerBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnalyzerBase>(data);
        }
    }
    
    /// <summary>An analyzer using the EdgeNGram tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class EdgeNGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EdgeNGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EdgeNGramAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using a language analyzer. Restricted to the languages supported by elastic search.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class LanguageAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LanguageAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LanguageAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using the NGram tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-ngram-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class NGramAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static NGramAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NGramAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using the path hierarchy tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pathhierarchy-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PathHierarchyAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PathHierarchyAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PathHierarchyAnalyzer>(data);
        }
    }
    
    /// <summary>An analyzer using a custom pattern tokenizer.
    /// https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SimpleAnalyzer : AnalyzerBase
    {
        [Newtonsoft.Json.JsonProperty("fieldSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldSuffix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SimpleAnalyzer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleAnalyzer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldStringArray : FieldString
    {
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldStringArray FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldStringArray>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldTranslatedString : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("analyzers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AnalyzerBase> Analyzers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("multiLine", Required = Newtonsoft.Json.Required.Always)]
        public bool MultiLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("requiredMetadataLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> RequiredMetadataLanguages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keepFieldValue", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepFieldValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldTranslatedString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldTranslatedString>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldSingleRelation : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RelationType> RelationTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldSingleRelation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldSingleRelation>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RelationType 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("targetContext", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TargetContext TargetContext { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RelationType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RelationType>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TargetContext
    {
        [System.Runtime.Serialization.EnumMember(Value = "Content")]
        Content = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ListItem")]
        ListItem = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FieldMultiRelation : FieldBase
    {
        [Newtonsoft.Json.JsonProperty("schemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SchemaId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("schemaIndexingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchemaIndexingInfo SchemaIndexingInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relationTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RelationType> RelationTypes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxRecursion", Required = Newtonsoft.Json.Required.Always)]
        public int MaxRecursion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
        public bool UniqueItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumItems { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FieldMultiRelation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMultiRelation>(data);
        }
    }
    
    /// <summary>Count info of fields for search operations</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SearchFieldCount 
    {
        /// <summary>The number of fields generated by the schema in the Search index.</summary>
        [Newtonsoft.Json.JsonProperty("dataField", Required = Newtonsoft.Json.Required.Always)]
        public int DataField { get; set; }
    
        /// <summary>The number of indexed fields generated by the schema in the Search index.</summary>
        [Newtonsoft.Json.JsonProperty("indexedField", Required = Newtonsoft.Json.Required.Always)]
        public int IndexedField { get; set; }
    
        /// <summary>The number of fields to be queried in the simple search for the schema.</summary>
        [Newtonsoft.Json.JsonProperty("simpleSearchField", Required = Newtonsoft.Json.Required.Always)]
        public int SimpleSearchField { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SearchFieldCount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchFieldCount>(data);
        }
    }
    
    /// <summary>Response that tells if exists</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ExistsResponse 
    {
        /// <summary>Gets or sets a value indicating whether it exists</summary>
        [Newtonsoft.Json.JsonProperty("exists", Required = Newtonsoft.Json.Required.Always)]
        public bool Exists { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExistsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExistsResponse>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SchemaCreateRequest 
    {
        /// <summary>The schema id. Can be a slug, but must be unique throughout the whole customer setup.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The parent schema id.</summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }
    
        /// <summary>Types control schema usage.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SchemaType> Types { get; set; }
    
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields. Can be empty.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FieldBase> Fields { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>A simple ordering property for schemas.</summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>Opens list item document accessibility. If true SchemaPermissionSetIds must be empty.</summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets. Control list item document permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferencedInContentSchemaIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SchemaUpdateRequest 
    {
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("displayPatterns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DisplayPattern> DisplayPatterns { get; set; }
    
        /// <summary>The schema fields.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FieldBase> Fields { get; set; }
    
        /// <summary>An optional list of aggregations to group content documents and list items.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>A simple ordering property for schemas.</summary>
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        /// <summary>Sorts content documents and/or list items.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>Opens schema accessibility.</summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }
    
        /// <summary>An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.</summary>
        [Newtonsoft.Json.JsonProperty("schemaPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SchemaPermissionSetIds { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        /// <summary>An optional id list of schemas with type content for a schema with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("referencedInContentSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferencedInContentSchemaIds { get; set; }
    
        /// <summary>Types control schema usage. Schema types can only be added, but not removed.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SchemaType> Types { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SchemaSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        /// <summary>An optional search filter. Limits the schema result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfSchema 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Schema> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfSchema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfSchema>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RewritableBaseResultOfSchema : BaseResultOfSchema
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RewritableBaseResultOfSchema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RewritableBaseResultOfSchema>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SchemaSearchResult : RewritableBaseResultOfSchema
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Schema 
    {
        /// <summary>The schema id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The parent schema id.</summary>
        [Newtonsoft.Json.JsonProperty("parentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentSchemaId { get; set; }
    
        /// <summary>Types control schema usage.</summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<SchemaType> Types { get; set; }
    
        /// <summary>Language specific schema names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>Language specific schema descriptions.</summary>
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        /// <summary>The count of all fields.</summary>
        [Newtonsoft.Json.JsonProperty("fieldCount", Required = Newtonsoft.Json.Required.Always)]
        public int FieldCount { get; set; }
    
        /// <summary>The count of all schema descendants with a immediate inheritance.</summary>
        [Newtonsoft.Json.JsonProperty("childCount", Required = Newtonsoft.Json.Required.Always)]
        public int ChildCount { get; set; }
    
        /// <summary>The descendancy depth of the schema.</summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        public int Level { get; set; }
    
        /// <summary>Is true when schema is system provided.</summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Always)]
        public bool System { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Schema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Schema>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum UserRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "ManageContent")]
        ManageContent = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSharings")]
        ManageSharings = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageDrives")]
        ManageDrives = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageTransfer")]
        ManageTransfer = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageChannels")]
        ManageChannels = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSchemas")]
        ManageSchemas = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageUsers")]
        ManageUsers = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageUserRoles")]
        ManageUserRoles = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManagePermissions")]
        ManagePermissions = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageSearchIndexes")]
        ManageSearchIndexes = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageRecipients")]
        ManageRecipients = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageCollections")]
        ManageCollections = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageListItems")]
        ManageListItems = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageServiceProviders")]
        ManageServiceProviders = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageEmbeds")]
        ManageEmbeds = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "ManageTemplates")]
        ManageTemplates = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionSetSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rightFilter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PermissionSetRight? RightFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum PermissionSetRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "Apply")]
        Apply = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfPermissionSet 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PermissionSet> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfPermissionSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfPermissionSet>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RewritableBaseResultOfPermissionSet : BaseResultOfPermissionSet
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RewritableBaseResultOfPermissionSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RewritableBaseResultOfPermissionSet>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionSetSearchResult : RewritableBaseResultOfPermissionSet
    {
        [Newtonsoft.Json.JsonProperty("aggregationResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationResult> AggregationResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionSet 
    {
        /// <summary>The permission set id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        /// <summary>Language specific permission set names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSet>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionSetDetailOfContentRight 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PermissionUserRoleRightsOfContentRight> UserRolesRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PermissionUserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetDetailOfContentRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailOfContentRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentPermissionSetDetail : PermissionSetDetailOfContentRight
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentPermissionSetDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentPermissionSetDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionUserRoleRightsOfContentRight 
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<ContentRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionUserRoleRightsOfContentRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfContentRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionUserRoleRightsOfPermissionSetRight 
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<PermissionSetRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionUserRoleRightsOfPermissionSetRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfPermissionSetRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionSetDetailOfMetadataRight 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PermissionUserRoleRightsOfMetadataRight> UserRolesRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRolesPermissionSetRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PermissionUserRoleRightsOfPermissionSetRight> UserRolesPermissionSetRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exclusive", Required = Newtonsoft.Json.Required.Always)]
        public bool Exclusive { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionSetDetailOfMetadataRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSetDetailOfMetadataRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SchemaPermissionSetDetail : PermissionSetDetailOfMetadataRight
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SchemaPermissionSetDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SchemaPermissionSetDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PermissionUserRoleRightsOfMetadataRight 
    {
        [Newtonsoft.Json.JsonProperty("userRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserRoleId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<MetadataRight> Rights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PermissionUserRoleRightsOfMetadataRight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionUserRoleRightsOfMetadataRight>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum MetadataRight
    {
        [System.Runtime.Serialization.EnumMember(Value = "View")]
        View = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edit")]
        Edit = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manage")]
        Manage = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class VersionInfo 
    {
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Event Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VersionInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Event 
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventAction? Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("changed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Changed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("softwareAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SoftwareAgent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("when", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? When { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Event FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Event>(data);
        }
    }
    
    /// <summary>Corresponds to stEvt.ActionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum EventAction
    {
        [System.Runtime.Serialization.EnumMember(Value = "Converted")]
        Converted = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Copied")]
        Copied = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Created")]
        Created = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cropped")]
        Cropped = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Edited")]
        Edited = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Filtered")]
        Filtered = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Formatted")]
        Formatted = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "VersionUpdated")]
        VersionUpdated = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Printed")]
        Printed = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Published")]
        Published = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Managed")]
        Managed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "Produced")]
        Produced = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Resized")]
        Resized = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "Saved")]
        Saved = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Derived")]
        Derived = 14,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasicDetail", typeof(ShareBasicDetail))]
    [JsonInheritanceAttribute("ShareEmbedDetail", typeof(ShareEmbedDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBaseDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentSelections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ContentDetail2> ContentSelections { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mailTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MailTemplateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateBase Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBaseDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentDetail2 
    {
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        /// <summary>The entity type of a content document is content.</summary>
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>The id of the schema with schema type content.</summary>
        [Newtonsoft.Json.JsonProperty("contentSchemaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentSchemaId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentPermissionSetIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Output> Outputs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerTokenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerTokenId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentType ContentType { get; set; }
    
        /// <summary>Contains language specific display values, rendered according to the content schema's display pattern configuration.</summary>
        [Newtonsoft.Json.JsonProperty("displayValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DisplayValueDictionary DisplayValues { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentDetail2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentDetail2>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("CardTemplate", typeof(CardTemplate))]
    [JsonInheritanceAttribute("ListTemplate", typeof(ListTemplate))]
    [JsonInheritanceAttribute("BasicTemplate", typeof(BasicTemplate))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TemplateBase 
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TemplateBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TemplateBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CardTemplate : TemplateBase
    {
        [Newtonsoft.Json.JsonProperty("showNavigation", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowNavigation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("showOverlay", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowOverlay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("showLogo", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowLogo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("showFooter", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowFooter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CardTemplate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CardTemplate>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ListTemplate : TemplateBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ListTemplate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListTemplate>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BasicTemplate : TemplateBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BasicTemplate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BasicTemplate>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum OutputAccess
    {
        [System.Runtime.Serialization.EnumMember(Value = "Full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Preview")]
        Preview = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBasicDetail : ShareBaseDetail
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mailRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MailRecipient> MailRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("internalRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InternalRecipient> InternalRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasicDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class MailRecipient 
    {
        [Newtonsoft.Json.JsonProperty("userEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserEmail UserEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MailRecipient FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MailRecipient>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserEmail 
    {
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserEmail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserEmail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class InternalRecipient 
    {
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserItem Recipient { get; set; }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InternalRecipient FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InternalRecipient>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserItem 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareEmbedDetail : ShareBaseDetail
    {
        [Newtonsoft.Json.JsonProperty("embedContentItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EmbedContentDetail> EmbedContentItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbedDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class EmbedContentDetail 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutputFormatId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EmbedContentDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EmbedContentDetail>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasicUpdateRequest", typeof(ShareBasicUpdateRequest))]
    [JsonInheritanceAttribute("ShareEmbedUpdateRequest", typeof(ShareEmbedUpdateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBaseUpdateRequest 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shareContentItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ShareContent> ShareContentItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateBase Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBaseUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareContent 
    {
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputFormatIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OutputFormatIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareContent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareContent>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBasicUpdateRequest : ShareBaseUpdateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasicUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareEmbedUpdateRequest : ShareBaseUpdateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbedUpdateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedUpdateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfShareBase 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ShareBase> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfShareBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfShareBase>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasic", typeof(ShareBasic))]
    [JsonInheritanceAttribute("ShareEmbed", typeof(ShareEmbed))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBase 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBasic : ShareBase
    {
        [Newtonsoft.Json.JsonProperty("mailRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MailRecipient> MailRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("internalRecipients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InternalRecipient> InternalRecipients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasic FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasic>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareEmbed : ShareBase
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbed FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbed>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareAggregationRequest 
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregationFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregationFilter> AggregationFilters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("aggregators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregators { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayLanguage { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareAggregationRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareAggregationRequest>(data);
        }
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("ShareBasicCreateRequest", typeof(ShareBasicCreateRequest))]
    [JsonInheritanceAttribute("ShareEmbedCreateRequest", typeof(ShareEmbedCreateRequest))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBaseCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ShareContent> Contents { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemplateBase Template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputAccess OutputAccess { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBaseCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBaseCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareBasicCreateRequest : ShareBaseCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("recipientsEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserEmail> RecipientsEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recipientsUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserItem> RecipientsUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recipientsGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserRole> RecipientsGroup { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mailTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MailTemplateId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareBasicCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareBasicCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserRole 
    {
        /// <summary>The user role id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trashed", Required = Newtonsoft.Json.Required.Always)]
        public bool Trashed { get; set; }
    
        /// <summary>Language specific user role names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        /// <summary>All user rights for this user role.</summary>
        [Newtonsoft.Json.JsonProperty("userRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<UserRight> UserRights { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserRole FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserRole>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareEmbedCreateRequest : ShareBaseCreateRequest
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareEmbedCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareEmbedCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CreateShareResult 
    {
        [Newtonsoft.Json.JsonProperty("shareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShareId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateShareResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateShareResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareSearchRequest 
    {
        /// <summary>Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to empty.</summary>
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        /// <summary>Sorts the search results. Sorting on a not indexed field will throw an exception.</summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>Defines the offset from the first result you want to fetch. Defaults to 0.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        /// <summary>Limits the document count of the result set. Defaults to 30.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        /// <summary>An optional search filter. Limits the share document result set.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RewritableBaseResultOfShareBase : BaseResultOfShareBase
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RewritableBaseResultOfShareBase FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RewritableBaseResultOfShareBase>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ShareSearchResult : RewritableBaseResultOfShareBase
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ShareSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ShareSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransferDeleteRequest 
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> FileTransferIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferDeleteRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferDeleteRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Blacklist 
    {
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BlacklistItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Blacklist FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Blacklist>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BlacklistItem 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Match { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BlacklistItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlacklistItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CreateTransferRequest 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("files", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransferUploadFile> Files { get; set; }
    
        [Newtonsoft.Json.JsonProperty("driveFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransferDriveFile> DriveFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("webLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransferWebLink> WebLinks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("collectionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createCollection", Required = Newtonsoft.Json.Required.Always)]
        public bool CreateCollection { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreateTransferRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateTransferRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TransferType
    {
        [System.Runtime.Serialization.EnumMember(Value = "FileUpload")]
        FileUpload = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DriveImport")]
        DriveImport = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DriveExport")]
        DriveExport = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "WebDownload")]
        WebDownload = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "SchemaImport")]
        SchemaImport = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TransferFile 
    {
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TransferUploadFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferUploadFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferUploadFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TransferDriveFile : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("driveId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DriveId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalOutputFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalOutputFolderId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferDriveFile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDriveFile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TransferWebLink : TransferFile
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferWebLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferWebLink>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Transfer 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferCount", Required = Newtonsoft.Json.Required.Always)]
        public long FileTransferCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Transfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transfer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TransferState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadInProgress")]
        UploadInProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCompleted")]
        UploadCompleted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportInProgress")]
        ImportInProgress = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCompleted")]
        ImportCompleted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCancelled")]
        UploadCancelled = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCancelled")]
        ImportCancelled = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportFailed")]
        ImportFailed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Created")]
        Created = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadFailed")]
        UploadFailed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferReady")]
        TransferReady = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "FileDeleteInProgress")]
        FileDeleteInProgress = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransferCleanup")]
        TransferCleanup = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TransferDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessProcessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessProcessId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransferType TransferType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemProgress", Required = Newtonsoft.Json.Required.Always)]
        public long ItemProgress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemCount", Required = Newtonsoft.Json.Required.Always)]
        public long ItemCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemsFailed", Required = Newtonsoft.Json.Required.Always)]
        public long ItemsFailed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemsCancelled", Required = Newtonsoft.Json.Required.Always)]
        public long ItemsCancelled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastProgressStamp", Required = Newtonsoft.Json.Required.Always)]
        public long LastProgressStamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileTransferCount", Required = Newtonsoft.Json.Required.Always)]
        public long FileTransferCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransferDetail 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rev { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileTransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FileMetadata FileMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("driveMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadata DriveMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OutputItem> OutputItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum FileTransferState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Draft")]
        Draft = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadInProgress")]
        UploadInProgress = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCompleted")]
        UploadCompleted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DataExtractionInProgress")]
        DataExtractionInProgress = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "DataExtractionDone")]
        DataExtractionDone = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportInProgress")]
        ImportInProgress = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCompleted")]
        ImportCompleted = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadCancelled")]
        UploadCancelled = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportCancelled")]
        ImportCancelled = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "UploadFailed")]
        UploadFailed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ImportFailed")]
        ImportFailed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "DeleteInProgress")]
        DeleteInProgress = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deleted")]
        Deleted = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "CleanupInProgress")]
        CleanupInProgress = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "CleanupCompleted")]
        CleanupCompleted = 14,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "kind")]
    [JsonInheritanceAttribute("AudioMetadata", typeof(AudioMetadata))]
    [JsonInheritanceAttribute("DocumentMetadata", typeof(DocumentMetadata))]
    [JsonInheritanceAttribute("ImageMetadata", typeof(ImageMetadata))]
    [JsonInheritanceAttribute("VideoMetadata", typeof(VideoMetadata))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileMetadata 
    {
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("descriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Descriptions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileExtension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileExtension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileSizeInBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FileSizeInBytes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sha1Hash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sha1Hash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpMetadata XmpMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exifMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExifMetadata ExifMetadata { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpMetadata 
    {
        [Newtonsoft.Json.JsonProperty("dc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dc Dc { get; set; }
    
        [Newtonsoft.Json.JsonProperty("crs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Crs Crs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iptcCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcCore IptcCore { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iptcExt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcExt IptcExt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iptcIIM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IptcIIM IptcIIM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Lr Lr { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pdf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pdf Pdf { get; set; }
    
        [Newtonsoft.Json.JsonProperty("photoshop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Photoshop Photoshop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("plus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plus Plus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tiff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tiff Tiff { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Xmp Xmp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpBJ", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpBJ XmpBJ { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpDM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpDM XmpDM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpG XmpG { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpGImg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpGImg XmpGImg { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpidq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Xmpidq Xmpidq { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpMM", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpMM XmpMM { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpNote", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpNote XmpNote { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpRights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpRights XmpRights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xmpTPg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpTPg XmpTPg { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Dc 
    {
        [Newtonsoft.Json.JsonProperty("contributor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Contributor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("coverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coverage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.DateTime> Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Publisher { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Relation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Rights { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Subject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Dc FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dc>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Crs 
    {
        [Newtonsoft.Json.JsonProperty("autoBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoBrightness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoContrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoContrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoExposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoExposure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("autoShadows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AutoShadows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blueHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlueHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blueSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BlueSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Brightness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cameraProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chromaticAberrationB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChromaticAberrationB { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chromaticAberrationR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChromaticAberrationR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("colorNoiseReduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ColorNoiseReduction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Contrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropTop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropTop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropLeft { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropBottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropBottom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropRight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropRight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropAngle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CropHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cropUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CropUnit? CropUnits { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exposure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Exposure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("greenHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GreenHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("greenSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GreenSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasCrop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasCrop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasSettings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("luminanceSmoothing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LuminanceSmoothing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rawFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RawFileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("redHue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RedHue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("redSaturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RedSaturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Saturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shadows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Shadows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shadowTint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShadowTint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sharpness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sharpness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Temperature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("toneCurve", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ToneCurve { get; set; }
    
        [Newtonsoft.Json.JsonProperty("toneCurveName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ToneCurve? ToneCurveName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vignetteAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VignetteAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vignetteMidpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VignetteMidpoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("whiteBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WhiteBalance? WhiteBalance { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Crs FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Crs>(data);
        }
    }
    
    /// <summary>Corresponds to crs.CropUnitsChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum CropUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = "Pixels")]
        Pixels = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inches")]
        Inches = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeters")]
        Centimeters = 2,
    
    }
    
    /// <summary>Corresponds to crs.ToneCurveNameChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ToneCurve
    {
        [System.Runtime.Serialization.EnumMember(Value = "Linear")]
        Linear = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MediumContrast")]
        MediumContrast = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "StrongContrast")]
        StrongContrast = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
    }
    
    /// <summary>Corresponds to crs.WhiteBalanceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum WhiteBalance
    {
        [System.Runtime.Serialization.EnumMember(Value = "AsShot")]
        AsShot = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Daylight")]
        Daylight = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cloudy")]
        Cloudy = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shade")]
        Shade = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Tungsten")]
        Tungsten = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Fluorescent")]
        Fluorescent = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Flash")]
        Flash = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class IptcCore 
    {
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("intellectualGenre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntellectualGenre { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scene", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Scene { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SubjectCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creatorContactInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorContactInfo CreatorContactInfo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcCore FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcCore>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CreatorContactInfo 
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CreatorContactInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatorContactInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class IptcExt 
    {
        [Newtonsoft.Json.JsonProperty("additionalModelInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdditionalModelInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artworkOrObject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtworkOrObjectInfo> ArtworkOrObject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organisationInImageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OrganisationInImageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("controlledVocabularyTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ControlledVocabularyTerm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationShown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LocationInfo> LocationShown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modelAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> ModelAge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("organisationInImageName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OrganisationInImageName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personInImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PersonInImage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("digitalImageGUID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalImageGUID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("digitalSourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalSourceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Event { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageRegistryEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RegistryEntryInfo> ImageRegistryEntry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadataLastEdited", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MetadataLastEdited { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locationCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LocationInfo> LocationCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxAvailHeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAvailHeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxAvailWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxAvailWidth { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcExt FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcExt>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ArtworkOrObjectInfo 
    {
        [Newtonsoft.Json.JsonProperty("copyrightNotice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightNotice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sourceInventoryNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceInventoryNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Title { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ArtworkOrObjectInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtworkOrObjectInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class LocationInfo 
    {
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("provinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sublocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sublocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("worldRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorldRegion { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LocationInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LocationInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RegistryEntryInfo 
    {
        [Newtonsoft.Json.JsonProperty("registryItemIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistryItemIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("registryOrganisationIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegistryOrganisationIdentifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RegistryEntryInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegistryEntryInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class IptcIIM 
    {
        [Newtonsoft.Json.JsonProperty("modelVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ModelVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileFormatVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileFormatVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("envelopeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnvelopeNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ProductID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("envelopePriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnvelopePriority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateSent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeSent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeSent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uno { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recordVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RecordVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objectTypeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectTypeReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objectAttributeReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectAttributeReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("objectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ObjectName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("editStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Urgency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subjectReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SubjectReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("supplementalCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SupplementalCategory { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fixtureIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FixtureIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Keywords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentLocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentLocationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("releaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("releaseTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expirationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ExpirationTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("specialInstruction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpecialInstruction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actionAdvised", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionAdvised { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceService { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReferenceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? TimeCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("digitalCreationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DigitalCreationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("digitalCreationTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DigitalCreationTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originatingProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginatingProgram { get; set; }
    
        [Newtonsoft.Json.JsonProperty("programVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgramVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("byline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Byline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bylineTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BylineTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sublocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sublocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("provinceState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryPrimaryLocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryPrimaryLocationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryPrimaryLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryPrimaryLocationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalTransmissionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalTransmissionReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("copyrightNotice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CopyrightNotice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("captionAbstract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CaptionAbstract { get; set; }
    
        [Newtonsoft.Json.JsonProperty("writerEditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WriterEditor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageOrientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageOrientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageIdentifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static IptcIIM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IptcIIM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Lr 
    {
        [Newtonsoft.Json.JsonProperty("hierarchicalSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> HierarchicalSubject { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Lr FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Lr>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Pdf 
    {
        [Newtonsoft.Json.JsonProperty("keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pdfVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("producer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Producer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trapped", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Trapped { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Pdf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Photoshop 
    {
        [Newtonsoft.Json.JsonProperty("authorsPosition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorsPosition { get; set; }
    
        [Newtonsoft.Json.JsonProperty("captionWriter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionWriter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("colorMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorMode? ColorMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("credit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Credit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateCreated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentAncestors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DocumentAncestors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }
    
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string History { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iccProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IccProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("supplementalCategories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SupplementalCategories { get; set; }
    
        [Newtonsoft.Json.JsonProperty("textLayers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PhotoshopLayer> TextLayers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transmissionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransmissionReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urgency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Urgency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legacyIPTCDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegacyIPTCDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Photoshop FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Photoshop>(data);
        }
    }
    
    /// <summary>Corresponds to photoshop.ColorModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ColorMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Bitmap")]
        Bitmap = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Grayscale")]
        Grayscale = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indexed")]
        Indexed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "RGB")]
        RGB = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CMYK")]
        CMYK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Multichannel")]
        Multichannel = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Duotone")]
        Duotone = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "LAB")]
        LAB = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class PhotoshopLayer 
    {
        [Newtonsoft.Json.JsonProperty("layerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("layerText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LayerText { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PhotoshopLayer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PhotoshopLayer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Plus 
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LicenseeInfo> Licensee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<EndUserInfo> EndUser { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endUserID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LicensorInfo> Licensor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> LicensorNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mediaSummaryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaSummaryCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseStartDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseEndDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mediaConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> MediaConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("regionConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> RegionConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productOrServiceConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ProductOrServiceConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageFileConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ImageFileConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageAlterationConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ImageAlterationConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageDuplicationConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageDuplicationConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modelReleaseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelReleaseStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modelReleaseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ModelReleaseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minorModelAgeDisclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MinorModelAgeDisclosure { get; set; }
    
        [Newtonsoft.Json.JsonProperty("propertyReleaseStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyReleaseStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("propertyReleaseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PropertyReleaseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherConstraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherConstraints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creditLineRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditLineRequired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adultContentWarning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdultContentWarning { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherLicenseRequirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherLicenseRequirements { get; set; }
    
        [Newtonsoft.Json.JsonProperty("termsAndConditionsText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> TermsAndConditionsText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("termsAndConditionsURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsAndConditionsURL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherConditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileNameAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileNameAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageFileFormatAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageFileFormatAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageFileSizeAsDelivered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageFileSizeAsDelivered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("copyrightStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("copyrightRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightRegistrationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstPublicationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FirstPublicationDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("copyrightOwner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CopyrightOwnerInfo> CopyrightOwner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("copyrightOwnerImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageCreator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ImageCreatorInfo> ImageCreator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageCreatorImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageSupplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ImageSupplierInfo> ImageSupplier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageSupplierImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseeImageID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeImageID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseeImageNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> LicenseeImageNotes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherImageInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherImageInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LicensorTransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseeTransactionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LicenseeTransactionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseeProjectReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LicenseeProjectReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseTransactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LicenseTransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reuse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reuse { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherLicenseDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> OtherLicenseDocuments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("otherLicenseInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> OtherLicenseInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom4 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom5 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom6 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom7 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom8 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom9 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("custom10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, string>> Custom10 { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Plus FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Plus>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class LicenseeInfo 
    {
        [Newtonsoft.Json.JsonProperty("licenseeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licenseeID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseeID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LicenseeInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseeInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class EndUserInfo 
    {
        [Newtonsoft.Json.JsonProperty("endUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("endUserID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndUserID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EndUserInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EndUserInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class LicensorInfo 
    {
        [Newtonsoft.Json.JsonProperty("licensorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorStreetAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorStreetAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorExtendedAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorExtendedAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorRegion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorPostalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorPostalCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorTelephoneType1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephoneType1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorTelephone1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephone1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorTelephoneType2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephoneType2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorTelephone2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorTelephone2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorEmail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("licensorURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicensorURL { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LicensorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicensorInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CopyrightOwnerInfo 
    {
        [Newtonsoft.Json.JsonProperty("copyrightOwnerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("copyrightOwnerID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CopyrightOwnerID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CopyrightOwnerInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CopyrightOwnerInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ImageCreatorInfo 
    {
        [Newtonsoft.Json.JsonProperty("imageCreatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageCreatorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageCreatorID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageCreatorInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageCreatorInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ImageSupplierInfo 
    {
        [Newtonsoft.Json.JsonProperty("imageSupplierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageSupplierID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageSupplierID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageSupplierInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageSupplierInfo>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Tiff 
    {
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bitsPerSample", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> BitsPerSample { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Compression? Compression { get; set; }
    
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Copyright { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> ImageDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageWidth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("make", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Make { get; set; }
    
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Model { get; set; }
    
        [Newtonsoft.Json.JsonProperty("orientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Orientation? Orientation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("photometricInterpretation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PhotometricInterpretation? PhotometricInterpretation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("planarConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlanarConfiguration? PlanarConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("primaryChromaticities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PrimaryChromaticities { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceBlackWhite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReferenceBlackWhite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resolutionUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResolutionUnit? ResolutionUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("samplesPerPixel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplesPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("software", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Software { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> TransferFunction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("whitePoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> WhitePoint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("xResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string YResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yCbCrCoefficients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> YCbCrCoefficients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yCbCrPositioning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public YCbCrPositioning? YCbCrPositioning { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yCbCrSubSampling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public YCbCrSubSampling? YCbCrSubSampling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nativeDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Tiff FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tiff>(data);
        }
    }
    
    /// <summary>Corresponds to tiff.CompressionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Compression
    {
        [System.Runtime.Serialization.EnumMember(Value = "Uncompressed")]
        Uncompressed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CCITT")]
        CCITT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "T4")]
        T4 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "T6")]
        T6 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "LZW")]
        LZW = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "OJPEG")]
        OJPEG = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "JPEG")]
        JPEG = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Deflate")]
        Deflate = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "T82")]
        T82 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "T43")]
        T43 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "NeXT")]
        NeXT = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "ARW")]
        ARW = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "RAW")]
        RAW = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "SRW")]
        SRW = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "Group3_1D")]
        Group3_1D = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "PackBits")]
        PackBits = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThunderScan")]
        ThunderScan = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "KDC")]
        KDC = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "RasterPadding")]
        RasterPadding = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "LineWork")]
        LineWork = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "HighContinuous")]
        HighContinuous = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "BinaryLineWork")]
        BinaryLineWork = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "PixarFilm")]
        PixarFilm = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "PixarLog")]
        PixarLog = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "DCS")]
        DCS = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = "JBIG")]
        JBIG = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = "JPEG2000")]
        JPEG2000 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = "NEF")]
        NEF = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = "JBIG2")]
        JBIG2 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = "DCR")]
        DCR = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = "PEF")]
        PEF = 30,
    
    }
    
    /// <summary>Corresponds to tiff.OrientationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Orientation
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TopRowLeftColumn")]
        TopRowLeftColumn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TopRowRightColumn")]
        TopRowRightColumn = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "BottomRowLeftColumn")]
        BottomRowLeftColumn = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "BottomRowRightColumn")]
        BottomRowRightColumn = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "LeftRowTopColumn")]
        LeftRowTopColumn = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "RightRowTopColumn")]
        RightRowTopColumn = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "RightRowBottomColumn")]
        RightRowBottomColumn = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "LeftRowBottomColumn")]
        LeftRowBottomColumn = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 9,
    
    }
    
    /// <summary>Corresponds to tiff.PhotometricInterpretationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum PhotometricInterpretation
    {
        [System.Runtime.Serialization.EnumMember(Value = "WhiteIsZero")]
        WhiteIsZero = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BlackIsZero")]
        BlackIsZero = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "RGB")]
        RGB = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Palette")]
        Palette = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransparencyMask")]
        TransparencyMask = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "CMYK")]
        CMYK = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr")]
        YCbCr = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "CIELab")]
        CIELab = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ICCLab")]
        ICCLab = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "ITULab")]
        ITULab = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ColorFilterArray")]
        ColorFilterArray = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "LogL")]
        LogL = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "LogLUV")]
        LogLUV = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "LinearRaw")]
        LinearRaw = 13,
    
    }
    
    /// <summary>Corresponds to tiff.PlanarConfigurationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum PlanarConfiguration
    {
        [System.Runtime.Serialization.EnumMember(Value = "Chunky")]
        Chunky = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Planar")]
        Planar = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Line")]
        Line = 2,
    
    }
    
    /// <summary>Corresponds to exif.FocalPlaneResolutionUnitChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ResolutionUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inch")]
        Inch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeter")]
        Centimeter = 2,
    
    }
    
    /// <summary>Corresponds to tiff.YCbCrPositioningChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum YCbCrPositioning
    {
        [System.Runtime.Serialization.EnumMember(Value = "Centered")]
        Centered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cosited")]
        Cosited = 1,
    
    }
    
    /// <summary>Corresponds to tiff.YCbCrSubSamplingChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum YCbCrSubSampling
    {
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr111")]
        YCbCr111 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr422")]
        YCbCr422 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "YCbCr420")]
        YCbCr420 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Xmp 
    {
        [Newtonsoft.Json.JsonProperty("baseURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseURL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreateDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creatorTool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreatorTool { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadataDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MetadataDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nickname { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Rating? Rating { get; set; }
    
        [Newtonsoft.Json.JsonProperty("thumbnails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<XmpGImg> Thumbnails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<XmpGImg> PageInfo { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Xmp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Xmp>(data);
        }
    }
    
    /// <summary>Corresponds to xmp.RatingChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Rating
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rejected")]
        Rejected = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unrated")]
        Unrated = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "One")]
        One = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Two")]
        Two = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Three")]
        Three = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Four")]
        Four = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Five")]
        Five = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpGImg 
    {
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImgFormat? Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpGImg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpGImg>(data);
        }
    }
    
    /// <summary>Corresponds to xmpGImg.FormatChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ImgFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "JPEG")]
        JPEG = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpBJ 
    {
        [Newtonsoft.Json.JsonProperty("jobRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Job> JobRef { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpBJ FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpBJ>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Job 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Job FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Job>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpDM 
    {
        [Newtonsoft.Json.JsonProperty("absPeakAudioFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbsPeakAudioFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Album { get; set; }
    
        [Newtonsoft.Json.JsonProperty("altTapeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AltTapeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("altTimecode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeCode AltTimecode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audioChannelType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioChannelType? AudioChannelType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audioCompressor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AudioCompressor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audioSampleRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AudioSampleRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audioSampleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioSampleType? AudioSampleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("beatSpliceParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BeatSpliceStretch BeatSpliceParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cameraAngle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CameraAngle? CameraAngle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cameraLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraLabel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cameraModel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CameraModel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cameraMove", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CameraMove? CameraMove { get; set; }
    
        [Newtonsoft.Json.JsonProperty("client", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Client { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("composer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Composer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contributedMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Media> ContributedMedia { get; set; }
    
        [Newtonsoft.Json.JsonProperty("director", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Director { get; set; }
    
        [Newtonsoft.Json.JsonProperty("directorPhotography", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DirectorPhotography { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("engineer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Engineer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileDataRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileDataRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }
    
        [Newtonsoft.Json.JsonProperty("good", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Good { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instrument { get; set; }
    
        [Newtonsoft.Json.JsonProperty("introTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time IntroTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioMusicalKey? Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("logComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("loop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Loop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfBeats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? NumberOfBeats { get; set; }
    
        [Newtonsoft.Json.JsonProperty("markers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Marker> Markers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outCue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time OutCue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("projectName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("projectRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectLink ProjectRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pullDown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoPullDown? PullDown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relativePeakAudioFilePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelativePeakAudioFilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relativeTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time RelativeTimestamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("releaseDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ReleaseDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resampleParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResampleStretch ResampleParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scaleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioMusicalScaleType? ScaleType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("scene", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scene { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shotDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ShotDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shotDay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotDay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shotLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shotName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shotNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShotNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shotSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ShotSize? ShotSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("speakerPlacement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpeakerPlacement { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startTimecode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeCode StartTimecode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("stretchMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioStretchMode? StretchMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("takeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TakeNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tapeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TapeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tempo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Tempo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeScaleParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeScaleStretch TimeScaleParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeSignature? TimeSignature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trackNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrackNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tracks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Track> Tracks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoAlphaMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoAlphaMode? VideoAlphaMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoAlphaPremultipleColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmpG VideoAlphaPremultipleColor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoAlphaUnityIsTransparent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VideoAlphaUnityIsTransparent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoColorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoColorSpace? VideoColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoCompressor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VideoCompressor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoFieldOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoFieldOrder? VideoFieldOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoFrameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoFrameRate? VideoFrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoFrameSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension VideoFrameSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoPixelDepth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VideoPixelDepth? VideoPixelDepth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoPixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VideoPixelAspectRatio { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpDM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpDM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TimeCode 
    {
        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeFormat? TimeFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("timeValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeValue { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeCode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeCode>(data);
        }
    }
    
    /// <summary>Corresponds to Timecode.TimeFormatChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TimeFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "Timecode24")]
        Timecode24 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode25")]
        Timecode25 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode2997Drop")]
        Timecode2997Drop = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode2997NonDrop")]
        Timecode2997NonDrop = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode30")]
        Timecode30 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode50")]
        Timecode50 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode5994Drop")]
        Timecode5994Drop = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode5994NonDrop")]
        Timecode5994NonDrop = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode60")]
        Timecode60 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Timecode23976")]
        Timecode23976 = 9,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioChannelTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum AudioChannelType
    {
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_MONO")]
        CHANNEL_MONO = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_STEREO")]
        CHANNEL_STEREO = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_5_1")]
        CHANNEL_5_1 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_7_1")]
        CHANNEL_7_1 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_16")]
        CHANNEL_16 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHANNEL_OTHER")]
        CHANNEL_OTHER = 5,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioSampleTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum AudioSampleType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_8_INT")]
        SAMPLE_8_INT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_16_INT")]
        SAMPLE_16_INT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_24_INT")]
        SAMPLE_24_INT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_32_INT")]
        SAMPLE_32_INT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_32_FLOAT")]
        SAMPLE_32_FLOAT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_COMPRESSED")]
        SAMPLE_COMPRESSED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_PACKED")]
        SAMPLE_PACKED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAMPLE_OTHER")]
        SAMPLE_OTHER = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BeatSpliceStretch 
    {
        [Newtonsoft.Json.JsonProperty("riseInDecibel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? RiseInDecibel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("riseInTimeDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time RiseInTimeDuration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("useFileBeatsMarker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseFileBeatsMarker { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BeatSpliceStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BeatSpliceStretch>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Time 
    {
        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scale { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Time FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Time>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.CameraAngleChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum CameraAngle
    {
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_LOW")]
        ANGLE_LOW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_EYE_LEVEL")]
        ANGLE_EYE_LEVEL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_HIGH")]
        ANGLE_HIGH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_OVERHEAD_SHOT")]
        ANGLE_OVERHEAD_SHOT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_BIRDS_EYE_SHOT")]
        ANGLE_BIRDS_EYE_SHOT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_DUTCH")]
        ANGLE_DUTCH = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_POV")]
        ANGLE_POV = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_OVER_THE_SHOULDER")]
        ANGLE_OVER_THE_SHOULDER = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ANGLE_REACTION_SHOT")]
        ANGLE_REACTION_SHOT = 8,
    
    }
    
    /// <summary>Corresponds to xmpDM.CameraMoveChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum CameraMove
    {
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_AERIAL")]
        MOVE_AERIAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_BOOM_UP")]
        MOVE_BOOM_UP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_BOOM_DOWN")]
        MOVE_BOOM_DOWN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_CRANE_UP")]
        MOVE_CRANE_UP = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_CRANE_DOWN")]
        MOVE_CRANE_DOWN = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_DOLLY_IN")]
        MOVE_DOLLY_IN = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_DOLLY_OUT")]
        MOVE_DOLLY_OUT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PAN_LEFT")]
        MOVE_PAN_LEFT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PAN_RIGHT")]
        MOVE_PAN_RIGHT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PEDESTAL_UP")]
        MOVE_PEDESTAL_UP = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_PEDESTAL_DOWN")]
        MOVE_PEDESTAL_DOWN = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TILT_UP")]
        MOVE_TILT_UP = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TILT_DOWN")]
        MOVE_TILT_DOWN = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TRACKING")]
        MOVE_TRACKING = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TRUCK_LEFT")]
        MOVE_TRUCK_LEFT = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_TRUCK_RIGHT")]
        MOVE_TRUCK_RIGHT = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_ZOOM_IN")]
        MOVE_ZOOM_IN = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "MOVE_ZOOM_OUT")]
        MOVE_ZOOM_OUT = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Media 
    {
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("managed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Managed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Time StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("track", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Track { get; set; }
    
        [Newtonsoft.Json.JsonProperty("webStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebStatement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Media FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Media>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.AudioMusicalKeyChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum AudioMusicalKey
    {
        [System.Runtime.Serialization.EnumMember(Value = "KEY_C")]
        KEY_C = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_C_SHARP")]
        KEY_C_SHARP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_D")]
        KEY_D = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_D_SHARP")]
        KEY_D_SHARP = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_E")]
        KEY_E = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_F")]
        KEY_F = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_F_SHARP")]
        KEY_F_SHARP = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_G")]
        KEY_G = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_G_SHARP")]
        KEY_G_SHARP = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_A")]
        KEY_A = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_A_SHARP")]
        KEY_A_SHARP = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "KEY_B")]
        KEY_B = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Marker 
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cuePointParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> CuePointParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cuePointType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CuePointType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("probability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Probability { get; set; }
    
        [Newtonsoft.Json.JsonProperty("speaker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Speaker { get; set; }
    
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarkerType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Marker FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Marker>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Media.Marker.TypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum MarkerType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Chapter")]
        Chapter = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Cue")]
        Cue = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Index")]
        Index = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Speech")]
        Speech = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Track")]
        Track = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ProjectLink 
    {
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectLinkType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ProjectLink FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectLink>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Media.ProjectLink.TypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ProjectLinkType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Movie")]
        Movie = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Still")]
        Still = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Audio")]
        Audio = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Custom")]
        Custom = 3,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoPullDownChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum VideoPullDown
    {
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WSSWW")]
        PULLDOWN_WSSWW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_SSWWW")]
        PULLDOWN_SSWWW = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_SWWWS")]
        PULLDOWN_SWWWS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWWSS")]
        PULLDOWN_WWWSS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWSSW")]
        PULLDOWN_WWSSW = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWWSW")]
        PULLDOWN_WWWSW = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWSWW")]
        PULLDOWN_WWSWW = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WSWWW")]
        PULLDOWN_WSWWW = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_SWWWW")]
        PULLDOWN_SWWWW = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "PULLDOWN_WWWWS")]
        PULLDOWN_WWWWS = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ResampleStretch 
    {
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Quality? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ResampleStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResampleStretch>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Media.resampleStretch.QualityChoice and Xmp.Media.timeScaleStretch.QualityChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Quality
    {
        [System.Runtime.Serialization.EnumMember(Value = "High")]
        High = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Medium")]
        Medium = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Low")]
        Low = 2,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioMusicalScaleTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum AudioMusicalScaleType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_MAJOR")]
        SCALE_MAJOR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_MINOR")]
        SCALE_MINOR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_BOTH")]
        SCALE_BOTH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCALE_NEITHER")]
        SCALE_NEITHER = 3,
    
    }
    
    /// <summary>Corresponds to xmpDM.ShotSizeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ShotSize
    {
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_ECU")]
        SHOT_ECU = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_MCU")]
        SHOT_MCU = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_CU")]
        SHOT_CU = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_MS")]
        SHOT_MS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_WS")]
        SHOT_WS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_MWS")]
        SHOT_MWS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SHOT_EWS")]
        SHOT_EWS = 6,
    
    }
    
    /// <summary>Corresponds to xmpDM.AudioStretchModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum AudioStretchMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_FIXED_LENGTH")]
        STRETCH_FIXED_LENGTH = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_TIME_SCALE")]
        STRETCH_TIME_SCALE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_RESAMPLE")]
        STRETCH_RESAMPLE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_BEAT_SPLICE")]
        STRETCH_BEAT_SPLICE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "STRETCH_HYBRID")]
        STRETCH_HYBRID = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TimeScaleStretch 
    {
        [Newtonsoft.Json.JsonProperty("frameOverlappingPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FrameOverlappingPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("frameSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FrameSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Quality? Quality { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TimeScaleStretch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeScaleStretch>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.TimeSignatureChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum TimeSignature
    {
        [System.Runtime.Serialization.EnumMember(Value = "TIME_2_4")]
        TIME_2_4 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_3_4")]
        TIME_3_4 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_4_4")]
        TIME_4_4 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_5_4")]
        TIME_5_4 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_7_4")]
        TIME_7_4 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_6_8")]
        TIME_6_8 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_9_8")]
        TIME_9_8 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_12_8")]
        TIME_12_8 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_OTHER")]
        TIME_OTHER = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Track 
    {
        [Newtonsoft.Json.JsonProperty("frameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("markers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Marker> Markers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trackName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("trackType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MarkerType? TrackType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Track FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Track>(data);
        }
    }
    
    /// <summary>Corresponds to xmpDM.VideoAlphaModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum VideoAlphaMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "ALPHA_MODE_STRAIGHT")]
        ALPHA_MODE_STRAIGHT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALPHA_MODE_PREMULTIPLIED")]
        ALPHA_MODE_PREMULTIPLIED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALPHA_MODE_NONE")]
        ALPHA_MODE_NONE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpG 
    {
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? A { get; set; }
    
        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? B { get; set; }
    
        [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? L { get; set; }
    
        [Newtonsoft.Json.JsonProperty("black", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Black { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cyan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Cyan { get; set; }
    
        [Newtonsoft.Json.JsonProperty("magenta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Magenta { get; set; }
    
        [Newtonsoft.Json.JsonProperty("yellow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Yellow { get; set; }
    
        [Newtonsoft.Json.JsonProperty("blue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Blue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("green", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Green { get; set; }
    
        [Newtonsoft.Json.JsonProperty("red", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Red { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorantMode? Mode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("swatchName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwatchName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorantType? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpG FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpG>(data);
        }
    }
    
    /// <summary>Corresponds to xmpG.ModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ColorantMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "CMYK")]
        CMYK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "RGB")]
        RGB = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LAB")]
        LAB = 2,
    
    }
    
    /// <summary>Corresponds to xmpG.TypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ColorantType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Process")]
        Process = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Spot")]
        Spot = 1,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoColorSpaceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum VideoColorSpace
    {
        [System.Runtime.Serialization.EnumMember(Value = "COLOR_SPACE_SRGB")]
        COLOR_SPACE_SRGB = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "COLOR_SPACE_CCIR_601")]
        COLOR_SPACE_CCIR_601 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "COLOR_SPACE_CCIR_709")]
        COLOR_SPACE_CCIR_709 = 2,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoFieldOrderChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum VideoFieldOrder
    {
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_ORDER_UPPER")]
        FIELD_ORDER_UPPER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_ORDER_LOWER")]
        FIELD_ORDER_LOWER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "FIELD_ORDER_PROGRESSIVE")]
        FIELD_ORDER_PROGRESSIVE = 2,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoFrameRateChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum VideoFrameRate
    {
        [System.Runtime.Serialization.EnumMember(Value = "FRAME_RATE_24")]
        FRAME_RATE_24 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FRAME_RATE_NTSC")]
        FRAME_RATE_NTSC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "FRAME_RATE_PAL")]
        FRAME_RATE_PAL = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Dimension 
    {
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Unit? Unit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Dimension FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dimension>(data);
        }
    }
    
    /// <summary>Corresponds to stDim.UnitChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Unit
    {
        [System.Runtime.Serialization.EnumMember(Value = "Inch")]
        Inch = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Millimeter")]
        Millimeter = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeter")]
        Centimeter = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pixel")]
        Pixel = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pica")]
        Pica = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Point")]
        Point = 5,
    
    }
    
    /// <summary>Corresponds to xmpDM.VideoPixelDepthChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum VideoPixelDepth
    {
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_8_INT")]
        PIXEL_DEPTH_8_INT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_16_INT")]
        PIXEL_DEPTH_16_INT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_24_INT")]
        PIXEL_DEPTH_24_INT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_32_INT")]
        PIXEL_DEPTH_32_INT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_32_FLOAT")]
        PIXEL_DEPTH_32_FLOAT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PIXEL_DEPTH_OTHER")]
        PIXEL_DEPTH_OTHER = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Xmpidq 
    {
        [Newtonsoft.Json.JsonProperty("scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Xmpidq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Xmpidq>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpMM 
    {
        [Newtonsoft.Json.JsonProperty("derivedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference DerivedFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("history", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Event> History { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ingredients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Reference> Ingredients { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("managedFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Reference ManagedFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manageTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manageUI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageUI { get; set; }
    
        [Newtonsoft.Json.JsonProperty("managerVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManagerVariant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalDocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("renditionClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionClass { get; set; }
    
        [Newtonsoft.Json.JsonProperty("renditionParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("versionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VersionInfo> Versions { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpMM FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpMM>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Reference 
    {
        [Newtonsoft.Json.JsonProperty("alternatePaths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AlternatePaths { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fromPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromPart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instanceID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstanceID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastModifyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastModifyDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manager", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Manager { get; set; }
    
        [Newtonsoft.Json.JsonProperty("managerVariant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManagerVariant { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manageTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("manageUI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManageUI { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maskMarkers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MaskMarkers? MaskMarkers { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalDocumentID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocumentID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("partMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartMapping { get; set; }
    
        [Newtonsoft.Json.JsonProperty("renditionClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionClass { get; set; }
    
        [Newtonsoft.Json.JsonProperty("renditionParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenditionParams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("toPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToPart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("versionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionID { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Reference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Reference>(data);
        }
    }
    
    /// <summary>Corresponds to stRef.MaskMarkersChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum MaskMarkers
    {
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpNote 
    {
        [Newtonsoft.Json.JsonProperty("hasExtendedXMP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HasExtendedXMP { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpNote FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpNote>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpRights 
    {
        [Newtonsoft.Json.JsonProperty("certificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("marked", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Marked { get; set; }
    
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usageTerms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> UsageTerms { get; set; }
    
        [Newtonsoft.Json.JsonProperty("webStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebStatement { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpRights FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpRights>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class XmpTPg 
    {
        [Newtonsoft.Json.JsonProperty("colorants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<XmpG> Colorants { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Font> Fonts { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxPageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension MaxPageSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NPages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("plateNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PlateNames { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static XmpTPg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XmpTPg>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Font 
    {
        [Newtonsoft.Json.JsonProperty("childFontFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ChildFontFiles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("composite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Composite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fontFace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fontFamily", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFamily { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fontFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFileName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fontName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fontType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FontType? FontType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("versionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionString { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Font FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Font>(data);
        }
    }
    
    /// <summary>Corresponds to stFnt.FontTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum FontType
    {
        [System.Runtime.Serialization.EnumMember(Value = "TrueType")]
        TrueType = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Type1")]
        Type1 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OpenType")]
        OpenType = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "OpenTypeCFF")]
        OpenTypeCFF = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ExifMetadata 
    {
        [Newtonsoft.Json.JsonProperty("exif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Exif Exif { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exifAux", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExifAux ExifAux { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExifMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExifMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Exif 
    {
        [Newtonsoft.Json.JsonProperty("apertureValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApertureValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brightnessValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrightnessValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cfaPattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CFAPattern CfaPattern { get; set; }
    
        [Newtonsoft.Json.JsonProperty("colorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ColorSpace? ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("componentsConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> ComponentsConfiguration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("compressedBitsPerPixel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompressedBitsPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contrast", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Contrast? Contrast { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customRendered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomRendered? CustomRendered { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateTimeOriginal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTimeOriginal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateTimeDigitized", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DateTimeDigitized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deviceSettingDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeviceSettings DeviceSettingDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("digitalZoomRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DigitalZoomRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exifVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExifVersion? ExifVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exposureBiasValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureBiasValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exposureIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureIndex { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exposureMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExposureMode? ExposureMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exposureProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExposureProgram? ExposureProgram { get; set; }
    
        [Newtonsoft.Json.JsonProperty("exposureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposureTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileSource? FileSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("flash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Flash Flash { get; set; }
    
        [Newtonsoft.Json.JsonProperty("flashEnergy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlashEnergy { get; set; }
    
        [Newtonsoft.Json.JsonProperty("flashpixVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlashpixVersion? FlashpixVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("focalLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("focalLengthIn35mmFilm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FocalLengthIn35mmFilm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("focalPlaneResolutionUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FocalPlaneResolutionUnit? FocalPlaneResolutionUnit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("focalPlaneXResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPlaneXResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("focalPlaneYResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FocalPlaneYResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gainControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GainControl? GainControl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsAltitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsAltitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsAltitudeRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSAltitudeRef? GpsAltitudeRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsAreaInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsAreaInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsDestBearing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsDestBearing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsDestBearingRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSDestBearingRef? GpsDestBearingRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsDestDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsDestDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsDestDistanceRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSDestDistanceRef? GpsDestDistanceRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsDestLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsDestLatitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsDestLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsDestLongitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsDifferential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSDifferential? GpsDifferential { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsdop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gpsdop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsImgDirection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsImgDirection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsImgDirectionRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSImgDirectionRef? GpsImgDirectionRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsCoordinate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GPSCoordinate GpsCoordinate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsLatitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsLatitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsLongitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsLongitude { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsMapDatum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsMapDatum { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsMeasureMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsMeasureMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsProcessingMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsProcessingMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsSatellites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsSatellites { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsSpeed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsSpeed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsSpeedRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSSpeedRef? GpsSpeedRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GPSStatus? GpsStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsTimeStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? GpsTimeStamp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsTrack", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsTrack { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsTrackRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsTrackRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gpsVersionID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GpsVersionID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageUniqueID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUniqueID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isoSpeedRatings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> IsoSpeedRatings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lightSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LightSource? LightSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxApertureValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxApertureValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("meteringMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeteringMode? MeteringMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oecf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OECF Oecf { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pixelXDimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PixelXDimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pixelYDimension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PixelYDimension { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relatedSoundFile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedSoundFile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("saturation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Saturation? Saturation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sceneCaptureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SceneCaptureType? SceneCaptureType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sceneType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SceneType? SceneType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sensingMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SensingMethod? SensingMethod { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sharpness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sharpness? Sharpness { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shutterSpeedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShutterSpeedValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("spatialFrequencyResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SFR SpatialFrequencyResponse { get; set; }
    
        [Newtonsoft.Json.JsonProperty("spectralSensitivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpectralSensitivity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subjectArea", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> SubjectArea { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subjectDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubjectDistance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subjectDistanceRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubjectDistanceRange? SubjectDistanceRange { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subjectLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> SubjectLocation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> UserComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("whiteBalance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WhiteBalanceExif? WhiteBalance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nativeDigest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NativeDigest { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Exif FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Exif>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class CFAPattern 
    {
        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Values { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CFAPattern FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CFAPattern>(data);
        }
    }
    
    /// <summary>Corresponds to exif.ColorSpaceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ColorSpace
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "sRGB")]
        SRGB = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "AdobeRGB")]
        AdobeRGB = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Uncalibrated")]
        Uncalibrated = 3,
    
    }
    
    /// <summary>Corresponds to exif.ContrastChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Contrast
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Soft")]
        Soft = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hard")]
        Hard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>Corresponds to exif.CustomRenderedChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum CustomRendered
    {
        [System.Runtime.Serialization.EnumMember(Value = "NormalProcess")]
        NormalProcess = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CustomProcess")]
        CustomProcess = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DeviceSettings 
    {
        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Settings { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DeviceSettings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeviceSettings>(data);
        }
    }
    
    /// <summary>Corresponds to exif.ExifVersionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ExifVersion
    {
        [System.Runtime.Serialization.EnumMember(Value = "V210")]
        V210 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "V220")]
        V220 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "V221")]
        V221 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "V222")]
        V222 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "V230")]
        V230 = 4,
    
    }
    
    /// <summary>Corresponds to exif.ExposureModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ExposureMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "AutoBracket")]
        AutoBracket = 2,
    
    }
    
    /// <summary>Corresponds to exif.ExposureProgramChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum ExposureProgram
    {
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "NormalProgram")]
        NormalProgram = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "AperturePriority")]
        AperturePriority = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ShutterPriority")]
        ShutterPriority = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "CreativeProgram")]
        CreativeProgram = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "ActionProgram")]
        ActionProgram = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "PortraitMode")]
        PortraitMode = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "LandscapeMode")]
        LandscapeMode = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 9,
    
    }
    
    /// <summary>Corresponds to exif.FileSourceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum FileSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "Other")]
        Other = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TransparentScanner")]
        TransparentScanner = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ReflexScanner")]
        ReflexScanner = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DSC")]
        DSC = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Flash 
    {
        [Newtonsoft.Json.JsonProperty("fired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("return", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlashReturn? Return { get; set; }
    
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FlashMode? Mode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Function { get; set; }
    
        [Newtonsoft.Json.JsonProperty("redEyeMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RedEyeMode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Flash FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Flash>(data);
        }
    }
    
    /// <summary>Corresponds to Xmp.Structure.Flash.ReturnChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum FlashReturn
    {
        [System.Runtime.Serialization.EnumMember(Value = "NoStrobeReturnDetection")]
        NoStrobeReturnDetection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "StrobeReturnLightNotDetected")]
        StrobeReturnLightNotDetected = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "StrobeReturnLightDetected")]
        StrobeReturnLightDetected = 2,
    
    }
    
    /// <summary>Corresponds to Xmp.Structure.Flash.ModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum FlashMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CompulsoryFlashFiring")]
        CompulsoryFlashFiring = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CompulsoryFlashSuppression")]
        CompulsoryFlashSuppression = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "AutoMode")]
        AutoMode = 3,
    
    }
    
    /// <summary>Corresponds to exif.FlashpixVersionChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum FlashpixVersion
    {
        [System.Runtime.Serialization.EnumMember(Value = "V100")]
        V100 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "V101")]
        V101 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "V110")]
        V110 = 2,
    
    }
    
    /// <summary>Corresponds to exif.FocalPlaneResolutionUnitChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum FocalPlaneResolutionUnit
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Inch")]
        Inch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Meter")]
        Meter = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Centimeter")]
        Centimeter = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Millimeter")]
        Millimeter = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Micrometer")]
        Micrometer = 5,
    
    }
    
    /// <summary>Corresponds to exif.GainControlChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GainControl
    {
        [System.Runtime.Serialization.EnumMember(Value = "None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LowGainUp")]
        LowGainUp = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HighGainUp")]
        HighGainUp = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "LowGainDown")]
        LowGainDown = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "HighGainDown")]
        HighGainDown = 4,
    
    }
    
    /// <summary>Corresponds to exif.GPSAltitudeRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GPSAltitudeRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "AboveSeaLevel")]
        AboveSeaLevel = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "BelowSeaLevel")]
        BelowSeaLevel = 1,
    
    }
    
    /// <summary>Corresponds to exif.GPSDestBearingRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GPSDestBearingRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "TrueDirection")]
        TrueDirection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MagneticDirection")]
        MagneticDirection = 1,
    
    }
    
    /// <summary>Corresponds to exif.GPSDestDistanceRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GPSDestDistanceRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "Kilometers")]
        Kilometers = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Miles")]
        Miles = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Knots")]
        Knots = 2,
    
    }
    
    /// <summary>Corresponds to exif.GPSDifferentialChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GPSDifferential
    {
        [System.Runtime.Serialization.EnumMember(Value = "WithoutCorrection")]
        WithoutCorrection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "WithCorrection")]
        WithCorrection = 1,
    
    }
    
    /// <summary>Corresponds to exif.GPSImgDirectionRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GPSImgDirectionRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "TrueDirection")]
        TrueDirection = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MagneticDirection")]
        MagneticDirection = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class GPSCoordinate 
    {
        [Newtonsoft.Json.JsonProperty("lon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Lon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Lat { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GPSCoordinate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GPSCoordinate>(data);
        }
    }
    
    /// <summary>Corresponds to exif.GPSSpeedRefChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GPSSpeedRef
    {
        [System.Runtime.Serialization.EnumMember(Value = "KilometersPerHour")]
        KilometersPerHour = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MilesPerHour")]
        MilesPerHour = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Knots")]
        Knots = 2,
    
    }
    
    /// <summary>Corresponds to exif.GPSStatusChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum GPSStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "MeasurementInProgress")]
        MeasurementInProgress = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MeasurementIsInteroperability")]
        MeasurementIsInteroperability = 1,
    
    }
    
    /// <summary>Corresponds to exif.LightSourceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum LightSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unidentified")]
        Unidentified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Daylight")]
        Daylight = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Fluorescent")]
        Fluorescent = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Tungsten")]
        Tungsten = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Flash")]
        Flash = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "FineWeather")]
        FineWeather = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "CloudyWeather")]
        CloudyWeather = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Shade")]
        Shade = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "DaylightFluorescent")]
        DaylightFluorescent = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "DayWhiteFluorescent")]
        DayWhiteFluorescent = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "CoolWhiteFluorescent")]
        CoolWhiteFluorescent = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "WhiteFluorescent")]
        WhiteFluorescent = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardIlluminantA")]
        StandardIlluminantA = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardIlluminantB")]
        StandardIlluminantB = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "StandardIlluminantC")]
        StandardIlluminantC = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "D55Illuminant")]
        D55Illuminant = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "D65Illuminant")]
        D65Illuminant = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "D75Illuminant")]
        D75Illuminant = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "D50Illuminant")]
        D50Illuminant = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "ISOStudioTungsten")]
        ISOStudioTungsten = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "Other")]
        Other = 20,
    
    }
    
    /// <summary>Corresponds to exif.MeteringModeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum MeteringMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unidentified")]
        Unidentified = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Average")]
        Average = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CenterWeightedAverage")]
        CenterWeightedAverage = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Spot")]
        Spot = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "MultiSpot")]
        MultiSpot = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "Pattern")]
        Pattern = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "Partial")]
        Partial = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "Reserved")]
        Reserved = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "Other")]
        Other = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OECF 
    {
        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OECF FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OECF>(data);
        }
    }
    
    /// <summary>Corresponds to exif.SaturationChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Saturation
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Low")]
        Low = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "High")]
        High = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>Corresponds to exif.SceneCaptureTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum SceneCaptureType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Standard")]
        Standard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Landscape")]
        Landscape = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Portrait")]
        Portrait = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "NightScene")]
        NightScene = 3,
    
    }
    
    /// <summary>Corresponds to exif.SceneTypeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum SceneType
    {
        [System.Runtime.Serialization.EnumMember(Value = "DirectlyPhotographedImage")]
        DirectlyPhotographedImage = 0,
    
    }
    
    /// <summary>Corresponds to exif.SensingMethodChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum SensingMethod
    {
        [System.Runtime.Serialization.EnumMember(Value = "Undefined")]
        Undefined = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MonochromeArea")]
        MonochromeArea = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OneChipColourAreaSensor")]
        OneChipColourAreaSensor = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TwoChipColourAreaSensor")]
        TwoChipColourAreaSensor = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThreeChipColourAreaSensor")]
        ThreeChipColourAreaSensor = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ColourSequentialAreaSensor")]
        ColourSequentialAreaSensor = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "MonochromeLinearArea")]
        MonochromeLinearArea = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "TrilinearSensor")]
        TrilinearSensor = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "ColourSequentialLinearSensor")]
        ColourSequentialLinearSensor = 8,
    
    }
    
    /// <summary>Corresponds to exif.SharpnessChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum Sharpness
    {
        [System.Runtime.Serialization.EnumMember(Value = "Normal")]
        Normal = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Soft")]
        Soft = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Hard")]
        Hard = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class SFR 
    {
        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Columns { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows { get; set; }
    
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Names { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SFR FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SFR>(data);
        }
    }
    
    /// <summary>Corresponds to exif.SubjectDistanceRangeChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum SubjectDistanceRange
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Macro")]
        Macro = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CloseView")]
        CloseView = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "DistantView")]
        DistantView = 3,
    
    }
    
    /// <summary>Corresponds to exif.WhiteBalanceChoice</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum WhiteBalanceExif
    {
        [System.Runtime.Serialization.EnumMember(Value = "Auto")]
        Auto = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Manual")]
        Manual = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Unknown")]
        Unknown = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ExifAux 
    {
        [Newtonsoft.Json.JsonProperty("lens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lens { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExifAux FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExifAux>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AudioMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class AudioStream 
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bitRateMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRateMode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channelPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelPositions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("samplingRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SamplingRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AudioStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AudioStream>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DocumentMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("applicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }
    
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("documentTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentTitle { get; set; }
    
        [Newtonsoft.Json.JsonProperty("characterCount", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("characterCountWithSpaces", Required = Newtonsoft.Json.Required.Always)]
        public int CharacterCountWithSpaces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lineCount", Required = Newtonsoft.Json.Required.Always)]
        public int LineCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Always)]
        public int PageCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("slideCount", Required = Newtonsoft.Json.Required.Always)]
        public int SlideCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("paragraphCount", Required = Newtonsoft.Json.Required.Always)]
        public int ParagraphCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("revisionNumber", Required = Newtonsoft.Json.Required.Always)]
        public int RevisionNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Titles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageTitles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ImageTitles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("epsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EpsMetadata EpsInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("embeddedFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FileMetadata> EmbeddedFiles { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DocumentMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class EpsMetadata 
    {
        [Newtonsoft.Json.JsonProperty("isRasterized", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRasterized { get; set; }
    
        [Newtonsoft.Json.JsonProperty("widthInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInPoints { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heightInPoints", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInPoints { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static EpsMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpsMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ImageMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("widthInInch", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heightInInch", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInInch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("widthInCm", Required = Newtonsoft.Json.Required.Always)]
        public double WidthInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("heightInCm", Required = Newtonsoft.Json.Required.Always)]
        public double HeightInCm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("colorSpace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorSpace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("colorProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorProfile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bitsPerPixel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerPixel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bitsPerChannel", Required = Newtonsoft.Json.Required.Always)]
        public int BitsPerChannel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pixelFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PixelFormat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAlpha", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAlpha { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isIndexed", Required = Newtonsoft.Json.Required.Always)]
        public bool IsIndexed { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isExtended", Required = Newtonsoft.Json.Required.Always)]
        public bool IsExtended { get; set; }
    
        [Newtonsoft.Json.JsonProperty("horizontalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double HorizontalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("verticalResolution", Required = Newtonsoft.Json.Required.Always)]
        public double VerticalResolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalFrames", Required = Newtonsoft.Json.Required.Always)]
        public int TotalFrames { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalUnspecifiedTiffExtraChannels", Required = Newtonsoft.Json.Required.Always)]
        public int TotalUnspecifiedTiffExtraChannels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasExifData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasExifData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasIptcData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasIptcData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasAdobeResourceData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasAdobeResourceData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hasXmpData", Required = Newtonsoft.Json.Required.Always)]
        public bool HasXmpData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uncompressedSizeInBytes", Required = Newtonsoft.Json.Required.Always)]
        public long UncompressedSizeInBytes { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ImageMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ImageMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class VideoMetadata : FileMetadata
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("overallBitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OverallBitrate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("videoStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VideoStream> VideoStreams { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audioStreams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AudioStream> AudioStreams { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class VideoStream 
    {
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BitRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Codec { get; set; }
    
        [Newtonsoft.Json.JsonProperty("displayAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationInSeconds", Required = Newtonsoft.Json.Required.Always)]
        public double DurationInSeconds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }
    
        [Newtonsoft.Json.JsonProperty("frameCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("frameRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FrameRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pixelAspectRatio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PixelAspectRatio { get; set; }
    
        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Resolution { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streamSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? StreamSize { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rotation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rotation { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static VideoStream FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoStream>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DriveMetadata 
    {
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fileType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriveMetadataAudit Audit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadata>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class DriveMetadataAudit 
    {
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modified { get; set; }
    
        [Newtonsoft.Json.JsonProperty("opened", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Opened { get; set; }
    
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DriveMetadataAudit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DriveMetadataAudit>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OutputItem 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePath { get; set; }
    
        [Newtonsoft.Json.JsonProperty("outputSource", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OutputSource OutputSource { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OutputItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum OutputSource
    {
        [System.Runtime.Serialization.EnumMember(Value = "Rendered")]
        Rendered = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Embedded")]
        Embedded = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransfer2ContentCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransfer2ContentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransfer2ContentCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransferPartial2ContentCreateRequest 
    {
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FileTransferCreateItem> Items { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferPartial2ContentCreateRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferPartial2ContentCreateRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransferCreateItem 
    {
        [Newtonsoft.Json.JsonProperty("fileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileId { get; set; }
    
        /// <summary>An optional id list of schemas with type layer.</summary>
        [Newtonsoft.Json.JsonProperty("layerSchemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> LayerSchemaIds { get; set; }
    
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DataDictionary Metadata { get; set; }
    
        /// <summary>An optional id list of content permission sets. Controls content accessibility outside of content ownership.</summary>
        [Newtonsoft.Json.JsonProperty("contentPermissionSetIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentPermissionSetIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferCreateItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferCreateItem>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TransferSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfTransfer 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Transfer> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfTransfer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class TransferSearchResult : BaseResultOfTransfer
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TransferSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransferSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfFileTransfer 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FileTransfer> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfFileTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfFileTransfer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransferSearchResult : BaseResultOfFileTransfer
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransferSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransferSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class FileTransfer 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransferId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileTransferState State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FileTransfer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FileTransfer>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserSearchRequest 
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        /// <summary>Allow the backend to modify the search string if it generates a non valid query</summary>
        [Newtonsoft.Json.JsonProperty("allowSearchStringRewrite", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowSearchStringRewrite { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }
    
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lifeCycleFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifeCycleFilter LifeCycleFilter { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserSearchRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSearchRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class BaseResultOfUser 
    {
        [Newtonsoft.Json.JsonProperty("totalResults", Required = Newtonsoft.Json.Required.Always)]
        public long TotalResults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<User> Results { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pageToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageToken { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BaseResultOfUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaseResultOfUser>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class RewritableBaseResultOfUser : BaseResultOfUser
    {
        [Newtonsoft.Json.JsonProperty("searchString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchString { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSearchStringRewritten", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSearchStringRewritten { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RewritableBaseResultOfUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RewritableBaseResultOfUser>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserSearchResult : RewritableBaseResultOfUser
    {
        [Newtonsoft.Json.JsonProperty("elapsedMilliseconds", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedMilliseconds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserSearchResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserSearchResult>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class User : UserItem
    {
        [Newtonsoft.Json.JsonProperty("userRoleIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> UserRoleIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static User FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserDetail : UserItem
    {
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserRole> UserRoles { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("drives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Drive> Drives { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ownerTokens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OwnerToken> OwnerTokens { get; set; }
    
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDetail>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserAddress 
    {
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("alternativeAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternativeAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Department { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zip { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserAddress FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserAddress>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Drive 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Drive FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Drive>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class OwnerToken 
    {
        /// <summary>The ownertoken id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The id of the user to whom this ownertoken currently belongs to.</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OwnerToken FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OwnerToken>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public enum AuthorizationState
    {
        [System.Runtime.Serialization.EnumMember(Value = "Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Review")]
        Review = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Locked")]
        Locked = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class Channel 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sortOrder", Required = Newtonsoft.Json.Required.Always)]
        public int SortOrder { get; set; }
    
        /// <summary>The search index id.</summary>
        [Newtonsoft.Json.JsonProperty("searchIndexId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearchIndexId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entityType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityType EntityType { get; set; }
    
        /// <summary>An id list of schemas with schema type content whose content documents should be found by the simple search.
        /// The search by filters and aggregations are unaffected.</summary>
        [Newtonsoft.Json.JsonProperty("schemaIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SchemaIds { get; set; }
    
        /// <summary>An optional search filter. Limits the content document result set on each search and aggregation request.</summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterBase Filter { get; set; }
    
        /// <summary>Language specific names.</summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TranslatedStringDictionary Names { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SortInfo> Sort { get; set; }
    
        /// <summary>An optional list of aggregators. These aggregations are added by default on each aggregation requests.</summary>
        [Newtonsoft.Json.JsonProperty("aggregations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregatorBase> Aggregations { get; set; }
    
        /// <summary>An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.</summary>
        [Newtonsoft.Json.JsonProperty("extendedSimpleSearchFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ExtendedSimpleSearchFields { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Channel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Channel>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class ContentsByIdsRequest 
    {
        [Newtonsoft.Json.JsonProperty("contentIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContentIds { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ContentsByIdsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContentsByIdsRequest>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    public partial class UserProfile 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("languageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAddress Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("authorizationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationState AuthorizationState { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static UserProfile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserProfile>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.6.0.0")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, value.GetType().Name));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var type in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), false))
            {
                if (type.Key == discriminator)
                    return type.Type;
            }
    
            return objectType;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public class FileParameter
    {
        public FileParameter(System.IO.Stream data) 
            : this (data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
        {
            Data = data;
            FileName = fileName;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }
    }

    public class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public string StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == "206"; }
        }

        public FileResponse(string statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public class ApiException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.7.1.0")]
    public class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}