{
  "x-generator": "NSwag v11.2.0.0 (NJsonSchema v9.2.4.0)",
  "swagger": "2.0",
  "info": {
    "title": "Web API Swagger specification",
    "version": "1.0.0"
  },
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/V1/Contents/{ContentId}/Ownership/Transfer": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update Single - OwnershipTransfer",
        "description": "The update of content transfer is executed asynchronous. However, for the specified timeout completion of the update process is awaited.\nIf the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.",
        "operationId": "Content_UpdateTransferOwnership",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentOwnershipTransferRequest"
            },
            "x-nullable": true,
            "description": "The content ownership transfer request update request."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "ContentDoc",
            "schema": {
              "$ref": "#/definitions/ContentDoc"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Many": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get Many",
        "description": "Getting many of content is executed asynchronous. However, for the specified timeout completion of the process is awaited.\nIf the process is not completed by reaching the specified timeout, the process continues, but null is returned.",
        "operationId": "Content_GetMany",
        "parameters": [
          {
            "type": "array",
            "name": "contentIds",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of contentIds",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContentDetail"
              }
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Many/Ownership/Transfer": {
      "post": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_TransferOwnershipMany",
        "parameters": [
          {
            "name": "contentsOwnershipTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentsOwnershipTransferRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Aggregate": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Aggregate",
        "description": "Aggregates content as specified in the aggregation request.",
        "operationId": "Content_Aggregate",
        "parameters": [
          {
            "name": "contentAggregationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentAggregationRequest"
            },
            "x-nullable": true,
            "description": "The aggregation request."
          }
        ],
        "responses": {
          "200": {
            "description": "ObjectAggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/{ChannelId}/Aggregate": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Aggregate By Channel",
        "description": "Aggregates content as specified in the aggregation request and limits the aggregation results to the specified channel.",
        "operationId": "Content_AggregateByChannel",
        "parameters": [
          {
            "type": "string",
            "name": "ChannelId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The channel id"
          },
          {
            "name": "contentAggregationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentAggregationRequest"
            },
            "x-nullable": true,
            "description": "The content aggregation request."
          }
        ],
        "responses": {
          "200": {
            "description": "ObjectAggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/CreateBatchContentDownload": {
      "post": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_CreateDownloadLink",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentBatchDownloadRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentBatchDownloadItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Create Single",
        "description": "The creation of content is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.\nIf the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.",
        "operationId": "Content_CreateContent",
        "parameters": [
          {
            "name": "createRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContentRequest"
            },
            "x-nullable": true,
            "description": "The content create request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Downloads/{ContentId}/{OutputFormatId}": {
      "get": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_Download",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "OutputFormatId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Range",
            "in": "header",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            },
            "x-nullable": true
          },
          "206": {
            "description": "",
            "schema": {
              "type": "file"
            },
            "x-nullable": true
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Thumbnails/{ContentId}/{Size}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get Thumbnail",
        "description": "Provides a lightweight endpoint to get content thumbnails",
        "operationId": "Content_DownloadThumbnail",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The Content id"
          },
          {
            "type": "string",
            "name": "Size",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThumbnailSize"
            },
            "x-nullable": false,
            "description": "Thumbnail size. Either small, medium or large"
          }
        ],
        "responses": {
          "200": {
            "description": "HttpResponseMessage",
            "schema": {
              "type": "file"
            },
            "x-nullable": true
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Downloads/{ContentId}/{OutputFormatId}/{Width}/{Height}": {
      "get": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_DownloadResized",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "OutputFormatId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "Width",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "format": "int32"
          },
          {
            "type": "integer",
            "name": "Height",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "file"
            },
            "x-nullable": true
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/{ContentId}": {
      "get": {
        "tags": [
          "Content"
        ],
        "summary": "Get Single",
        "description": "Gets a content document by id.",
        "operationId": "Content_Get",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentNotFoundException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      },
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update Single - Metadata",
        "description": "The update of content metadata is executed asynchronous. However, for the specified timeout completion of the update process is awaited.\nIf the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.",
        "operationId": "Content_UpdateMetadata",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContentMetadataRequest"
            },
            "x-nullable": true,
            "description": "The metadata update request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/{ContentId}/Permissions": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update Single - Permissions",
        "description": "The update of content permissions is executed asynchronous. However, for the specified timeout completion of the update process is awaited.\nIf the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.",
        "operationId": "Content_UpdatePermissions",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContentPermissionsRequest"
            },
            "x-nullable": true,
            "description": "The content permission update request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the contents's content."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ContentDetail",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Search": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Search",
        "description": "Searches contents as specified in the search request.",
        "operationId": "Content_Search",
        "parameters": [
          {
            "name": "contentSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentSearchRequest"
            },
            "x-nullable": true,
            "description": "The content search request."
          }
        ],
        "responses": {
          "200": {
            "description": "ContentSearchResult",
            "schema": {
              "$ref": "#/definitions/ContentSearchResult"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/{ChannelId}/Search": {
      "post": {
        "tags": [
          "Content"
        ],
        "summary": "Search By Channel",
        "description": "Searches contents as specified in the search request and limits the search results to the specified channel.",
        "operationId": "Content_SearchByChannel",
        "parameters": [
          {
            "type": "string",
            "name": "ChannelId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The channel id."
          },
          {
            "name": "contentSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentSearchRequest"
            },
            "x-nullable": true,
            "description": "The content search request."
          }
        ],
        "responses": {
          "200": {
            "description": "ContentSearchResult",
            "schema": {
              "$ref": "#/definitions/ContentSearchResult"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/{ContentId}/Deactivate": {
      "put": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_Deactivate",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/{ContentId}/File": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update file",
        "description": "Update binary file of existing content",
        "operationId": "Content_UpdateFile",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The id of the content to replace"
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentFileUpdateRequest"
            },
            "x-nullable": true,
            "description": "Update request"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/{ContentId}/Reactivate": {
      "put": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_Reactivate",
        "parameters": [
          {
            "type": "string",
            "name": "ContentId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "format": "int32"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentDetail"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Many/Deactivate": {
      "post": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_DeactivateMany",
        "parameters": [
          {
            "name": "deactivationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentDeactivationRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Many/Reactivate": {
      "post": {
        "tags": [
          "Content"
        ],
        "operationId": "Content_ReactivateMany",
        "parameters": [
          {
            "name": "reactivationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentReactivationRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Many/Metadata": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update Many - Metadata",
        "description": "The metadata update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.",
        "operationId": "Content_UpdateMetadataMany",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentsMetadataUpdateRequest"
            },
            "x-nullable": true,
            "description": "The metadata update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Contents/Many/Permissions": {
      "put": {
        "tags": [
          "Content"
        ],
        "summary": "Update Many - Permissions",
        "description": "The permission update of multiple contents documents is executed asynchronous. To keep track of the update progress a business process is returned.",
        "operationId": "Content_UpdatePermissionsMany",
        "parameters": [
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateContentPermissionsRequest"
              }
            },
            "x-nullable": true,
            "description": "The permissions update request."
          }
        ],
        "responses": {
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/BusinessProcesses/Search": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "operationId": "BusinessProcess_Search",
        "parameters": [
          {
            "name": "businessProcessSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BusinessProcessSearchResult"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessSearchResult"
            },
            "x-nullable": true
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/BusinessProcesses/ProcessDefinitions/{ProcessDefinitionId}/Start": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "operationId": "BusinessProcess_Start",
        "parameters": [
          {
            "type": "string",
            "name": "ProcessDefinitionId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartProcessRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/BusinessProcesses/Processes/{ProcessId}/MarkAsEnded": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "operationId": "BusinessProcess_MarkAsEnded",
        "parameters": [
          {
            "type": "string",
            "name": "ProcessId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/V1/BusinessProcesses/Processes/{ProcessId}/Message": {
      "post": {
        "tags": [
          "BusinessProcess"
        ],
        "operationId": "BusinessProcess_SendMessage",
        "parameters": [
          {
            "type": "string",
            "name": "ProcessId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendMessageRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/V1/BusinessProcesses/{ProcessId}/Wait": {
      "get": {
        "tags": [
          "BusinessProcess"
        ],
        "operationId": "BusinessProcess_WaitForStates",
        "parameters": [
          {
            "type": "string",
            "name": "ProcessId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "states",
            "in": "query",
            "required": true,
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "format": "int32"
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/History/Search": {
      "post": {
        "tags": [
          "DocumentHistory"
        ],
        "operationId": "DocumentHistory_Search",
        "parameters": [
          {
            "name": "documentHistorySearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DocumentHistorySearchRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentHistorySearchResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/History/{Id}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "operationId": "DocumentHistory_Get",
        "parameters": [
          {
            "type": "string",
            "name": "Id",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentHistoryViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/History/{Id}/{Version}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "operationId": "DocumentHistory_GetVersion",
        "parameters": [
          {
            "type": "string",
            "name": "Id",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Version",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentHistoryViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/History/{Id}/Difference/{OldVersion}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "operationId": "DocumentHistory_GetDifferenceLatest",
        "parameters": [
          {
            "type": "string",
            "name": "Id",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "OldVersion",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "format": "int64"
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentHistoryDifferenceViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/History/{Id}/Difference/{OldVersion}/{NewVersion}": {
      "get": {
        "tags": [
          "DocumentHistory"
        ],
        "operationId": "DocumentHistory_GetDifference",
        "parameters": [
          {
            "type": "string",
            "name": "Id",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "integer",
            "name": "OldVersion",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "NewVersion",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "format": "int64"
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocumentHistoryDifferenceViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/JsonSchemas/{SchemaId}": {
      "get": {
        "tags": [
          "JsonSchema"
        ],
        "summary": "Get Json Schema",
        "description": "Get the json schema schematics for the provided schema.",
        "operationId": "JsonSchema_Get",
        "parameters": [
          {
            "type": "string",
            "name": "SchemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "Schema Id"
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "JsonSchemaViewItem",
            "schema": {},
            "x-nullable": true
          }
        }
      }
    },
    "/V1/ListItems": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Create Single",
        "description": "The creation of a single list item is executed asynchronous. However, for the specified timeout completion of the creation process is awaited.\nIf the creation process is not completed by reaching the specified timeout, the creation process continues, but null is returned.",
        "operationId": "ListItem_Create",
        "parameters": [
          {
            "name": "listItem",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemCreateRequest"
            },
            "x-nullable": true,
            "description": "List item create request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the list item's content."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "ListItemDetail",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/ListItems/Many": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Create Many",
        "description": "The creation of multiple list items is executed asynchronous. To keep track of the creation progress a business process is returned.",
        "operationId": "ListItem_CreateMany",
        "parameters": [
          {
            "name": "objects",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListItemCreateRequest"
              }
            },
            "x-nullable": true,
            "description": "A list of ListItemCreateRequests."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      },
      "delete": {
        "tags": [
          "ListItem"
        ],
        "summary": "Delete Many",
        "description": "The deletion of multiple list items is executed asynchronous. To keep track of the deletion progress a business process is returned.",
        "operationId": "ListItem_DeleteMany",
        "parameters": [
          {
            "type": "array",
            "name": "ids",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "The list item id list.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      },
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Update Many",
        "description": "The update of multiple list items is executed asynchronous. To keep track of the update progress a business process is returned.",
        "operationId": "ListItem_UpdateMany",
        "parameters": [
          {
            "name": "objects",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListItemUpdateRequest"
              }
            },
            "x-nullable": true,
            "description": "A list of ListItemUpdateRequests."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/ListItems/Aggregate": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Aggregate",
        "description": "Aggregates list items as specified in the aggregation request.",
        "operationId": "ListItem_Aggregate",
        "parameters": [
          {
            "name": "listItemAggregationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemAggregationRequest"
            },
            "x-nullable": true,
            "description": "The list item aggregation request."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "ObjectAggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/ListItems/Search": {
      "post": {
        "tags": [
          "ListItem"
        ],
        "summary": "Search",
        "description": "Searches list items as specified in the search request.",
        "operationId": "ListItem_Search",
        "parameters": [
          {
            "name": "listItemSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemSearchRequest"
            },
            "x-nullable": true,
            "description": "The list item search request."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "List item result set.",
            "schema": {
              "$ref": "#/definitions/BaseResultOfListItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/ListItems/{ObjectId}": {
      "delete": {
        "tags": [
          "ListItem"
        ],
        "summary": "Delete Single",
        "description": "The deletion of a single list item is executed asynchronous. However, for the specified timeout completion of the deletion process is awaited.\nIf the deletion process is not completed by reaching the specified timeout, the deletion process continues, but response is sent.",
        "operationId": "ListItem_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The list item id."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": ""
          }
        }
      }
    },
    "/V1/ListItems/{ListItemId}": {
      "get": {
        "tags": [
          "ListItem"
        ],
        "summary": "Get Single",
        "operationId": "ListItem_Get",
        "parameters": [
          {
            "type": "string",
            "name": "ListItemId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The list item id."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the list item's content."
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": true
          },
          "404": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "ListItem"
        ],
        "summary": "Update Single",
        "operationId": "ListItem_Update",
        "parameters": [
          {
            "type": "string",
            "name": "ListItemId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The list item id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItemUpdateRequest"
            },
            "x-nullable": true,
            "description": "The list item update request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the list item's content."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          },
          {
            "type": "array",
            "name": "patterns",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of display pattern ids. Resolves display values of referenced list items where the display pattern id matches.",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "ListItemDetail",
            "schema": {
              "$ref": "#/definitions/ListItemDetail"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/ListItems/{ProcessId}/Wait": {
      "get": {
        "tags": [
          "ListItem"
        ],
        "summary": "Wait For States",
        "description": "Waits for any specified business process states to be hit. If the timeout is reached, the wait process will be stopped and the wait result returned.",
        "operationId": "ListItem_WaitForStates",
        "parameters": [
          {
            "type": "string",
            "name": "ProcessId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The business process id."
          },
          {
            "type": "array",
            "name": "States",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma-separated list of business process states to wait for.",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "BusinessProcessWaitResult",
            "schema": {
              "$ref": "#/definitions/BusinessProcessWaitResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/ListItems/Import": {
      "get": {
        "tags": [
          "ListItem"
        ],
        "summary": "Import",
        "description": "Imports all schemas and optionally list items as specified in the json file. Duplicate schemas or list items in the target system will be omitted. ",
        "operationId": "ListItem_Import",
        "parameters": [
          {
            "type": "string",
            "name": "contentId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "The content id."
          },
          {
            "type": "string",
            "name": "fileTransferId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "The file transfer id."
          },
          {
            "type": "boolean",
            "name": "includeObjects",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Imports list items defined in the json import file."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/V1/LiveStream/Search": {
      "post": {
        "tags": [
          "LiveStream"
        ],
        "operationId": "LiveStream_Search",
        "parameters": [
          {
            "name": "liveStreamSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiveStreamSearchRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ObjectSearchResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Schemas": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get Many",
        "description": "Gets the schema detail informations by given schema ids.",
        "operationId": "Schema_GetAll",
        "parameters": [
          {
            "type": "array",
            "name": "ids",
            "in": "query",
            "x-nullable": true,
            "collectionFormat": "multi",
            "description": "Comma separated list of schema ids",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "SchemaDetailViewItem",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchemaDetailViewItem"
              }
            },
            "x-nullable": true
          }
        }
      },
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Create Single",
        "description": "The creation of a single schema is executed asynchronous. To keep track of the creation progress a business process is returned.",
        "operationId": "Schema_Create",
        "parameters": [
          {
            "name": "schema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaCreateRequest"
            },
            "x-nullable": true,
            "description": "The schema create request."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Schemas/{SchemaId}": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get Single",
        "description": "Gets the schema detail information by the schema id.",
        "operationId": "Schema_Get",
        "parameters": [
          {
            "type": "string",
            "name": "SchemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "SchemaDetailViewItem",
            "schema": {
              "$ref": "#/definitions/SchemaDetailViewItem"
            },
            "x-nullable": true
          }
        }
      },
      "put": {
        "tags": [
          "Schema"
        ],
        "summary": "Update Single",
        "description": "The update of a single schema is executed asynchronous. To keep track of the update progress a business process is returned.",
        "operationId": "Schema_Update",
        "parameters": [
          {
            "type": "string",
            "name": "SchemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          },
          {
            "name": "schema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaUpdateRequest"
            },
            "x-nullable": true,
            "description": "The schema update request."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      },
      "delete": {
        "tags": [
          "Schema"
        ],
        "summary": "Delete Single",
        "description": "The deletion of a single schema is executed asynchronous. To keep track of the deletion progress a business process is returned.",
        "operationId": "Schema_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "SchemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Schemas/{SchemaId}/Exists": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Exists",
        "description": "Checks if the schema or optionally the schema's field already exists.",
        "operationId": "Schema_Exists",
        "parameters": [
          {
            "type": "string",
            "name": "SchemaId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema id."
          },
          {
            "type": "string",
            "name": "fieldId",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "description": "The optional field id."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "ExistsResponse",
            "schema": {
              "$ref": "#/definitions/ExistsResponse"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Schemas/Search": {
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Search",
        "description": "Searches schemas as specified in the search request.",
        "operationId": "Schema_Search",
        "parameters": [
          {
            "name": "schemaSearchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaSearchRequest"
            },
            "x-nullable": true,
            "description": "The schema search request."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "Schema result set.",
            "schema": {
              "$ref": "#/definitions/BaseResultOfSchemaViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Permission/UserPermissions/{Permission}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get UserRight validation result",
        "description": "Validates if the User has a given UserRight",
        "operationId": "Permission_GetUserPermissions",
        "parameters": [
          {
            "type": "string",
            "name": "Permission",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRight"
            },
            "x-nullable": false,
            "description": "The UserRight to validate"
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "Boolean - user has permission",
            "schema": {
              "type": "boolean"
            },
            "x-nullable": false
          }
        }
      }
    },
    "/V1/Permission/ContentPermissionSets/Search": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Search Content Permissions",
        "description": "Searches content permission sets as specified in the search request.",
        "operationId": "Permission_SearchContentPermissions",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchRequest"
            },
            "x-nullable": true,
            "description": "The permission search request."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "PermissionSetSearchResult",
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Permission/ContentPermissionSets/{PermissionSetId}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Content Permission Single",
        "description": "Gets the content permission set detail information by the content permission set id.",
        "operationId": "Permission_GetContentPermissions",
        "parameters": [
          {
            "type": "string",
            "name": "PermissionSetId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The content permission set id."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "ContentPermissionSetDetailViewItem",
            "schema": {
              "$ref": "#/definitions/ContentPermissionSetDetailViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Permission/SchemaPermissionSets/Search": {
      "post": {
        "tags": [
          "Permission"
        ],
        "summary": "Search Schema Permissions",
        "description": "Searches schema permission sets as specified in the search request.",
        "operationId": "Permission_SearchSchemaPermissions",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchRequest"
            },
            "x-nullable": true,
            "description": "The permission search request."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "PermissionSetSearchResult",
            "schema": {
              "$ref": "#/definitions/PermissionSetSearchResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Permission/SchemaPermissionSets/{PermissionSetId}": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Get Schema Permission Single",
        "description": "Gets the schema permission set detail information by the schema permission set id.",
        "operationId": "Permission_GetSchemaPermissions",
        "parameters": [
          {
            "type": "string",
            "name": "PermissionSetId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The schema permission set id."
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "SchemaPermissionSetDetailViewItem",
            "schema": {
              "$ref": "#/definitions/SchemaPermissionSetDetailViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/PublicAccess/Version": {
      "get": {
        "tags": [
          "PublicAccess"
        ],
        "operationId": "PublicAccess_GetVersion",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VersionInfoViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/PublicAccess/GetShare": {
      "get": {
        "tags": [
          "PublicAccess"
        ],
        "operationId": "PublicAccess_GetShare",
        "parameters": [
          {
            "type": "string",
            "name": "token",
            "in": "query",
            "required": true,
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ShareBaseDetailViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Shares/{Id}": {
      "put": {
        "tags": [
          "Share"
        ],
        "summary": "Update Single - Share",
        "description": "The update of share is executed asynchronous. However, for the specified timeout completion of the update process is awaited.\nIf the update process is not completed by reaching the specified timeout, the update process continues, but null is returned.",
        "operationId": "Share_Update",
        "parameters": [
          {
            "type": "string",
            "name": "Id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The share id."
          },
          {
            "name": "updateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareBaseUpdateRequest"
            },
            "x-nullable": true,
            "description": "The share update request."
          },
          {
            "type": "boolean",
            "name": "resolve",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "description": "Resolves the data of referenced list items into the shares content."
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "query",
            "x-nullable": true,
            "description": "Maximum time in milliseconds to wait for the business process completed state.",
            "format": "int32"
          }
        ],
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "200": {
            "description": "ShareViewItem",
            "schema": {
              "$ref": "#/definitions/BaseResultOfShareBaseViewItem"
            },
            "x-nullable": true
          }
        }
      },
      "get": {
        "tags": [
          "Share"
        ],
        "summary": "Get share by id (basic or embed)",
        "operationId": "Share_Get",
        "parameters": [
          {
            "type": "string",
            "name": "Id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "Share Id (not token, use PublicAccess to get share by token)"
          }
        ],
        "responses": {
          "200": {
            "description": "Polymorph share",
            "schema": {
              "$ref": "#/definitions/ShareBaseDetailViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/V1/Shares/DeleteMany": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Delete Many",
        "description": "The delete of multiple shares executed asynchronous. To keep track of the deletion progress a business process is returned.",
        "operationId": "Share_DeleteMany",
        "parameters": [
          {
            "name": "shareIds",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "x-nullable": true,
            "description": "A list of ListItemCreateRequests."
          }
        ],
        "responses": {
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          },
          "200": {
            "description": "BusinessProcessViewItem",
            "schema": {
              "$ref": "#/definitions/BusinessProcessViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Shares/Aggregate": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Aggregates own shares",
        "operationId": "Share_Aggregate",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareAggregationRequest"
            },
            "x-nullable": true,
            "description": "Aggregation request"
          }
        ],
        "responses": {
          "200": {
            "description": "AggregationResult",
            "schema": {
              "$ref": "#/definitions/ObjectAggregationResult"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/V1/Shares": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Create a new share (basic or embed).",
        "operationId": "Share_Create",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShareBaseCreateRequest"
            },
            "x-nullable": true,
            "description": "Polymorph create contract. Use either ShareBasicCreateRequest or ShareEmbedCreateRequest"
          }
        ],
        "responses": {
          "404": {
            "description": "Submited content could not be found",
            "schema": {
              "$ref": "#/definitions/ContentNotFoundException"
            },
            "x-nullable": true
          },
          "500": {
            "description": "No permission to share content\nor\nInternal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true,
            "x-expectedSchemas": [
              {
                "description": "No permission to share content",
                "schema": {
                  "$ref": "#/definitions/PermissionException"
                }
              },
              {
                "description": "Internal server error",
                "schema": {
                  "$ref": "#/definitions/PictureparkException"
                }
              }
            ]
          },
          "200": {
            "description": "Create result",
            "schema": {
              "$ref": "#/definitions/CreateShareResult"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/V1/Shares/Search": {
      "post": {
        "tags": [
          "Share"
        ],
        "summary": "Search shares",
        "operationId": "Share_Search",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentSearchRequest"
            },
            "x-nullable": true,
            "description": "Search request"
          }
        ],
        "responses": {
          "200": {
            "description": "Share search result",
            "schema": {
              "$ref": "#/definitions/BaseResultOfShareBaseViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/V1/Transfers/Files/Delete": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_DeleteFiles",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransferDeleteRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": ""
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/V1/Transfers/Files/Blacklist": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_GetBlacklist",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Blacklist"
            },
            "x-nullable": true
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/{TransferId}/Cancel": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "summary": "Cancels an active batch. Valid states: TODO",
        "operationId": "Transfer_CancelBatch",
        "parameters": [
          {
            "type": "string",
            "name": "TransferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "204": {
            "description": ""
          }
        }
      }
    },
    "/V1/Transfers": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_Create",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransferRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransferViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/{TransferId}": {
      "delete": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_Delete",
        "parameters": [
          {
            "type": "string",
            "name": "TransferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "204": {
            "description": ""
          }
        }
      },
      "get": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_Get",
        "parameters": [
          {
            "type": "string",
            "name": "TransferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransferDetailViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/Files/{FileTransferId}": {
      "get": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_GetFile",
        "parameters": [
          {
            "type": "string",
            "name": "FileTransferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FileTransferDetailViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/{TransferId}/Import": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_ImportBatch",
        "parameters": [
          {
            "type": "string",
            "name": "TransferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransfer2ContentCreateRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransferViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/{TransferId}/PartialImport": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_PartialImport",
        "parameters": [
          {
            "type": "string",
            "name": "TransferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransferPartial2ContentCreateRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransferViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/Search": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_Search",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferSearchRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransferSearchResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/Files/Search": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_SearchFiles",
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileTransferSearchRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FileTransferSearchResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Transfers/{TransferId}/Files/{Identifier}/Upload": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "operationId": "Transfer_UploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "FormFile",
            "in": "formData",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "FlowRelativePath",
            "in": "query",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "FlowChunkNumber",
            "in": "query",
            "x-nullable": false,
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "FlowCurrentChunkSize",
            "in": "query",
            "x-nullable": false,
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "FlowTotalSize",
            "in": "query",
            "x-nullable": false,
            "format": "int64"
          },
          {
            "type": "integer",
            "name": "FlowTotalChunks",
            "in": "query",
            "x-nullable": false,
            "format": "int64"
          },
          {
            "type": "string",
            "name": "TransferId",
            "in": "path",
            "required": true,
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Identifier",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Users/Search": {
      "post": {
        "tags": [
          "User"
        ],
        "operationId": "User_Search",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSearchRequest"
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserSearchResult"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Users/GetUser/{UserId}": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "User_GetUser",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserDetailViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Users/GetProfile": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "User_GetProfile",
        "parameters": [],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserProfileViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Users/Owner/{TokenId}": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "User_GetByOwnerToken",
        "parameters": [
          {
            "type": "string",
            "name": "TokenId",
            "in": "path",
            "required": true,
            "x-nullable": false
          }
        ],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserDetailViewItem"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Users/Channels": {
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "User_GetChannels",
        "parameters": [],
        "responses": {
          "500": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelViewItem"
              }
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Outputs": {
      "post": {
        "tags": [
          "Output"
        ],
        "summary": "Get outputs by contentIds",
        "description": "Gets output documents related for given contentids",
        "operationId": "Output_GetByContentIds",
        "parameters": [
          {
            "name": "contentsByIdsRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ContentsByIdsRequest"
            },
            "x-nullable": true,
            "description": "Contains the list of contentIds for which the outputs are requested"
          }
        ],
        "responses": {
          "200": {
            "description": "The Result containing a list of OutputDetailViewItem's",
            "schema": {
              "$ref": "#/definitions/BaseResultOfOutputDetailViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    },
    "/V1/Outputs/{OutputId}": {
      "get": {
        "tags": [
          "Output"
        ],
        "summary": "Get Single",
        "description": "Gets a output document by id.",
        "operationId": "Output_Get",
        "parameters": [
          {
            "type": "string",
            "name": "OutputId",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "description": "The output id."
          }
        ],
        "responses": {
          "404": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OutputNotFoundException"
            },
            "x-nullable": true
          },
          "200": {
            "description": "OutputDetail",
            "schema": {
              "$ref": "#/definitions/OutputDetailViewItem"
            },
            "x-nullable": true
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/PictureparkException"
            },
            "x-nullable": true
          }
        }
      }
    }
  },
  "definitions": {
    "ContentOwnershipTransferRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string",
          "description": "The content id."
        },
        "TransferUserId": {
          "type": "string",
          "description": "The id of the user to whom the content document has to be transfered to."
        }
      }
    },
    "ContentDoc": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "EntityType",
        "ContentType",
        "LifeCycle"
      ],
      "properties": {
        "FileTransferId": {
          "type": "string"
        },
        "ContentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        },
        "OwnerTokenId": {
          "type": "string"
        },
        "EntityType": {
          "description": "The entity type of a content document is content.",
          "$ref": "#/definitions/EntityType"
        },
        "ContentType": {
          "$ref": "#/definitions/ContentType"
        },
        "LifeCycle": {
          "$ref": "#/definitions/LifeCycle"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataBaseDoc"
        }
      ]
    },
    "EntityType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Content",
        "BasicShare",
        "EmbedShare",
        "Metadata",
        "FileTransfer"
      ],
      "enum": [
        "Content",
        "BasicShare",
        "EmbedShare",
        "Metadata",
        "FileTransfer"
      ]
    },
    "ContentType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Unknown",
        "Bitmap",
        "VectorGraphic",
        "RawImage",
        "InterchangeDocument",
        "WordProcessingDocument",
        "TextDocument",
        "DesktopPublishingDocument",
        "Presentation",
        "Spreadsheet",
        "Archive",
        "Audio",
        "Video",
        "Font",
        "Multimedia",
        "Application",
        "SourceCode",
        "Database",
        "Cad",
        "Model3d"
      ],
      "enum": [
        "Unknown",
        "Bitmap",
        "VectorGraphic",
        "RawImage",
        "InterchangeDocument",
        "WordProcessingDocument",
        "TextDocument",
        "DesktopPublishingDocument",
        "Presentation",
        "Spreadsheet",
        "Archive",
        "Audio",
        "Video",
        "Font",
        "Multimedia",
        "Application",
        "SourceCode",
        "Database",
        "Cad",
        "Model3d"
      ]
    },
    "LifeCycle": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Draft",
        "Active",
        "Inactive",
        "Deleted"
      ],
      "enum": [
        "Draft",
        "Active",
        "Inactive",
        "Deleted"
      ]
    },
    "MetadataBaseDoc": {
      "type": "object",
      "description": "The MetadataBaseDoc is the base class for ContentDoc and ListItemDoc.",
      "additionalProperties": false,
      "properties": {
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type content/list."
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "Data": {
          "description": "Contains metadata values of the content schema and all applied layer schemas.",
          "$ref": "#/definitions/DataDictionary"
        },
        "DisplayValues": {
          "type": "array",
          "description": "Contains language specific display values, rendered according to the list/content schema's display pattern configuration.",
          "items": {
            "$ref": "#/definitions/DisplayValue"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseDoc"
        }
      ]
    },
    "DataDictionary": {
      "type": "object",
      "description": "A custom implementation of Dictionary{string, object}",
      "additionalProperties": false,
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {}
        }
      ]
    },
    "DisplayValue": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string"
        },
        "Values": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        }
      }
    },
    "TranslatedStringDictionary": {
      "type": "object",
      "description": "A custom dictionary type to distinguish language specific class properties.",
      "additionalProperties": false,
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "BaseDoc": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string"
        },
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        }
      }
    },
    "StoreAudit": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "CreationDate",
        "ModificationDate"
      ],
      "properties": {
        "CreationDate": {
          "type": "string",
          "format": "date-time"
        },
        "CreatedByUser": {
          "$ref": "#/definitions/UserItem"
        },
        "ModificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "ModifiedByUser": {
          "$ref": "#/definitions/UserItem"
        }
      }
    },
    "UserItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        }
      }
    },
    "PictureparkException": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "TraceLevel",
        "HttpStatusCode",
        "Kind"
      ],
      "properties": {
        "TraceLevel": {
          "$ref": "#/definitions/TraceLevel"
        },
        "TraceId": {
          "type": "string"
        },
        "TraceJobId": {
          "type": "string"
        },
        "HttpStatusCode": {
          "type": "integer",
          "format": "int32"
        },
        "Kind": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Exception"
        }
      ]
    },
    "TraceLevel": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Critical",
        "Error",
        "Warning",
        "Information",
        "Verbose"
      ],
      "enum": [
        "Critical",
        "Error",
        "Warning",
        "Information",
        "Verbose"
      ]
    },
    "Exception": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Message": {
          "type": "string"
        },
        "InnerException": {
          "$ref": "#/definitions/Exception"
        },
        "StackTrace": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        }
      }
    },
    "PictureparkApplicationException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PictureparkBusinessException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CustomerId": {
          "type": "string"
        },
        "CustomerAlias": {
          "type": "string"
        },
        "UserId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "PictureparkArgumentNullException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ArgumentName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ContentNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "BusinessProcessDefinitionCreateException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ProcessDefinitionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "BusinessProcessDefinitionNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ProcessDefinitionId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "BusinessProcessNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "BusinessProcessId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "CustomerHostNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "HostName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "CustomerNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CustomerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "DocumentNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DocumentId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DocumentVersionNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DocumentId": {
          "type": "string"
        },
        "DocumentVersion": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DriveRequestException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DuplicateRightException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "PermissionSetId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DuplicateDocumentException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DocumentId": {
          "type": "string"
        },
        "DocumentType": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "DuplicateAggregatorException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AggregatorName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "FailedToLockException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ResourceId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "IndexException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IndexName": {
          "type": "string"
        },
        "DebugInformation": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "InvalidArgumentException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ArgumentName": {
          "type": "string"
        },
        "ArgumentValue": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "InvalidCustomerException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CustomerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "PictureparkInvalidMetadataException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "MetadataErrors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataError"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "MetadataError": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "LineNumber",
        "LinePosition"
      ],
      "properties": {
        "ErrorType": {
          "type": "string"
        },
        "LineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "LinePosition": {
          "type": "integer",
          "format": "int32"
        },
        "Path": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "SchemaId": {
          "type": "string"
        }
      }
    },
    "InvalidStateTransitionException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Transition": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/InvalidStateException"
        }
      ]
    },
    "InvalidStateException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ResourceId": {
          "type": "string"
        },
        "State": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "InvalidUserOrPasswordException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CustomerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "PictureparkMappingException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "IndexName": {
          "type": "string"
        },
        "DebugInformation": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "MessagePerformerTaskCanceledException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "MessageId": {
          "type": "string"
        },
        "CustomerId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "NotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Reference": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ObjectStoreException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RowErrorMessages": {
          "type": "string"
        },
        "ErrorMessage": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ObjectStoreResponseException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RowErrorMessages": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PictureparkOperationCanceledException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "OperationTimeoutException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "OutputNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string"
        },
        "OutputFormatId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "PermissionException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Permission": {
          "type": "string"
        },
        "Operation": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "QueryException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DebugInformation": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "RenderingException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "RenderingJobItemNotSetException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ServiceProviderCreateException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserId": {
          "type": "string"
        },
        "ExternalId": {
          "type": "string"
        },
        "VirtualHost": {
          "type": "string"
        },
        "DetailErrorMessage": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "ServiceProviderDeleteException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ServiceProviderId": {
          "type": "string"
        },
        "DetailedErrorMessage": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "ServiceProviderNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "MissingServiceProviderId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkException"
        }
      ]
    },
    "TokenValidationException": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UnknownException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ExceptionDetail": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserNotFoundException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "MissingUserId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserPermanentlyRemovedException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RemovedUserId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserRoleAssignedException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserRoleId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "UserRolesRightsAssignedException": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentPermissionSetId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PictureparkBusinessException"
        }
      ]
    },
    "ContentDetail": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ContentType",
        "ContentTypeId",
        "EntityType",
        "Trashed"
      ],
      "properties": {
        "Audit": {
          "description": "Document audit information with information regarding document creation and modification.",
          "$ref": "#/definitions/StoreAudit"
        },
        "Content": {
          "description": "The content data of the content document."
        },
        "ContentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        },
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type content."
        },
        "ContentType": {
          "description": "The content type of a content document.",
          "$ref": "#/definitions/ContentType"
        },
        "ContentTypeId": {
          "type": "integer",
          "description": "The content type of a content document.",
          "format": "int32"
        },
        "DisplayValues": {
          "description": "Contains language specific display values, rendered according to the content schema's display pattern configuration.",
          "$ref": "#/definitions/DisplayValueViewItem"
        },
        "EntityType": {
          "description": "The entity type of a content document is content.",
          "$ref": "#/definitions/EntityType"
        },
        "Id": {
          "type": "string",
          "description": "The content id."
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with schema type layer.",
          "items": {
            "type": "string"
          }
        },
        "Metadata": {
          "description": "The layer metadata of the content document.",
          "$ref": "#/definitions/DataDictionary"
        },
        "Outputs": {
          "type": "array",
          "description": "A list of rendering ouputs for contents with an underlying digital file.",
          "items": {
            "$ref": "#/definitions/OutputViewItem"
          }
        },
        "OwnerTokenId": {
          "type": "string",
          "description": "The id of a owner token. Defines the content owner."
        },
        "Trashed": {
          "type": "boolean",
          "description": "The trashed flag."
        }
      }
    },
    "DisplayValueViewItem": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "OutputViewItem": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "OutputFormatId": {
          "type": "string"
        },
        "ContentId": {
          "type": "string"
        },
        "Detail": {
          "$ref": "#/definitions/OutputDetailBase"
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "OutputDetailBase": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "FileExtension": {
          "type": "string"
        },
        "FileName": {
          "type": "string"
        },
        "FilePath": {
          "type": "string"
        },
        "FileSizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "Sha1Hash": {
          "type": "string"
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "OutputDetailImage": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Width",
        "Height"
      ],
      "properties": {
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetailAudio": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DurationInSeconds": {
          "type": "number",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetailVideo": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "DurationInSeconds",
        "Width",
        "Height"
      ],
      "properties": {
        "DurationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        },
        "Sprites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sprite"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "Sprite": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Width",
        "Height",
        "Y",
        "X",
        "Start",
        "End"
      ],
      "properties": {
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        },
        "Y": {
          "type": "integer",
          "format": "int32"
        },
        "X": {
          "type": "integer",
          "format": "int32"
        },
        "Start": {
          "type": "string",
          "format": "time-span"
        },
        "End": {
          "type": "string",
          "format": "time-span"
        }
      }
    },
    "OutputDetailDocument": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "PageCount"
      ],
      "properties": {
        "PageCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetailDefault": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/OutputDetailBase"
        }
      ]
    },
    "OutputDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/OutputViewItem"
        }
      ]
    },
    "ContentsOwnershipTransferRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentIds": {
          "type": "array",
          "description": "The content ids.",
          "items": {
            "type": "string"
          }
        },
        "TransferUserId": {
          "type": "string",
          "description": "The id of user to whom the content documents have to be transfered to."
        }
      }
    },
    "BusinessProcessViewItem": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "BusinessProcessScope",
        "LifeCycle",
        "StartDate",
        "EndDate",
        "Kind"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "ProcessDefinitionId": {
          "type": "string"
        },
        "ReferenceId": {
          "type": "string"
        },
        "ReferenceDocType": {
          "type": "string"
        },
        "BusinessProcessScope": {
          "$ref": "#/definitions/BusinessProcessScope"
        },
        "LifeCycle": {
          "$ref": "#/definitions/BusinessProcessLifeCylce"
        },
        "StartDate": {
          "type": "string",
          "format": "date-time"
        },
        "EndDate": {
          "type": "string",
          "format": "date-time"
        },
        "StateHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessProcessStateItem"
          }
        },
        "ProcessDefinitionName": {
          "type": "string"
        },
        "CurrentState": {
          "type": "string"
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "BusinessProcessScope": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "System",
        "User"
      ],
      "enum": [
        "System",
        "User"
      ]
    },
    "BusinessProcessLifeCylce": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Draft",
        "Started",
        "Ended",
        "Cancelled"
      ],
      "enum": [
        "Draft",
        "Started",
        "Ended",
        "Cancelled"
      ]
    },
    "BusinessProcessStateItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Timestamp"
      ],
      "properties": {
        "State": {
          "type": "string"
        },
        "Timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "Error": {
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Exception": {
          "type": "string"
        },
        "TraceId": {
          "type": "string"
        },
        "TraceJobId": {
          "type": "string"
        }
      }
    },
    "BusinessProcessBulkResponseViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Response": {
          "$ref": "#/definitions/BulkResponseViewItem"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BusinessProcessViewItem"
        }
      ]
    },
    "BulkResponseViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkResponseRowViewItem"
          }
        }
      }
    },
    "BulkResponseRowViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Version",
        "Succeeded"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Version": {
          "type": "integer",
          "format": "int64"
        },
        "Error": {
          "type": "string"
        },
        "Reason": {
          "type": "string"
        },
        "Succeeded": {
          "type": "boolean"
        }
      }
    },
    "ContentAggregationRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "LifeCycleFilter"
      ],
      "properties": {
        "SearchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "Filter": {
          "description": "An optional search filter. Limits the content document result set.",
          "$ref": "#/definitions/FilterBase"
        },
        "AggregationFilters": {
          "type": "array",
          "description": "Special filters used to filter down on a specific aggregated value.",
          "items": {
            "$ref": "#/definitions/AggregationFilter"
          }
        },
        "Aggregators": {
          "type": "array",
          "description": "Defines the aggregation resultset.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "ChannelId": {
          "type": "string",
          "description": "Limits the simple search fields to the fields available in the specified channel."
        },
        "DisplayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "SearchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages in configured within the customer's language configuration.",
          "items": {
            "type": "string"
          }
        },
        "CollectionId": {
          "type": "string",
          "description": "The collection id."
        },
        "LifeCycleFilter": {
          "description": "Limits the content document result set to that life cycle state. Defaults to ActiveOnly.",
          "$ref": "#/definitions/LifeCycleFilter"
        }
      }
    },
    "FilterBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "The FilterBase is the base class for all filters.",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "Kind": {
          "type": "string"
        }
      }
    },
    "AndFilter": {
      "type": "object",
      "description": "The AndFilter> is a compound filter and returns documents that match all of the specified filters.",
      "additionalProperties": false,
      "properties": {
        "Filters": {
          "type": "array",
          "description": "Accepts all filters.",
          "items": {
            "$ref": "#/definitions/FilterBase"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "OrFilter": {
      "type": "object",
      "description": "The OrFilter is a compound filter and returns documents that match any of the specified filters.",
      "additionalProperties": false,
      "properties": {
        "Filters": {
          "type": "array",
          "description": "Accepts all filters.",
          "items": {
            "$ref": "#/definitions/FilterBase"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "NotFilter": {
      "type": "object",
      "description": "The NotFilter is a compound filter and returns documents that do not match the specified filter.",
      "additionalProperties": false,
      "properties": {
        "Filter": {
          "description": "Limits the result set.",
          "$ref": "#/definitions/FilterBase"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "DateRangeFilter": {
      "type": "object",
      "description": "The DateRangeFilter returns documents with fields that have date values within a certain range.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "Range": {
          "description": "The date range. Supported pattern: now(+-)(int)(YMDHm).",
          "$ref": "#/definitions/DateRange"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "DateRange": {
      "type": "object",
      "description": "The date range class used in aggregators and filters.",
      "additionalProperties": false,
      "properties": {
        "Names": {
          "description": "Tranlsated range names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "From": {
          "type": "string",
          "description": "The from value can be a datetime string or a pattern now(+-)(int)(YMDHm)."
        },
        "To": {
          "type": "string",
          "description": "The to value can be a datetime string or a pattern now(+-)(int)(YMDHm)."
        }
      }
    },
    "ExistsFilter": {
      "type": "object",
      "description": "The ExistsFilter returns documents that have at least one non-null value in the original field.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "GeoBoundingBoxFilter": {
      "type": "object",
      "description": "The GeoBoundingBoxFilter returns documents that are found based on a point location using a bounding box.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "TopLeft": {
          "description": "The top left longitude/latitude configuration.",
          "$ref": "#/definitions/GeoLocation"
        },
        "BottomRight": {
          "description": "The bottom right longitude/latitude configuration.",
          "$ref": "#/definitions/GeoLocation"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "GeoLocation": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Lat",
        "Lon"
      ],
      "properties": {
        "Lat": {
          "type": "number",
          "format": "double"
        },
        "Lon": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "GeoDistanceFilter": {
      "type": "object",
      "description": "The GeoDistanceRangeFilter returns documents that include only hits that exists within a specific distance from a geo point.",
      "additionalProperties": false,
      "required": [
        "Distance"
      ],
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "Location": {
          "description": "The longitude/latitude configuration for the point of origin.",
          "$ref": "#/definitions/GeoLocation"
        },
        "Distance": {
          "type": "number",
          "description": "The range distance in meters.",
          "format": "double"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "GeoDistanceRangeFilter": {
      "type": "object",
      "description": "The GeoDistanceRangeFilter returns documents that exists within a range from a specific point.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "Location": {
          "description": "The longitude/latitude configuration for the point of origin.",
          "$ref": "#/definitions/GeoLocation"
        },
        "Range": {
          "description": "The numeric range.",
          "$ref": "#/definitions/NumericRange"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "NumericRange": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Names": {
          "description": "Tranlsated range names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "From": {
          "type": "number",
          "description": "The from value.",
          "format": "double"
        },
        "To": {
          "type": "number",
          "description": "The to value.",
          "format": "double"
        }
      }
    },
    "NestedFilter": {
      "type": "object",
      "description": "The NestedFilter is a joining filter and returns documents whose nested objects / documents (see nested mapping) match the specified filter.",
      "additionalProperties": false,
      "properties": {
        "Path": {
          "type": "string",
          "description": "The path pointing to the nested object."
        },
        "Filter": {
          "description": "Limits the result set.",
          "$ref": "#/definitions/FilterBase"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "NumericRangeFilter": {
      "type": "object",
      "description": "The NumericRangeFilter returns documents with fields that have numeric values within a certain range.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "Range": {
          "description": "The numeric range with from and to properties.",
          "$ref": "#/definitions/NumericRange"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "PrefixFilter": {
      "type": "object",
      "description": "The PrefixFilter returns documents that have fields containing terms with a specified prefix (not analyzed).",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "Prefix": {
          "type": "string",
          "description": "The prefix term to filter on."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "TermFilter": {
      "type": "object",
      "description": "The TermFilter returns documents that contain the exact term specified in the inverted index.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "Term": {
          "type": "string",
          "description": "The term to filter on."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "TermsFilter": {
      "type": "object",
      "description": "The TermsFilter returns documents that have fields that match any of the provided terms (not analyzed).",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the filter on."
        },
        "Terms": {
          "type": "array",
          "description": "A list of OR combined terms.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "AggregationFilter": {
      "type": "object",
      "description": "An AggregationFilter is provided with each aggregated value. When selecting the aggregated value the aggregation filter is added to the search query and returns doucments meeting the aggregation condition.",
      "additionalProperties": false,
      "properties": {
        "AggregationName": {
          "type": "string",
          "description": "The name of the aggregation this filter is connected to."
        },
        "Filter": {
          "description": "The aggregation filter property. Available filters are TermFilter, DateRangeFilter, NumericRangeFilter and GeoDistanceRangeFilter.",
          "$ref": "#/definitions/FilterBase"
        },
        "TemporaryAggregatorRequestId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "ChildFilter": {
      "type": "object",
      "description": "The ChildFilter allows to apply filters on child documents and returns documents that match the specified filter on the child document.",
      "additionalProperties": false,
      "properties": {
        "ChildType": {
          "type": "string",
          "description": "The elastic search index type to filter as a child."
        },
        "Filter": {
          "description": "The filter to apply on the child entity. It accepts all filters.",
          "$ref": "#/definitions/FilterBase"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "ParentFilter": {
      "type": "object",
      "description": "The ParentFilter allows to apply filters on parent documents and returns documents that match the specified filter on the parent document.",
      "additionalProperties": false,
      "properties": {
        "ParentType": {
          "type": "string",
          "description": "The elastic search index type to filter as a parent."
        },
        "Filter": {
          "description": "The filter to apply on the child entity. It accepts all filters.",
          "$ref": "#/definitions/FilterBase"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FilterBase"
        }
      ]
    },
    "AggregatorBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "The AggregatorBase is the base class for all aggregators.",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "The slug name of the aggregation. Must be unique per aggregation request."
        },
        "Names": {
          "description": "The translated names of the aggregation.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Aggregators": {
          "type": "array",
          "description": "An optional aggregator list for nested aggregations.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "DateRangeAggregator": {
      "type": "object",
      "description": "The DateRangeAggregator is a multi-bucket range aggregation dedicated for date values. Each bucket represents a range.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the aggregation on."
        },
        "Ranges": {
          "type": "array",
          "description": "A list of date ranges. Supported pattern: now(+-)(int)(YMDHm).",
          "items": {
            "$ref": "#/definitions/DateRange"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "FilterAggregator": {
      "type": "object",
      "description": "The FilterAggregator is a single bucket aggregation of documents that match a specified filter.",
      "additionalProperties": false,
      "properties": {
        "Filter": {
          "description": "Limits the result set.",
          "$ref": "#/definitions/FilterBase"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "GeoDistanceAggregator": {
      "type": "object",
      "description": "The GeoDistanceAggregator is a multi-bucket range aggregation that works on geo_point fields. Each bucket represents a range.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the aggregation on."
        },
        "Location": {
          "description": "The latitude/logitude configuration for the point of origin.",
          "$ref": "#/definitions/GeoLocation"
        },
        "Ranges": {
          "type": "array",
          "description": "A list of numeric ranges in meter.",
          "items": {
            "$ref": "#/definitions/NumericRange"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "NestedAggregator": {
      "type": "object",
      "description": "The NestedAggregator is a special single bucket aggregation that enables aggregating nested documents.",
      "additionalProperties": false,
      "properties": {
        "Path": {
          "type": "string",
          "description": "The path pointing to the nested object."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "NumericRangeAggregator": {
      "type": "object",
      "description": "The NumericRangeAggregator is a multi-bucket range aggregation. Each bucket represents a range.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to execute the aggregation on."
        },
        "Ranges": {
          "type": "array",
          "description": "A list of numeric ranges.",
          "items": {
            "$ref": "#/definitions/NumericRange"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "TermsAggregator": {
      "type": "object",
      "description": "The TermsAggregator is a multi-bucket value aggregation where buckets are dynamically built - one per unique value.",
      "additionalProperties": false,
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field (not analyzed) to execute the aggregation on."
        },
        "Size": {
          "type": "integer",
          "description": "The size parameter can be set to define how many term buckets should be returned out of the overall terms list.",
          "format": "int32"
        },
        "Includes": {
          "type": "array",
          "description": "Includes values for which buckets will be created. Supports regular expression strings or arrays of exact values.",
          "items": {
            "type": "string"
          }
        },
        "Excludes": {
          "type": "array",
          "description": "Excludes values for which buckets will be created. Supports regular expression strings or arrays of exact values.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AggregatorBase"
        }
      ]
    },
    "TermsRelationAggregator": {
      "type": "object",
      "description": "The TermsRelationAggregator is derived from TermsAggregator and used for aggregations on relation item ids.",
      "additionalProperties": false,
      "required": [
        "DocumentType"
      ],
      "properties": {
        "DocumentType": {
          "description": "When aggregating on relations ids the DocumentType is needed to resolve the target item translation.",
          "$ref": "#/definitions/TermsRelationAggregatorDocumentType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TermsAggregator"
        }
      ]
    },
    "TermsRelationAggregatorDocumentType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Content",
        "ListItem",
        "Schema",
        "User"
      ],
      "enum": [
        "Content",
        "ListItem",
        "Schema",
        "User"
      ]
    },
    "TermsEnumAggregator": {
      "type": "object",
      "description": "The TermsRelationAggregator is derived from the TermsAggregator and used for aggregations on indexed enum values.",
      "additionalProperties": false,
      "properties": {
        "EnumType": {
          "type": "string",
          "description": "When aggregating on enum fields EnumType is needed to resolve the enum translation."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TermsAggregator"
        }
      ]
    },
    "LifeCycleFilter": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ActiveOnly",
        "All",
        "InactiveOnly"
      ],
      "enum": [
        "ActiveOnly",
        "All",
        "InactiveOnly"
      ]
    },
    "ObjectAggregationResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        },
        "AggregationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResult"
          }
        }
      }
    },
    "AggregationResult": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "type": "string"
        },
        "SumOtherDocCount": {
          "type": "integer",
          "format": "int64"
        },
        "TemporaryRequestId": {
          "type": "string"
        },
        "AggregationResultItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResultItem"
          }
        }
      }
    },
    "AggregationResultItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Count",
        "Active"
      ],
      "properties": {
        "Name": {
          "type": "string"
        },
        "Count": {
          "type": "integer",
          "format": "int64"
        },
        "Filter": {
          "$ref": "#/definitions/AggregationFilter"
        },
        "Active": {
          "type": "boolean"
        },
        "AggregationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResult"
          }
        }
      }
    },
    "ContentBatchDownloadRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Content"
          }
        }
      }
    },
    "Content": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string"
        },
        "OutputFormatId": {
          "type": "string"
        }
      }
    },
    "ContentBatchDownloadItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DownloadToken": {
          "type": "string"
        },
        "DownloadUrl": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DownloadItem"
        }
      ]
    },
    "DownloadItem": {
      "type": "object",
      "additionalProperties": false
    },
    "CreateContentRequest": {
      "type": "object",
      "description": "A request structure for creating a content document.",
      "additionalProperties": false,
      "properties": {
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of a schema with schema type content."
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with schema type layer.",
          "items": {
            "type": "string"
          }
        },
        "Content": {
          "description": "The content data of the content document."
        },
        "Metadata": {
          "description": "The layer metadata of the content document.",
          "$ref": "#/definitions/DataDictionary"
        },
        "ContentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. ",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ThumbnailSize": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Small",
        "Medium",
        "Large"
      ],
      "enum": [
        "Small",
        "Medium",
        "Large"
      ]
    },
    "UpdateContentPermissionsRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string",
          "description": "The content id."
        },
        "ContentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Start",
        "Limit",
        "LifeCycleFilter"
      ],
      "properties": {
        "ChannelIds": {
          "type": "array",
          "description": "Limits the simple search fields to the fields available in the specified channel.",
          "items": {
            "type": "string"
          }
        },
        "DisplayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "DisplayPatternIds": {
          "type": "array",
          "description": "Limits the display values included in the search response. Defaults to all display values.",
          "items": {
            "type": "string"
          }
        },
        "SearchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        },
        "CollectionId": {
          "type": "string",
          "description": "The collection id."
        },
        "SearchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "Sort": {
          "type": "array",
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32"
        },
        "Filter": {
          "description": "An optional search filter. Limits the content document result set.",
          "$ref": "#/definitions/FilterBase"
        },
        "LifeCycleFilter": {
          "description": "Limits the content document result set to that life cycle state. Defaults to ActiveOnly.",
          "$ref": "#/definitions/LifeCycleFilter"
        }
      }
    },
    "SortInfo": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Direction"
      ],
      "properties": {
        "Field": {
          "type": "string",
          "description": "The elastic search index field to sort on."
        },
        "Direction": {
          "description": "The sort direction (Asc/Desc).",
          "$ref": "#/definitions/SortDirection"
        }
      }
    },
    "SortDirection": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Asc",
        "Desc"
      ],
      "enum": [
        "Asc",
        "Desc"
      ]
    },
    "ContentSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "AggregationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResult"
          }
        },
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfContentViewItem"
        }
      ]
    },
    "BaseResultOfContentViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "ContentViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "EntityType"
      ],
      "properties": {
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        },
        "EntityType": {
          "description": "The entity type of a content document is content.",
          "$ref": "#/definitions/EntityType"
        },
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type content."
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with schema type layer.",
          "items": {
            "type": "string"
          }
        },
        "DisplayValues": {
          "type": "object",
          "description": "Contains display values of the specified language, rendered according to the content schema's display pattern configuration.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        }
      }
    },
    "ContentFileUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string"
        },
        "FileTransferId": {
          "type": "string"
        }
      }
    },
    "UpdateContentMetadataRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "The content id."
        },
        "SchemaIds": {
          "type": "array",
          "description": "An id list of schemas with schema type content or layer.",
          "items": {
            "type": "string"
          }
        },
        "Metadata": {
          "description": "The dynamic data structure matching the field schematics of the schemas with schema type content or layer.",
          "$ref": "#/definitions/DataDictionary"
        }
      }
    },
    "ContentDeactivationRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentReactivationRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentsMetadataUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentIds": {
          "type": "array",
          "description": "The ids of the content documents.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeRequestBase"
        }
      ]
    },
    "MetadataValuesChangeRequestBase": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "ChangeCommands": {
          "type": "array",
          "description": "A container for all change commads.",
          "items": {
            "$ref": "#/definitions/MetadataValuesChangeCommandBase"
          }
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "MetadataValuesChangeCommandBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "The base class for metadata value change commands.",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "Kind": {
          "type": "string"
        }
      }
    },
    "MetadataValuesSchemaUpdateCommand": {
      "type": "object",
      "description": "Updates schema values.",
      "additionalProperties": false,
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type content or layer to be updated."
        },
        "Value": {
          "description": "The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.",
          "$ref": "#/definitions/DataDictionary"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaUpsertCommand": {
      "type": "object",
      "description": "Adds or updates schema values.",
      "additionalProperties": false,
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type content or layer to be updated."
        },
        "Value": {
          "description": "The metadata values containing a set of changes. Update is additive and will not remove values. To remove complete fields use the MetadataValuesFieldRemoveCommand instead.",
          "$ref": "#/definitions/DataDictionary"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaRemoveCommand": {
      "type": "object",
      "description": "Removes schema values.",
      "additionalProperties": false,
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type layer to be removed."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesFieldRemoveCommand": {
      "type": "object",
      "description": "Removes a field and its value from the schema values.",
      "additionalProperties": false,
      "properties": {
        "FieldNamespace": {
          "type": "string",
          "description": "The fully qualified field name of the field to be removed, e.g. \"Data.SchemaId.FieldId\"."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaItemAddCommand": {
      "type": "object",
      "description": "Adds a list item id reference to a multi tagbox.",
      "additionalProperties": false,
      "properties": {
        "FieldNamespace": {
          "type": "string",
          "description": "The fully qualified field name of the multi tagbox field."
        },
        "ReferenceId": {
          "type": "string",
          "description": "The id of the list item to be added."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "MetadataValuesSchemaItemRemoveCommand": {
      "type": "object",
      "description": "Removes a list item id reference from a multi tagbox.",
      "additionalProperties": false,
      "properties": {
        "FieldNamespace": {
          "type": "string",
          "description": "The fully qualified field name of the multi tagbox field."
        },
        "ReferenceId": {
          "type": "string",
          "description": "The id of the list item to be removed."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeCommandBase"
        }
      ]
    },
    "FilterContentsMetadataUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalItemsCount"
      ],
      "properties": {
        "ContentSearchRequest": {
          "$ref": "#/definitions/ContentSearchRequest"
        },
        "TotalItemsCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/MetadataValuesChangeRequestBase"
        }
      ]
    },
    "BusinessProcessSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfBusinessProcessViewItem"
        }
      ]
    },
    "BaseResultOfBusinessProcessViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BusinessProcessViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "StartProcessRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Variables": {}
      }
    },
    "SendMessageRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "MessageName": {
          "type": "string"
        },
        "Variables": {}
      }
    },
    "BusinessProcessWaitResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "HasStateHit",
        "ProcessEnded"
      ],
      "properties": {
        "HasStateHit": {
          "type": "boolean"
        },
        "ProcessEnded": {
          "type": "boolean"
        },
        "StateHit": {
          "type": "string"
        },
        "BusinessProcess": {
          "$ref": "#/definitions/BusinessProcessViewItem"
        }
      }
    },
    "DocumentHistorySearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "From",
        "To",
        "Start",
        "Limit",
        "DocumentVersion"
      ],
      "properties": {
        "From": {
          "type": "string",
          "format": "date-time"
        },
        "To": {
          "type": "string",
          "format": "date-time"
        },
        "Start": {
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "PageToken": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "DocumentId": {
          "type": "string"
        },
        "DocumentVersion": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DocumentHistorySearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults",
        "ElapsedMilliseconds"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentHistoryViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        },
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DocumentHistoryViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "DocumentVersion",
        "DocumentDate",
        "Timestamp",
        "Deleted"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "DocumentId": {
          "type": "string"
        },
        "DocumentVersion": {
          "type": "integer",
          "format": "int64"
        },
        "DocumentType": {
          "type": "string"
        },
        "DocumentDate": {
          "type": "string",
          "format": "date-time"
        },
        "Document": {
          "type": "string"
        },
        "Timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "Audit": {
          "$ref": "#/definitions/HistoryAudit"
        },
        "Deleted": {
          "type": "boolean"
        }
      }
    },
    "HistoryAudit": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ModificationDate"
      ],
      "properties": {
        "ModificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "ModifiedByUser": {
          "$ref": "#/definitions/UserItem"
        }
      }
    },
    "DocumentHistoryDifferenceViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "OldDocumentVersion",
        "NewDocumentVersion"
      ],
      "properties": {
        "DocumentId": {
          "type": "string"
        },
        "OldDocumentVersion": {
          "type": "integer",
          "format": "int64"
        },
        "NewDocumentVersion": {
          "type": "integer",
          "format": "int64"
        },
        "OldValues": {},
        "NewValues": {}
      }
    },
    "ListItemCreateRequest": {
      "type": "object",
      "description": "A request structure for creating a list item document.",
      "additionalProperties": false,
      "properties": {
        "Content": {
          "description": "The content data of the list item."
        },
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type list."
        },
        "ListItemId": {
          "type": "string",
          "description": "The list item id. When not provided a Guid is generated."
        }
      }
    },
    "ListItemDetail": {
      "type": "object",
      "description": "The detail view item for the list item.",
      "additionalProperties": false,
      "required": [
        "EntityType"
      ],
      "properties": {
        "Content": {
          "description": "The content data of the list item."
        },
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type list."
        },
        "DisplayValues": {
          "description": "Contains language specific display values, rendered according to the list schema's display pattern configuration.",
          "$ref": "#/definitions/DisplayValueViewItem"
        },
        "EntityType": {
          "description": "The entity type of the list item is metadata.",
          "$ref": "#/definitions/EntityType"
        },
        "Id": {
          "type": "string",
          "description": "The list item id."
        }
      }
    },
    "ListItemAggregationRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "IncludeAllSchemaChildren"
      ],
      "properties": {
        "SearchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "Filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "$ref": "#/definitions/FilterBase"
        },
        "AggregationFilters": {
          "type": "array",
          "description": "Special filters used to filter down on a specific aggregated value.",
          "items": {
            "$ref": "#/definitions/AggregationFilter"
          }
        },
        "Aggregators": {
          "type": "array",
          "description": "Defines the aggregation resultset.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "IncludeAllSchemaChildren": {
          "type": "boolean",
          "description": "Broadens the aggregation and include all schema descendant list items."
        },
        "SchemaIds": {
          "type": "array",
          "description": "Limits the aggregation to list items of the provided schemas.",
          "items": {
            "type": "string"
          }
        },
        "DisplayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "SearchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ListItemSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Start",
        "Limit",
        "IncludeAllSchemaChildren",
        "IncludeMetadata"
      ],
      "properties": {
        "SearchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "Sort": {
          "type": "array",
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32"
        },
        "Filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "$ref": "#/definitions/FilterBase"
        },
        "IncludeAllSchemaChildren": {
          "type": "boolean",
          "description": "Broadens the search and include all schema descendant list items."
        },
        "SchemaIds": {
          "type": "array",
          "description": "Limits the search to list items of the provided schemas.",
          "items": {
            "type": "string"
          }
        },
        "DisplayLanguage": {
          "type": "string",
          "description": "Defines the return language of translation values. Defaults to x-default."
        },
        "DisplayPatternIds": {
          "type": "array",
          "description": "Limits the display values included in the search response. Defaults to all display values.",
          "items": {
            "type": "string"
          }
        },
        "SearchLanguages": {
          "type": "array",
          "description": "Only searches the specified language values. Defaults to all metadata languages of the language configuration.",
          "items": {
            "type": "string"
          }
        },
        "IncludeMetadata": {
          "type": "boolean",
          "description": "When set to true the content data is included in the result items."
        }
      }
    },
    "BaseResultOfListItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "ListItem": {
      "type": "object",
      "description": "A document stored in the elastic search metadata index, with fields corresponding to the the schemantics of its underlying list schema.",
      "additionalProperties": false,
      "required": [
        "EntityType"
      ],
      "properties": {
        "Content": {
          "description": "The content data of the list item."
        },
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type list."
        },
        "DisplayValues": {
          "description": "Contains language specific display values, rendered according to the list schema's display pattern configuration.",
          "$ref": "#/definitions/DisplayValueViewItem"
        },
        "EntityType": {
          "description": "The entity type of the list item is metadata.",
          "$ref": "#/definitions/EntityType"
        },
        "Id": {
          "type": "string",
          "description": "The list item id."
        }
      }
    },
    "ListItemUpdateRequest": {
      "type": "object",
      "description": "A request structure for updating a list item.",
      "additionalProperties": false,
      "properties": {
        "Content": {
          "description": "The content data of the list item."
        },
        "Id": {
          "type": "string",
          "description": "The list item id."
        }
      }
    },
    "LiveStreamSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "From",
        "To",
        "Start",
        "Limit"
      ],
      "properties": {
        "From": {
          "type": "string",
          "format": "date-time"
        },
        "To": {
          "type": "string",
          "format": "date-time"
        },
        "Start": {
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "ObjectSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfObject"
        }
      ]
    },
    "BaseResultOfObject": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {}
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "SchemaDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "SortOrder",
        "System",
        "Public"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The schema id."
        },
        "ParentSchemaId": {
          "type": "string",
          "description": "The parent schema id."
        },
        "Types": {
          "type": "array",
          "description": "Types control schema usage.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        },
        "Names": {
          "description": "Language specific schema names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Descriptions": {
          "description": "Language specific schema descriptions.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "DisplayPatterns": {
          "type": "array",
          "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/DisplayPattern"
          }
        },
        "Fields": {
          "type": "array",
          "description": "The schema fields.",
          "items": {
            "$ref": "#/definitions/FieldBase"
          }
        },
        "Sort": {
          "type": "array",
          "description": "Sorts content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Aggregations": {
          "type": "array",
          "description": "An optional list of aggregations to group content documents and list items.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "SortOrder": {
          "type": "integer",
          "description": "A simple ordering property for schemas.",
          "format": "int32"
        },
        "System": {
          "type": "boolean",
          "description": "Is true when schema is system provided."
        },
        "OwnerTokenId": {
          "type": "string",
          "description": "The owner token id. Defines the schema owner."
        },
        "Public": {
          "type": "boolean",
          "description": "Opens list item document accessibility. If true the SchemaPermissionSetIds must be empty."
        },
        "SchemaPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.",
          "items": {
            "type": "string"
          }
        },
        "ReferencedInContentSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type content for a schema with type layer.",
          "items": {
            "type": "string"
          }
        },
        "DescendantSchemaIds": {
          "type": "array",
          "description": "A complete id list of all descendant schemas.",
          "items": {
            "type": "string"
          }
        },
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        },
        "SearchFieldCount": {
          "description": "The number of fields generated by the schema for the Search operations.",
          "$ref": "#/definitions/SearchFieldCountViewItem"
        }
      }
    },
    "SchemaType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Content",
        "Layer",
        "List",
        "Struct"
      ],
      "enum": [
        "Content",
        "Layer",
        "List",
        "Struct"
      ]
    },
    "DisplayPattern": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TemplateEngine",
        "DisplayPatternType"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The display pattern id."
        },
        "TemplateEngine": {
          "description": "Defines the template engine for parsing the templates.",
          "$ref": "#/definitions/TemplateEngine"
        },
        "DisplayPatternType": {
          "description": "Defines the pattern type of the templates.",
          "$ref": "#/definitions/DisplayPatternType"
        },
        "Templates": {
          "description": "Language specific pattern templates.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        }
      }
    },
    "TemplateEngine": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "DotLiquid"
      ],
      "enum": [
        "DotLiquid"
      ]
    },
    "DisplayPatternType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Thumbnail",
        "List",
        "Detail",
        "Custom",
        "Name"
      ],
      "enum": [
        "Thumbnail",
        "List",
        "Detail",
        "Custom",
        "Name"
      ]
    },
    "FieldBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "The field base class.",
      "additionalProperties": false,
      "required": [
        "Required",
        "Fixed",
        "Index",
        "SimpleSearch",
        "Boost",
        "Kind"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The field id. Can be a slug and must be unique within the schema."
        },
        "IndexId": {
          "type": "string",
          "description": "The index id is auto generated by the system."
        },
        "FieldNamespace": {
          "type": "string",
          "description": "The namespace is auto generated by the system."
        },
        "Names": {
          "description": "Language specific field names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Required": {
          "type": "boolean",
          "description": "Defines if a field value is mandatory or not."
        },
        "Fixed": {
          "type": "boolean",
          "description": "Defines if the field can be edited or not."
        },
        "Index": {
          "type": "boolean",
          "description": "Maps the field in the elastic search index and its values become searchable."
        },
        "SimpleSearch": {
          "type": "boolean",
          "description": "Includes fields in the simple search. Index must be true."
        },
        "Boost": {
          "type": "number",
          "description": "Priorizes search results. SimpleSearch must be true.",
          "format": "double"
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "FieldBoolean": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDate": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Format": {
          "type": "string",
          "description": "Defines the date format structure."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDateTime": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Format": {
          "type": "string",
          "description": "Defines the date time format structure."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDateTimeArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "UniqueItems"
      ],
      "properties": {
        "UniqueItems": {
          "type": "boolean"
        },
        "MaximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "MinimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldDateTime"
        }
      ]
    },
    "FieldDecimal": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Pattern": {
          "type": "string"
        },
        "Minimum": {
          "type": "number",
          "description": "Defines the lowest possible value.",
          "format": "decimal"
        },
        "Maximum": {
          "type": "number",
          "description": "Defines the highest possible value.",
          "format": "decimal"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDictionary": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldDictionaryArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "UniqueItems"
      ],
      "properties": {
        "UniqueItems": {
          "type": "boolean"
        },
        "MaximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "MinimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldDictionary"
        }
      ]
    },
    "FieldGeoPoint": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldLong": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Pattern": {
          "type": "string"
        },
        "Minimum": {
          "type": "number",
          "description": "Defines the lowest possible value.",
          "format": "decimal"
        },
        "Maximum": {
          "type": "number",
          "description": "Defines the highest possible value.",
          "format": "decimal"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldLongArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "UniqueItems"
      ],
      "properties": {
        "UniqueItems": {
          "type": "boolean"
        },
        "MaximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "MinimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldLong"
        }
      ]
    },
    "FieldSingleFieldset": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "MaxRecursion"
      ],
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "MaxRecursion": {
          "type": "integer",
          "description": "Avoids cyclic dependencies and limits the elastic search index and json schema depth.",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldMultiFieldset": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "MaxRecursion",
        "UniqueItems"
      ],
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "MaxRecursion": {
          "type": "integer",
          "description": "Avoids cyclic dependencies and limits the elastic search index and json schema depth.",
          "format": "int32"
        },
        "UniqueItems": {
          "type": "boolean",
          "description": "Prevents duplicate values."
        },
        "MaximumItems": {
          "type": "integer",
          "description": "Defines the highest possible fieldset count.",
          "format": "int32"
        },
        "MinimumItems": {
          "type": "integer",
          "description": "Defines the lowest possible fieldset count.",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldSingleTagbox": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "MaxRecursion"
      ],
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type list."
        },
        "MaxRecursion": {
          "type": "integer",
          "description": "Avoids cyclic dependencies and limits the elastic search index and json schema depth.",
          "format": "int32"
        },
        "Filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "$ref": "#/definitions/FilterBase"
        },
        "ListItemCreateTemplate": {
          "type": "string",
          "description": "Json serialized template used for creating new list item"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldMultiTagbox": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "MaxRecursion",
        "UniqueItems"
      ],
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type list."
        },
        "MaxRecursion": {
          "type": "integer",
          "description": "Avoids cyclic dependencies and limits the elastic search index and json schema depth.",
          "format": "int32"
        },
        "UniqueItems": {
          "type": "boolean",
          "description": "Prevents duplicate values."
        },
        "MaximumItems": {
          "type": "integer",
          "description": "Defines the highest possible item count.",
          "format": "int32"
        },
        "MinimumItems": {
          "type": "integer",
          "description": "Defines the lowest possible item count.",
          "format": "int32"
        },
        "Filter": {
          "description": "An optional search filter. Limits the list item result set.",
          "$ref": "#/definitions/FilterBase"
        },
        "ListItemCreateTemplate": {
          "type": "string",
          "description": "Json serialized template used for creating new list item"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldString": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "KeepFieldValue",
        "MultiLine"
      ],
      "properties": {
        "Template": {
          "type": "string",
          "description": "It is a DotLiquid template."
        },
        "KeepFieldValue": {
          "type": "boolean",
          "description": "If true the Template will only render on item creation otherwise it will render on each update."
        },
        "Pattern": {
          "type": "string",
          "description": "Contains a regex validation pattern."
        },
        "MinimumLength": {
          "type": "integer",
          "description": "Defines the minimal string length.",
          "format": "int32"
        },
        "MaximumLength": {
          "type": "integer",
          "description": "Defines the maximal string length.",
          "format": "int32"
        },
        "Analyzers": {
          "type": "array",
          "description": "A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.",
          "items": {
            "$ref": "#/definitions/AnalyzerBase"
          }
        },
        "MultiLine": {
          "type": "boolean",
          "description": "Displays the field value in a multiline component."
        },
        "GrantedValues": {
          "type": "array",
          "description": "Similar to an enumeration valid field values are limited to values of this list.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "AnalyzerBase": {
      "type": "object",
      "discriminator": "Kind",
      "description": "The analyzer base class.",
      "additionalProperties": false,
      "required": [
        "SimpleSearch",
        "Kind"
      ],
      "properties": {
        "SimpleSearch": {
          "type": "boolean",
          "description": "Includes the analyzed field in the simple search."
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "EdgeNGramAnalyzer": {
      "type": "object",
      "description": "An analyzer using the EdgeNGram tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "FieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "LanguageAnalyzer": {
      "type": "object",
      "description": "An analyzer using a language analyzer. Restricted to the languages supported by elastic search.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html",
      "additionalProperties": false,
      "properties": {
        "FieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "NGramAnalyzer": {
      "type": "object",
      "description": "An analyzer using the NGram tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-ngram-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "FieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "PathHierarchyAnalyzer": {
      "type": "object",
      "description": "An analyzer using the path hierarchy tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pathhierarchy-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "FieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "SimpleAnalyzer": {
      "type": "object",
      "description": "An analyzer using a custom pattern tokenizer.\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-tokenizer.html",
      "additionalProperties": false,
      "properties": {
        "FieldSuffix": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzerBase"
        }
      ]
    },
    "FieldStringArray": {
      "type": "object",
      "description": "For internal use only (system schemas)",
      "additionalProperties": false,
      "required": [
        "UniqueItems"
      ],
      "properties": {
        "UniqueItems": {
          "type": "boolean"
        },
        "MaximumItems": {
          "type": "integer",
          "format": "int32"
        },
        "MinimumItems": {
          "type": "integer",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldString"
        }
      ]
    },
    "FieldTranslatedString": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "MultiLine",
        "KeepFieldValue"
      ],
      "properties": {
        "Pattern": {
          "type": "string",
          "description": "Contains a regex validation pattern."
        },
        "MinimumLength": {
          "type": "integer",
          "description": "Defines the minimal string length.",
          "format": "int32"
        },
        "MaximumLength": {
          "type": "integer",
          "description": "Defines the maximal string length.",
          "format": "int32"
        },
        "Analyzers": {
          "type": "array",
          "description": "A string field can have multiple analyzers, but only one per analyzer type. To have any effect the Index must be true.",
          "items": {
            "$ref": "#/definitions/AnalyzerBase"
          }
        },
        "MultiLine": {
          "type": "boolean",
          "description": "Displays the field value in a multiline component."
        },
        "RequiredMetadataLanguages": {
          "type": "array",
          "description": "Sets the required metadata languages for the translation field. The langauge configuration limits the available metadata languages.\nIf Required is true, the field and all its metadata languages are required, including x-default.\nIf Required is false, the field can be left empty, but as soon as a value is entered all required metadata languages are mandatory, including x-default.",
          "items": {
            "type": "string"
          }
        },
        "Template": {
          "type": "string",
          "description": "It is a DotLiquid template."
        },
        "KeepFieldValue": {
          "type": "boolean",
          "description": "If true the Template will only render on item creation otherwise it will render on each update."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "FieldSingleRelation": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "MaxRecursion"
      ],
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "RelationTypes": {
          "type": "array",
          "description": "Defines the relation types supported by the field.",
          "items": {
            "$ref": "#/definitions/RelationType"
          }
        },
        "MaxRecursion": {
          "type": "integer",
          "description": "Avoids cyclic dependencies and limits the elastic search index and json schema depth.",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "RelationType": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TargetContext"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The id property."
        },
        "Names": {
          "description": "Language specific relation names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "TargetContext": {
          "description": "Defines the valid target context.",
          "$ref": "#/definitions/TargetContext"
        },
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema. Limits the content or the list item result set depending on the relation's target context."
        },
        "Filter": {
          "description": "An optional search filter. Limits the content or the list item result set depending on the relation's target context.",
          "$ref": "#/definitions/FilterBase"
        }
      }
    },
    "TargetContext": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Content",
        "ListItem",
        "User",
        "Custom"
      ],
      "enum": [
        "Content",
        "ListItem",
        "User",
        "Custom"
      ]
    },
    "FieldMultiRelation": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "MaxRecursion",
        "UniqueItems"
      ],
      "properties": {
        "SchemaId": {
          "type": "string",
          "description": "The id of the schema with type struct."
        },
        "RelationTypes": {
          "type": "array",
          "description": "Defines the relation types supported by the field.",
          "items": {
            "$ref": "#/definitions/RelationType"
          }
        },
        "MaxRecursion": {
          "type": "integer",
          "description": "Avoids cyclic dependencies and limits the elastic search index and json schema depth.",
          "format": "int32"
        },
        "UniqueItems": {
          "type": "boolean",
          "description": "Prevents duplicate values."
        },
        "MaximumItems": {
          "type": "integer",
          "description": "Defines the highest possible item count.",
          "format": "int32"
        },
        "MinimumItems": {
          "type": "integer",
          "description": "Dfines the lowest possible item count.",
          "format": "int32"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FieldBase"
        }
      ]
    },
    "SearchFieldCountViewItem": {
      "type": "object",
      "description": "Count info of fields for search operations",
      "additionalProperties": false,
      "required": [
        "DataField",
        "IndexedField",
        "SimpleSearchField"
      ],
      "properties": {
        "DataField": {
          "type": "integer",
          "description": "The number of fields generated by the schema in the Search index.",
          "format": "int32"
        },
        "IndexedField": {
          "type": "integer",
          "description": "The number of indexed fields generated by the schema in the Search index.",
          "format": "int32"
        },
        "SimpleSearchField": {
          "type": "integer",
          "description": "The number of fields to be queried in the simple search for the schema.",
          "format": "int32"
        }
      }
    },
    "ExistsResponse": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Exists"
      ],
      "properties": {
        "Exists": {
          "type": "boolean"
        }
      }
    },
    "SchemaCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "SortOrder",
        "Public"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The schema id. Can be a slug, but must be unique throughout the whole customer setup."
        },
        "ParentSchemaId": {
          "type": "string",
          "description": "The parent schema id."
        },
        "Types": {
          "type": "array",
          "description": "Types control schema usage.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        },
        "Names": {
          "description": "Language specific schema names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Descriptions": {
          "description": "Language specific schema descriptions.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "DisplayPatterns": {
          "type": "array",
          "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/DisplayPattern"
          }
        },
        "Fields": {
          "type": "array",
          "description": "The schema fields. Can be empty.",
          "items": {
            "$ref": "#/definitions/FieldBase"
          }
        },
        "Aggregations": {
          "type": "array",
          "description": "An optional list of aggregations to group content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "SortOrder": {
          "type": "integer",
          "description": "A simple ordering property for schemas.",
          "format": "int32"
        },
        "Sort": {
          "type": "array",
          "description": "Sorts content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Public": {
          "type": "boolean",
          "description": "Opens list item document accessibility. If true SchemaPermissionSetIds must be empty."
        },
        "SchemaPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of schema permission sets. Control list item document permissions. When not empty Public must be false.",
          "items": {
            "type": "string"
          }
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "ReferencedInContentSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type content for a schema with type layer.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SchemaUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "SortOrder",
        "Public"
      ],
      "properties": {
        "Names": {
          "description": "Language specific schema names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Descriptions": {
          "description": "Language specific schema descriptions.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "DisplayPatterns": {
          "type": "array",
          "description": "Language specific DotLiquid templates. These templates will be resolved into display values in content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/DisplayPattern"
          }
        },
        "Fields": {
          "type": "array",
          "description": "The schema fields.",
          "items": {
            "$ref": "#/definitions/FieldBase"
          }
        },
        "Aggregations": {
          "type": "array",
          "description": "An optional list of aggregations to group content documents and list items.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "SortOrder": {
          "type": "integer",
          "description": "A simple ordering property for schemas.",
          "format": "int32"
        },
        "Sort": {
          "type": "array",
          "description": "Sorts content documents and/or list items.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Public": {
          "type": "boolean",
          "description": "Opens schema accessibility."
        },
        "SchemaPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of schema permission sets which control list item permissions. When not empty Public must be false.",
          "items": {
            "type": "string"
          }
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "ReferencedInContentSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type content for a schema with type layer.",
          "items": {
            "type": "string"
          }
        },
        "Types": {
          "type": "array",
          "description": "Types control schema usage. Schema types can only be added, but not removed.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        }
      }
    },
    "SchemaSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Start",
        "Limit"
      ],
      "properties": {
        "SearchString": {
          "type": "string",
          "description": "Limits the search by using a query string filter. The Lucene query string syntax is supported. Defaults to *."
        },
        "Sort": {
          "type": "array",
          "description": "Sorts the search results. Sorting on a not indexed field will throw an exception.",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Start": {
          "type": "integer",
          "description": "Defines the offset from the first result you want to fetch. Defaults to 0.",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "description": "Limits the document count of the result set. Defaults to 30.",
          "format": "int32"
        },
        "Filter": {
          "description": "An optional search filter. Limits the schema result set.",
          "$ref": "#/definitions/FilterBase"
        }
      }
    },
    "BaseResultOfSchemaViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "SchemaViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "FieldCount",
        "ChildCount",
        "Level",
        "System"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The schema id."
        },
        "ParentSchemaId": {
          "type": "string",
          "description": "The parent schema id."
        },
        "Types": {
          "type": "array",
          "description": "Types control schema usage.",
          "items": {
            "$ref": "#/definitions/SchemaType"
          }
        },
        "Names": {
          "description": "Language specific schema names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Descriptions": {
          "description": "Language specific schema descriptions.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "FieldCount": {
          "type": "integer",
          "description": "The count of all fields.",
          "format": "int32"
        },
        "ChildCount": {
          "type": "integer",
          "description": "The count of all schema descendants with a immediate inheritance.",
          "format": "int32"
        },
        "Level": {
          "type": "integer",
          "description": "The descendancy depth of the schema.",
          "format": "int32"
        },
        "System": {
          "type": "boolean",
          "description": "Is true when schema is system provided."
        }
      }
    },
    "UserRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "ManageContent",
        "ManageSharings",
        "ManageDrives",
        "ManageTransfer",
        "ManageAnalytics",
        "ManageChannels",
        "ManageSchemas",
        "ManageUsers",
        "ManageUserRoles",
        "ManagePermissions",
        "ManageSearchIndexes",
        "ManageRecipients",
        "ManageCollections",
        "ManageComments",
        "ManageListItems",
        "ManageServiceProviders"
      ],
      "enum": [
        "ManageContent",
        "ManageSharings",
        "ManageDrives",
        "ManageTransfer",
        "ManageAnalytics",
        "ManageChannels",
        "ManageSchemas",
        "ManageUsers",
        "ManageUserRoles",
        "ManagePermissions",
        "ManageSearchIndexes",
        "ManageRecipients",
        "ManageCollections",
        "ManageComments",
        "ManageListItems",
        "ManageServiceProviders"
      ]
    },
    "PermissionSetSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Start",
        "Limit"
      ],
      "properties": {
        "SearchString": {
          "type": "string"
        },
        "Sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Start": {
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Filter": {
          "$ref": "#/definitions/FilterBase"
        }
      }
    },
    "PermissionSetSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "AggregationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationResult"
          }
        },
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfPermissionSetViewItem"
        }
      ]
    },
    "BaseResultOfPermissionSetViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionSetViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "PermissionSetViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Trashed"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The permission set id."
        },
        "Trashed": {
          "type": "boolean"
        },
        "Names": {
          "description": "Language specific permission set names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        }
      }
    },
    "ContentPermissionSetDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PermissionSetDetailViewItemOfContentRight"
        }
      ]
    },
    "PermissionSetDetailViewItemOfContentRight": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Trashed",
        "Exclusive"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Trashed": {
          "type": "boolean"
        },
        "UserRolesRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleRightsViewItemOfContentRight"
          }
        },
        "UserRolesPermissionSetRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleRightsViewItemOfPermissionSetRight"
          }
        },
        "Exclusive": {
          "type": "boolean"
        }
      }
    },
    "UserRoleRightsViewItemOfContentRight": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserRoleId": {
          "type": "string"
        },
        "Names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentRight"
          }
        }
      }
    },
    "ContentRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "View",
        "Edit",
        "Update",
        "Manage",
        "Trash"
      ],
      "enum": [
        "View",
        "Edit",
        "Update",
        "Manage",
        "Trash"
      ]
    },
    "UserRoleRightsViewItemOfPermissionSetRight": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserRoleId": {
          "type": "string"
        },
        "Names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionSetRight"
          }
        }
      }
    },
    "PermissionSetRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Apply"
      ],
      "enum": [
        "Apply"
      ]
    },
    "SchemaPermissionSetDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/PermissionSetDetailViewItemOfMetadataRight"
        }
      ]
    },
    "PermissionSetDetailViewItemOfMetadataRight": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Trashed",
        "Exclusive"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Trashed": {
          "type": "boolean"
        },
        "UserRolesRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleRightsViewItemOfMetadataRight"
          }
        },
        "UserRolesPermissionSetRights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleRightsViewItemOfPermissionSetRight"
          }
        },
        "Exclusive": {
          "type": "boolean"
        }
      }
    },
    "UserRoleRightsViewItemOfMetadataRight": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserRoleId": {
          "type": "string"
        },
        "Names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Rights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataRight"
          }
        }
      }
    },
    "MetadataRight": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "View",
        "Edit",
        "Manage"
      ],
      "enum": [
        "View",
        "Edit",
        "Manage"
      ]
    },
    "VersionInfoViewItem": {
      "type": "object",
      "description": "The version view item for the environment.",
      "additionalProperties": false,
      "properties": {
        "FileVersion": {
          "type": "string",
          "description": "The manual file version of Picturepark.Contract.dll."
        },
        "FileProductVersion": {
          "type": "string",
          "description": "The GitVersionTask generated file product version of Picturepark.Configuration.dll."
        },
        "ContractVersion": {
          "type": "string",
          "description": "The current contract version stored in CustomerDoc / EnvironmentDoc."
        },
        "Release": {
          "type": "string",
          "description": "The bamboo release version. Only provided on bamboo deployments."
        }
      }
    },
    "ShareBaseDetailViewItem": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "EntityType",
        "Kind"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        },
        "EntityType": {
          "$ref": "#/definitions/EntityType"
        },
        "ContentSelections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentDetailViewItem"
          }
        },
        "TemplateId": {
          "type": "string"
        },
        "ExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "ContentDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ContentTypeId",
        "Trashed",
        "EntityType",
        "ContentType"
      ],
      "properties": {
        "ContentTypeId": {
          "type": "integer",
          "format": "int32"
        },
        "Trashed": {
          "type": "boolean"
        },
        "EntityType": {
          "description": "The entity type of a content document is content.",
          "$ref": "#/definitions/EntityType"
        },
        "ContentSchemaId": {
          "type": "string",
          "description": "The id of the schema with schema type content."
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "Content": {
          "$ref": "#/definitions/DataDictionary"
        },
        "Metadata": {
          "$ref": "#/definitions/DataDictionary"
        },
        "Id": {
          "type": "string"
        },
        "ContentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        },
        "Outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputViewItem"
          }
        },
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        },
        "OwnerTokenId": {
          "type": "string"
        },
        "ContentType": {
          "$ref": "#/definitions/ContentType"
        },
        "DisplayValues": {
          "description": "Contains language specific display values, rendered according to the content schema's display pattern configuration.",
          "$ref": "#/definitions/DisplayValueViewItem"
        }
      }
    },
    "ShareBasicDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "MailRecipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MailRecipientViewItem"
          }
        },
        "InternalRecipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalRecipientViewItem"
          }
        },
        "LanguageCode": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseDetailViewItem"
        }
      ]
    },
    "MailRecipientViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserEmail": {
          "$ref": "#/definitions/UserEmail"
        },
        "Token": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      }
    },
    "UserEmail": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        }
      }
    },
    "InternalRecipientViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Recipient": {
          "$ref": "#/definitions/UserItem"
        },
        "Token": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      }
    },
    "ShareEmbedDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "EmbedContentItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmbedContentViewItem"
          }
        },
        "Token": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseDetailViewItem"
        }
      ]
    },
    "EmbedContentViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string"
        },
        "OutputFormatId": {
          "type": "string"
        },
        "Token": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      }
    },
    "ShareBaseUpdateRequest": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "Description": {
          "type": "string"
        },
        "ShareContentItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareContent"
          }
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "ShareContent": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentId": {
          "type": "string"
        },
        "OutputFormatIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ShareBasicUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseUpdateRequest"
        }
      ]
    },
    "ShareEmbedUpdateRequest": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseUpdateRequest"
        }
      ]
    },
    "BaseResultOfShareBaseViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareBaseViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "ShareBaseViewItem": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "EntityType",
        "Kind"
      ],
      "properties": {
        "Name": {
          "type": "string"
        },
        "ContentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Id": {
          "type": "string"
        },
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        },
        "EntityType": {
          "$ref": "#/definitions/EntityType"
        },
        "ExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "ShareBasicViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "MailRecipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MailRecipientViewItem"
          }
        },
        "InternalRecipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternalRecipientViewItem"
          }
        },
        "Description": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseViewItem"
        }
      ]
    },
    "ShareEmbedViewItem": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseViewItem"
        }
      ]
    },
    "ShareAggregationRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "SearchString": {
          "type": "string"
        },
        "Sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Filter": {
          "description": "An optional search filter. Limits the content document result set.",
          "$ref": "#/definitions/FilterBase"
        },
        "AggregationFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregationFilter"
          }
        },
        "Aggregators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "DisplayLanguage": {
          "type": "string"
        }
      }
    },
    "ShareBaseCreateRequest": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "Name": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "ExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "Contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareContent"
          }
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "ShareBasicCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RecipientsEmail": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserEmail"
          }
        },
        "RecipientsUser": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserItem"
          }
        },
        "RecipientsGroup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleViewItem"
          }
        },
        "LanguageCode": {
          "type": "string"
        },
        "TemplateId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseCreateRequest"
        }
      ]
    },
    "UserRoleViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Trashed"
      ],
      "properties": {
        "Id": {
          "type": "string",
          "description": "The user role id."
        },
        "Trashed": {
          "type": "boolean"
        },
        "Names": {
          "description": "Language specific user role names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "UserRights": {
          "type": "array",
          "description": "All user rights for this user role.",
          "items": {
            "$ref": "#/definitions/UserRight"
          }
        }
      }
    },
    "ShareEmbedCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/ShareBaseCreateRequest"
        }
      ]
    },
    "CreateShareResult": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ShareId": {
          "type": "string"
        }
      }
    },
    "FileTransferDeleteRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "TransferId": {
          "type": "string"
        },
        "FileTransferIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Blacklist": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlacklistItem"
          }
        }
      }
    },
    "BlacklistItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "type": "string"
        },
        "Match": {
          "type": "string"
        }
      }
    },
    "CreateTransferRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TransferType",
        "CreateCollection"
      ],
      "properties": {
        "Name": {
          "type": "string"
        },
        "TransferType": {
          "$ref": "#/definitions/TransferType"
        },
        "Files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferUploadFile"
          }
        },
        "DriveFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferDriveFile"
          }
        },
        "WebLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferWebLink"
          }
        },
        "CollectionName": {
          "type": "string"
        },
        "CreateCollection": {
          "type": "boolean"
        }
      }
    },
    "TransferType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "FileUpload",
        "DriveImport",
        "DriveExport",
        "WebDownload",
        "SchemaImport"
      ],
      "enum": [
        "FileUpload",
        "DriveImport",
        "DriveExport",
        "WebDownload",
        "SchemaImport"
      ]
    },
    "TransferUploadFile": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FileName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TransferFile"
        }
      ]
    },
    "TransferFile": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Identifier": {
          "type": "string"
        }
      }
    },
    "TransferDriveFile": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DriveId": {
          "type": "string"
        },
        "FileId": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "ExternalOutputFolderId": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TransferFile"
        }
      ]
    },
    "TransferWebLink": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Url": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TransferFile"
        }
      ]
    },
    "TransferViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "State",
        "TransferType",
        "FileTransferCount"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/TransferState"
        },
        "TransferType": {
          "$ref": "#/definitions/TransferType"
        },
        "BusinessProcessId": {
          "type": "string"
        },
        "FileTransferCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TransferState": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "ImportFailed",
        "Created",
        "UploadFailed",
        "Deleted",
        "TransferReady",
        "FileDeleteInProgress",
        "TransferCleanup"
      ],
      "enum": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "ImportFailed",
        "Created",
        "UploadFailed",
        "Deleted",
        "TransferReady",
        "FileDeleteInProgress",
        "TransferCleanup"
      ]
    },
    "TransferDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "State",
        "TransferType",
        "ItemProgress",
        "ItemCount",
        "ItemsFailed",
        "ItemsCancelled",
        "LastProgressStamp",
        "FileTransferCount"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Rev": {
          "type": "string"
        },
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        },
        "Name": {
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/TransferState"
        },
        "BusinessProcessId": {
          "type": "string"
        },
        "TransferType": {
          "$ref": "#/definitions/TransferType"
        },
        "ItemProgress": {
          "type": "integer",
          "format": "int64"
        },
        "ItemCount": {
          "type": "integer",
          "format": "int64"
        },
        "ItemsFailed": {
          "type": "integer",
          "format": "int64"
        },
        "ItemsCancelled": {
          "type": "integer",
          "format": "int64"
        },
        "LastProgressStamp": {
          "type": "integer",
          "format": "int64"
        },
        "FileTransferCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FileTransferDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "State",
        "EntityType"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Rev": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Identifier": {
          "type": "string"
        },
        "Audit": {
          "$ref": "#/definitions/StoreAudit"
        },
        "TransferId": {
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/FileTransferState"
        },
        "EntityType": {
          "$ref": "#/definitions/EntityType"
        },
        "FileMetadata": {
          "$ref": "#/definitions/FileMetadata"
        },
        "DriveMetadata": {
          "$ref": "#/definitions/DriveMetadata"
        },
        "OutputItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputItem"
          }
        },
        "ContentId": {
          "type": "string"
        }
      }
    },
    "FileTransferState": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "DataExtractionInProgress",
        "DataExtractionDone",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "UploadFailed",
        "ImportFailed",
        "DeleteInProgress",
        "Deleted",
        "CleanupInProgress",
        "CleanupCompleted"
      ],
      "enum": [
        "Draft",
        "UploadInProgress",
        "UploadCompleted",
        "DataExtractionInProgress",
        "DataExtractionDone",
        "ImportInProgress",
        "ImportCompleted",
        "UploadCancelled",
        "ImportCancelled",
        "UploadFailed",
        "ImportFailed",
        "DeleteInProgress",
        "Deleted",
        "CleanupInProgress",
        "CleanupCompleted"
      ]
    },
    "FileMetadata": {
      "type": "object",
      "discriminator": "Kind",
      "additionalProperties": false,
      "required": [
        "Kind"
      ],
      "properties": {
        "Names": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Descriptions": {
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "FileExtension": {
          "type": "string"
        },
        "FileName": {
          "type": "string"
        },
        "FilePath": {
          "type": "string"
        },
        "FileSizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "Sha1Hash": {
          "type": "string"
        },
        "XmpMetadata": {
          "$ref": "#/definitions/XmpMetadata"
        },
        "ExifMetadata": {
          "$ref": "#/definitions/ExifMetadata"
        },
        "Language": {
          "type": "string"
        },
        "Kind": {
          "type": "string"
        }
      }
    },
    "XmpMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Dc": {
          "$ref": "#/definitions/Dc"
        },
        "Crs": {
          "$ref": "#/definitions/Crs"
        },
        "IptcCore": {
          "$ref": "#/definitions/IptcCore"
        },
        "IptcExt": {
          "$ref": "#/definitions/IptcExt"
        },
        "IptcIIM": {
          "$ref": "#/definitions/IptcIIM"
        },
        "Lr": {
          "$ref": "#/definitions/Lr"
        },
        "Pdf": {
          "$ref": "#/definitions/Pdf"
        },
        "Photoshop": {
          "$ref": "#/definitions/Photoshop"
        },
        "Plus": {
          "$ref": "#/definitions/Plus"
        },
        "Tiff": {
          "$ref": "#/definitions/Tiff"
        },
        "Xmp": {
          "$ref": "#/definitions/Xmp"
        },
        "XmpBJ": {
          "$ref": "#/definitions/XmpBJ"
        },
        "XmpDM": {
          "$ref": "#/definitions/XmpDM"
        },
        "XmpG": {
          "$ref": "#/definitions/XmpG"
        },
        "XmpGImg": {
          "$ref": "#/definitions/XmpGImg"
        },
        "Xmpidq": {
          "$ref": "#/definitions/Xmpidq"
        },
        "XmpMM": {
          "$ref": "#/definitions/XmpMM"
        },
        "XmpNote": {
          "$ref": "#/definitions/XmpNote"
        },
        "XmpRights": {
          "$ref": "#/definitions/XmpRights"
        },
        "XmpTPg": {
          "$ref": "#/definitions/XmpTPg"
        }
      }
    },
    "Dc": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Contributor": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Coverage": {
          "type": "string"
        },
        "Creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Date": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          }
        },
        "Description": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Format": {
          "type": "string"
        },
        "Identifier": {
          "type": "string"
        },
        "Language": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Publisher": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Relation": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Rights": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Source": {
          "type": "string"
        },
        "Subject": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Title": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "Crs": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AutoBrightness": {
          "type": "boolean"
        },
        "AutoContrast": {
          "type": "boolean"
        },
        "AutoExposure": {
          "type": "boolean"
        },
        "AutoShadows": {
          "type": "boolean"
        },
        "BlueHue": {
          "type": "integer",
          "format": "int32"
        },
        "BlueSaturation": {
          "type": "integer",
          "format": "int32"
        },
        "Brightness": {
          "type": "integer",
          "format": "int32"
        },
        "CameraProfile": {
          "type": "string"
        },
        "ChromaticAberrationB": {
          "type": "integer",
          "format": "int32"
        },
        "ChromaticAberrationR": {
          "type": "integer",
          "format": "int32"
        },
        "ColorNoiseReduction": {
          "type": "integer",
          "format": "int32"
        },
        "Contrast": {
          "type": "integer",
          "format": "int32"
        },
        "CropTop": {
          "type": "number",
          "format": "decimal"
        },
        "CropLeft": {
          "type": "number",
          "format": "decimal"
        },
        "CropBottom": {
          "type": "number",
          "format": "decimal"
        },
        "CropRight": {
          "type": "number",
          "format": "decimal"
        },
        "CropAngle": {
          "type": "number",
          "format": "decimal"
        },
        "CropWidth": {
          "type": "number",
          "format": "decimal"
        },
        "CropHeight": {
          "type": "number",
          "format": "decimal"
        },
        "CropUnits": {
          "$ref": "#/definitions/CropUnit"
        },
        "Exposure": {
          "type": "number",
          "format": "decimal"
        },
        "GreenHue": {
          "type": "integer",
          "format": "int32"
        },
        "GreenSaturation": {
          "type": "integer",
          "format": "int32"
        },
        "HasCrop": {
          "type": "boolean"
        },
        "HasSettings": {
          "type": "boolean"
        },
        "LuminanceSmoothing": {
          "type": "integer",
          "format": "int32"
        },
        "RawFileName": {
          "type": "string"
        },
        "RedHue": {
          "type": "integer",
          "format": "int32"
        },
        "RedSaturation": {
          "type": "integer",
          "format": "int32"
        },
        "Saturation": {
          "type": "integer",
          "format": "int32"
        },
        "Shadows": {
          "type": "integer",
          "format": "int32"
        },
        "ShadowTint": {
          "type": "integer",
          "format": "int32"
        },
        "Sharpness": {
          "type": "integer",
          "format": "int32"
        },
        "Temperature": {
          "type": "integer",
          "format": "int32"
        },
        "Tint": {
          "type": "integer",
          "format": "int32"
        },
        "ToneCurve": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ToneCurveName": {
          "$ref": "#/definitions/ToneCurve"
        },
        "Version": {
          "type": "string"
        },
        "VignetteAmount": {
          "type": "integer",
          "format": "int32"
        },
        "VignetteMidpoint": {
          "type": "integer",
          "format": "int32"
        },
        "WhiteBalance": {
          "$ref": "#/definitions/WhiteBalance"
        }
      }
    },
    "CropUnit": {
      "type": "string",
      "description": "Corresponds to crs.CropUnitsChoice",
      "x-enumNames": [
        "Pixels",
        "Inches",
        "Centimeters"
      ],
      "enum": [
        "Pixels",
        "Inches",
        "Centimeters"
      ]
    },
    "ToneCurve": {
      "type": "string",
      "description": "Corresponds to crs.ToneCurveNameChoice",
      "x-enumNames": [
        "Linear",
        "MediumContrast",
        "StrongContrast",
        "Custom"
      ],
      "enum": [
        "Linear",
        "MediumContrast",
        "StrongContrast",
        "Custom"
      ]
    },
    "WhiteBalance": {
      "type": "string",
      "description": "Corresponds to crs.WhiteBalanceChoice",
      "x-enumNames": [
        "AsShot",
        "Auto",
        "Daylight",
        "Cloudy",
        "Shade",
        "Tungsten",
        "Fluorescent",
        "Flash",
        "Custom"
      ],
      "enum": [
        "AsShot",
        "Auto",
        "Daylight",
        "Cloudy",
        "Shade",
        "Tungsten",
        "Fluorescent",
        "Flash",
        "Custom"
      ]
    },
    "IptcCore": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CountryCode": {
          "type": "string"
        },
        "IntellectualGenre": {
          "type": "string"
        },
        "Scene": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SubjectCode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Location": {
          "type": "string"
        },
        "CreatorContactInfo": {
          "$ref": "#/definitions/CreatorContactInfo"
        }
      }
    },
    "CreatorContactInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Address": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "PhoneNumber": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        }
      }
    },
    "IptcExt": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AdditionalModelInformation": {
          "type": "string"
        },
        "ArtworkOrObject": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtworkOrObjectInfo"
          }
        },
        "OrganisationInImageCode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ControlledVocabularyTerm": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LocationShown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationInfo"
          }
        },
        "ModelAge": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "OrganisationInImageName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "PersonInImage": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DigitalImageGUID": {
          "type": "string"
        },
        "DigitalSourceType": {
          "type": "string"
        },
        "Event": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ImageRegistryEntry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistryEntryInfo"
          }
        },
        "MetadataLastEdited": {
          "type": "string",
          "format": "date-time"
        },
        "LocationCreated": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationInfo"
          }
        },
        "MaxAvailHeight": {
          "type": "integer",
          "format": "int32"
        },
        "MaxAvailWidth": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ArtworkOrObjectInfo": {
      "type": "object",
      "description": "Corresponds to Xmp.Structure.ArtworkOrObjectDetails",
      "additionalProperties": false,
      "properties": {
        "CopyrightNotice": {
          "type": "string"
        },
        "Creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "Source": {
          "type": "string"
        },
        "SourceInventoryNumber": {
          "type": "string"
        },
        "Title": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "LocationInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "City": {
          "type": "string"
        },
        "CountryCode": {
          "type": "string"
        },
        "CountryName": {
          "type": "string"
        },
        "ProvinceState": {
          "type": "string"
        },
        "Sublocation": {
          "type": "string"
        },
        "WorldRegion": {
          "type": "string"
        }
      }
    },
    "RegistryEntryInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RegistryItemIdentifier": {
          "type": "string"
        },
        "RegistryOrganisationIdentifier": {
          "type": "string"
        }
      }
    },
    "IptcIIM": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ModelVersion": {
          "type": "integer",
          "format": "int32"
        },
        "Destination": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FileFormat": {
          "type": "integer",
          "format": "int32"
        },
        "FileFormatVersion": {
          "type": "integer",
          "format": "int32"
        },
        "ServiceIdentifier": {
          "type": "string"
        },
        "EnvelopeNumber": {
          "type": "string"
        },
        "ProductID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EnvelopePriority": {
          "type": "integer",
          "format": "int32"
        },
        "DateSent": {
          "type": "string",
          "format": "date-time"
        },
        "TimeSent": {
          "type": "string",
          "format": "date-time"
        },
        "UNO": {
          "type": "string"
        },
        "RecordVersion": {
          "type": "integer",
          "format": "int32"
        },
        "ObjectTypeReference": {
          "type": "string"
        },
        "ObjectAttributeReference": {
          "type": "string"
        },
        "ObjectName": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "EditStatus": {
          "type": "string"
        },
        "Urgency": {
          "type": "integer",
          "format": "int32"
        },
        "SubjectReference": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Category": {
          "type": "string"
        },
        "SupplementalCategory": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "FixtureIdentifier": {
          "type": "string"
        },
        "Keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ContentLocationCode": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ContentLocationName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReleaseDate": {
          "type": "string",
          "format": "date-time"
        },
        "ReleaseTime": {
          "type": "string",
          "format": "date-time"
        },
        "ExpirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "ExpirationTime": {
          "type": "string",
          "format": "date-time"
        },
        "SpecialInstruction": {
          "type": "string"
        },
        "ActionAdvised": {
          "type": "string"
        },
        "ReferenceService": {
          "type": "string"
        },
        "ReferenceDate": {
          "type": "string",
          "format": "date-time"
        },
        "ReferenceNumber": {
          "type": "string"
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "TimeCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DigitalCreationDate": {
          "type": "string",
          "format": "date-time"
        },
        "DigitalCreationTime": {
          "type": "string",
          "format": "date-time"
        },
        "OriginatingProgram": {
          "type": "string"
        },
        "ProgramVersion": {
          "type": "string"
        },
        "Byline": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "BylineTitle": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Sublocation": {
          "type": "string"
        },
        "ProvinceState": {
          "type": "string"
        },
        "CountryPrimaryLocationCode": {
          "type": "string"
        },
        "CountryPrimaryLocationName": {
          "type": "string"
        },
        "OriginalTransmissionReference": {
          "type": "string"
        },
        "Headline": {
          "type": "string"
        },
        "Credit": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        },
        "CopyrightNotice": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "CaptionAbstract": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "WriterEditor": {
          "type": "string"
        },
        "ImageType": {
          "type": "string"
        },
        "ImageOrientation": {
          "type": "string"
        },
        "LanguageIdentifier": {
          "type": "string"
        }
      }
    },
    "Lr": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "HierarchicalSubject": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Pdf": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Keywords": {
          "type": "string"
        },
        "PDFVersion": {
          "type": "string"
        },
        "Producer": {
          "type": "string"
        },
        "Trapped": {
          "type": "boolean"
        }
      }
    },
    "Photoshop": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AuthorsPosition": {
          "type": "string"
        },
        "CaptionWriter": {
          "type": "string"
        },
        "Category": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "ColorMode": {
          "$ref": "#/definitions/ColorMode"
        },
        "Country": {
          "type": "string"
        },
        "Credit": {
          "type": "string"
        },
        "DateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "DocumentAncestors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Headline": {
          "type": "string"
        },
        "History": {
          "type": "string"
        },
        "ICCProfile": {
          "type": "string"
        },
        "Instructions": {
          "type": "string"
        },
        "Source": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "SupplementalCategories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TextLayers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhotoshopLayer"
          }
        },
        "TransmissionReference": {
          "type": "string"
        },
        "Urgency": {
          "type": "integer",
          "format": "int32"
        },
        "LegacyIPTCDigest": {
          "type": "string"
        }
      }
    },
    "ColorMode": {
      "type": "string",
      "description": "Corresponds to photoshop.ColorModeChoice",
      "x-enumNames": [
        "Bitmap",
        "Grayscale",
        "Indexed",
        "RGB",
        "CMYK",
        "Multichannel",
        "Duotone",
        "LAB"
      ],
      "enum": [
        "Bitmap",
        "Grayscale",
        "Indexed",
        "RGB",
        "CMYK",
        "Multichannel",
        "Duotone",
        "LAB"
      ]
    },
    "PhotoshopLayer": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "LayerName": {
          "type": "string"
        },
        "LayerText": {
          "type": "string"
        }
      }
    },
    "Plus": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Version": {
          "type": "string"
        },
        "Licensee": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseeInfo"
          }
        },
        "LicenseeID": {
          "type": "string"
        },
        "LicenseeName": {
          "type": "string"
        },
        "EndUser": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EndUserInfo"
          }
        },
        "EndUserID": {
          "type": "string"
        },
        "EndUserName": {
          "type": "string"
        },
        "Licensor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicensorInfo"
          }
        },
        "LicensorNotes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MediaSummaryCode": {
          "type": "string"
        },
        "LicenseStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "LicenseEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "MediaConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "RegionConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ProductOrServiceConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ImageFileConstraints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ImageAlterationConstraints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ImageDuplicationConstraints": {
          "type": "string"
        },
        "ModelReleaseStatus": {
          "type": "string"
        },
        "ModelReleaseID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "MinorModelAgeDisclosure": {
          "type": "string"
        },
        "PropertyReleaseStatus": {
          "type": "string"
        },
        "PropertyReleaseID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OtherConstraints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "CreditLineRequired": {
          "type": "string"
        },
        "AdultContentWarning": {
          "type": "string"
        },
        "OtherLicenseRequirements": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TermsAndConditionsText": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "TermsAndConditionsURL": {
          "type": "string"
        },
        "OtherConditions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ImageType": {
          "type": "string"
        },
        "LicensorImageID": {
          "type": "string"
        },
        "FileNameAsDelivered": {
          "type": "string"
        },
        "ImageFileFormatAsDelivered": {
          "type": "string"
        },
        "ImageFileSizeAsDelivered": {
          "type": "string"
        },
        "CopyrightStatus": {
          "type": "string"
        },
        "CopyrightRegistrationNumber": {
          "type": "string"
        },
        "FirstPublicationDate": {
          "type": "string",
          "format": "date-time"
        },
        "CopyrightOwner": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CopyrightOwnerInfo"
          }
        },
        "CopyrightOwnerImageID": {
          "type": "string"
        },
        "ImageCreator": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageCreatorInfo"
          }
        },
        "ImageCreatorImageID": {
          "type": "string"
        },
        "ImageSupplier": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageSupplierInfo"
          }
        },
        "ImageSupplierImageID": {
          "type": "string"
        },
        "LicenseeImageID": {
          "type": "string"
        },
        "LicenseeImageNotes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "OtherImageInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "LicenseID": {
          "type": "string"
        },
        "LicensorTransactionID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LicenseeTransactionID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LicenseeProjectReference": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LicenseTransactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "Reuse": {
          "type": "string"
        },
        "OtherLicenseDocuments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OtherLicenseInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Custom1": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom2": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom3": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom4": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom5": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom6": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom7": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom8": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom9": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "Custom10": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "LicenseeInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "LicenseeName": {
          "type": "string"
        },
        "LicenseeID": {
          "type": "string"
        }
      }
    },
    "EndUserInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "EndUserName": {
          "type": "string"
        },
        "EndUserID": {
          "type": "string"
        }
      }
    },
    "LicensorInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "LicensorName": {
          "type": "string"
        },
        "LicensorID": {
          "type": "string"
        },
        "LicensorStreetAddress": {
          "type": "string"
        },
        "LicensorExtendedAddress": {
          "type": "string"
        },
        "LicensorCity": {
          "type": "string"
        },
        "LicensorRegion": {
          "type": "string"
        },
        "LicensorPostalCode": {
          "type": "string"
        },
        "LicensorCountry": {
          "type": "string"
        },
        "LicensorTelephoneType1": {
          "type": "string"
        },
        "LicensorTelephone1": {
          "type": "string"
        },
        "LicensorTelephoneType2": {
          "type": "string"
        },
        "LicensorTelephone2": {
          "type": "string"
        },
        "LicensorEmail": {
          "type": "string"
        },
        "LicensorURL": {
          "type": "string"
        }
      }
    },
    "CopyrightOwnerInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "CopyrightOwnerName": {
          "type": "string"
        },
        "CopyrightOwnerID": {
          "type": "string"
        }
      }
    },
    "ImageCreatorInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ImageCreatorName": {
          "type": "string"
        },
        "ImageCreatorID": {
          "type": "string"
        }
      }
    },
    "ImageSupplierInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ImageSupplierName": {
          "type": "string"
        },
        "ImageSupplierID": {
          "type": "string"
        }
      }
    },
    "Tiff": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Artist": {
          "type": "string"
        },
        "BitsPerSample": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "Compression": {
          "$ref": "#/definitions/Compression"
        },
        "Copyright": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "DateTime": {
          "type": "string",
          "format": "date-time"
        },
        "ImageDescription": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ImageLength": {
          "type": "integer",
          "format": "int32"
        },
        "ImageWidth": {
          "type": "integer",
          "format": "int32"
        },
        "Make": {
          "type": "string"
        },
        "Model": {
          "type": "string"
        },
        "Orientation": {
          "$ref": "#/definitions/Orientation"
        },
        "PhotometricInterpretation": {
          "$ref": "#/definitions/PhotometricInterpretation"
        },
        "PlanarConfiguration": {
          "$ref": "#/definitions/PlanarConfiguration"
        },
        "PrimaryChromaticities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ReferenceBlackWhite": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResolutionUnit": {
          "$ref": "#/definitions/ResolutionUnit"
        },
        "SamplesPerPixel": {
          "type": "integer",
          "format": "int32"
        },
        "Software": {
          "type": "string"
        },
        "TransferFunction": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "WhitePoint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "XResolution": {
          "type": "string"
        },
        "YResolution": {
          "type": "string"
        },
        "YCbCrCoefficients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "YCbCrPositioning": {
          "$ref": "#/definitions/YCbCrPositioning"
        },
        "YCbCrSubSampling": {
          "$ref": "#/definitions/YCbCrSubSampling"
        },
        "NativeDigest": {
          "type": "string"
        }
      }
    },
    "Compression": {
      "type": "string",
      "description": "Corresponds to tiff.CompressionChoice",
      "x-enumNames": [
        "Uncompressed",
        "CCITT",
        "T4",
        "T6",
        "LZW",
        "OJPEG",
        "JPEG",
        "Deflate",
        "T82",
        "T43",
        "NeXT",
        "ARW",
        "RAW",
        "SRW",
        "Group3_1D",
        "PackBits",
        "ThunderScan",
        "KDC",
        "RasterPadding",
        "LineWork",
        "HighContinuous",
        "BinaryLineWork",
        "PixarFilm",
        "PixarLog",
        "DCS",
        "JBIG",
        "JPEG2000",
        "NEF",
        "JBIG2",
        "DCR",
        "PEF"
      ],
      "enum": [
        "Uncompressed",
        "CCITT",
        "T4",
        "T6",
        "LZW",
        "OJPEG",
        "JPEG",
        "Deflate",
        "T82",
        "T43",
        "NeXT",
        "ARW",
        "RAW",
        "SRW",
        "Group3_1D",
        "PackBits",
        "ThunderScan",
        "KDC",
        "RasterPadding",
        "LineWork",
        "HighContinuous",
        "BinaryLineWork",
        "PixarFilm",
        "PixarLog",
        "DCS",
        "JBIG",
        "JPEG2000",
        "NEF",
        "JBIG2",
        "DCR",
        "PEF"
      ]
    },
    "Orientation": {
      "type": "string",
      "description": "Corresponds to tiff.OrientationChoice",
      "x-enumNames": [
        "None",
        "TopRowLeftColumn",
        "TopRowRightColumn",
        "BottomRowLeftColumn",
        "BottomRowRightColumn",
        "LeftRowTopColumn",
        "RightRowTopColumn",
        "RightRowBottomColumn",
        "LeftRowBottomColumn",
        "Unknown"
      ],
      "enum": [
        "None",
        "TopRowLeftColumn",
        "TopRowRightColumn",
        "BottomRowLeftColumn",
        "BottomRowRightColumn",
        "LeftRowTopColumn",
        "RightRowTopColumn",
        "RightRowBottomColumn",
        "LeftRowBottomColumn",
        "Unknown"
      ]
    },
    "PhotometricInterpretation": {
      "type": "string",
      "description": "Corresponds to tiff.PhotometricInterpretationChoice",
      "x-enumNames": [
        "WhiteIsZero",
        "BlackIsZero",
        "RGB",
        "Palette",
        "TransparencyMask",
        "CMYK",
        "YCbCr",
        "CIELab",
        "ICCLab",
        "ITULab",
        "ColorFilterArray",
        "LogL",
        "LogLUV",
        "LinearRaw"
      ],
      "enum": [
        "WhiteIsZero",
        "BlackIsZero",
        "RGB",
        "Palette",
        "TransparencyMask",
        "CMYK",
        "YCbCr",
        "CIELab",
        "ICCLab",
        "ITULab",
        "ColorFilterArray",
        "LogL",
        "LogLUV",
        "LinearRaw"
      ]
    },
    "PlanarConfiguration": {
      "type": "string",
      "description": "Corresponds to tiff.PlanarConfigurationChoice",
      "x-enumNames": [
        "Chunky",
        "Planar",
        "Line"
      ],
      "enum": [
        "Chunky",
        "Planar",
        "Line"
      ]
    },
    "ResolutionUnit": {
      "type": "string",
      "description": "Corresponds to exif.FocalPlaneResolutionUnitChoice",
      "x-enumNames": [
        "None",
        "Inch",
        "Centimeter"
      ],
      "enum": [
        "None",
        "Inch",
        "Centimeter"
      ]
    },
    "YCbCrPositioning": {
      "type": "string",
      "description": "Corresponds to tiff.YCbCrPositioningChoice",
      "x-enumNames": [
        "Centered",
        "Cosited"
      ],
      "enum": [
        "Centered",
        "Cosited"
      ]
    },
    "YCbCrSubSampling": {
      "type": "string",
      "description": "Corresponds to tiff.YCbCrSubSamplingChoice",
      "x-enumNames": [
        "YCbCr111",
        "YCbCr422",
        "YCbCr420"
      ],
      "enum": [
        "YCbCr111",
        "YCbCr422",
        "YCbCr420"
      ]
    },
    "Xmp": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "BaseURL": {
          "type": "string"
        },
        "CreateDate": {
          "type": "string",
          "format": "date-time"
        },
        "CreatorTool": {
          "type": "string"
        },
        "Identifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Label": {
          "type": "string"
        },
        "MetadataDate": {
          "type": "string",
          "format": "date-time"
        },
        "ModifyDate": {
          "type": "string",
          "format": "date-time"
        },
        "Nickname": {
          "type": "string"
        },
        "Rating": {
          "$ref": "#/definitions/Rating"
        },
        "Thumbnails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/XmpGImg"
          }
        },
        "PageInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/XmpGImg"
          }
        }
      }
    },
    "Rating": {
      "type": "string",
      "description": "Corresponds to xmp.RatingChoice",
      "x-enumNames": [
        "Rejected",
        "Unrated",
        "One",
        "Two",
        "Three",
        "Four",
        "Five"
      ],
      "enum": [
        "Rejected",
        "Unrated",
        "One",
        "Two",
        "Three",
        "Four",
        "Five"
      ]
    },
    "XmpGImg": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Format": {
          "$ref": "#/definitions/ImgFormat"
        },
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        },
        "Image": {
          "type": "string"
        }
      }
    },
    "ImgFormat": {
      "type": "string",
      "description": "Corresponds to xmpGImg.FormatChoice",
      "x-enumNames": [
        "JPEG"
      ],
      "enum": [
        "JPEG"
      ]
    },
    "XmpBJ": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "JobRef": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        }
      }
    },
    "Job": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Url": {
          "type": "string"
        }
      }
    },
    "XmpDM": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AbsPeakAudioFilePath": {
          "type": "string"
        },
        "Artist": {
          "type": "string"
        },
        "Album": {
          "type": "string"
        },
        "AltTapeName": {
          "type": "string"
        },
        "AltTimecode": {
          "$ref": "#/definitions/TimeCode"
        },
        "AudioChannelType": {
          "$ref": "#/definitions/AudioChannelType"
        },
        "AudioCompressor": {
          "type": "string"
        },
        "AudioSampleRate": {
          "type": "integer",
          "format": "int32"
        },
        "AudioSampleType": {
          "$ref": "#/definitions/AudioSampleType"
        },
        "BeatSpliceParams": {
          "$ref": "#/definitions/BeatSpliceStretch"
        },
        "CameraAngle": {
          "$ref": "#/definitions/CameraAngle"
        },
        "CameraLabel": {
          "type": "string"
        },
        "CameraModel": {
          "type": "string"
        },
        "CameraMove": {
          "$ref": "#/definitions/CameraMove"
        },
        "Client": {
          "type": "string"
        },
        "Comment": {
          "type": "string"
        },
        "Composer": {
          "type": "string"
        },
        "ContributedMedia": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Media"
          }
        },
        "Director": {
          "type": "string"
        },
        "DirectorPhotography": {
          "type": "string"
        },
        "Duration": {
          "$ref": "#/definitions/Time"
        },
        "Engineer": {
          "type": "string"
        },
        "FileDataRate": {
          "type": "string"
        },
        "Genre": {
          "type": "string"
        },
        "Good": {
          "type": "boolean"
        },
        "Instrument": {
          "type": "string"
        },
        "IntroTime": {
          "$ref": "#/definitions/Time"
        },
        "Key": {
          "$ref": "#/definitions/AudioMusicalKey"
        },
        "LogComment": {
          "type": "string"
        },
        "Loop": {
          "type": "boolean"
        },
        "NumberOfBeats": {
          "type": "number",
          "format": "decimal"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "OutCue": {
          "$ref": "#/definitions/Time"
        },
        "ProjectName": {
          "type": "string"
        },
        "ProjectRef": {
          "$ref": "#/definitions/ProjectLink"
        },
        "PullDown": {
          "$ref": "#/definitions/VideoPullDown"
        },
        "RelativePeakAudioFilePath": {
          "type": "string"
        },
        "RelativeTimestamp": {
          "$ref": "#/definitions/Time"
        },
        "ReleaseDate": {
          "type": "string",
          "format": "date-time"
        },
        "ResampleParams": {
          "$ref": "#/definitions/ResampleStretch"
        },
        "ScaleType": {
          "$ref": "#/definitions/AudioMusicalScaleType"
        },
        "Scene": {
          "type": "string"
        },
        "ShotDate": {
          "type": "string",
          "format": "date-time"
        },
        "ShotDay": {
          "type": "string"
        },
        "ShotLocation": {
          "type": "string"
        },
        "ShotName": {
          "type": "string"
        },
        "ShotNumber": {
          "type": "string"
        },
        "ShotSize": {
          "$ref": "#/definitions/ShotSize"
        },
        "SpeakerPlacement": {
          "type": "string"
        },
        "StartTimecode": {
          "$ref": "#/definitions/TimeCode"
        },
        "StretchMode": {
          "$ref": "#/definitions/AudioStretchMode"
        },
        "TakeNumber": {
          "type": "integer",
          "format": "int32"
        },
        "TapeName": {
          "type": "string"
        },
        "Tempo": {
          "type": "number",
          "format": "decimal"
        },
        "TimeScaleParams": {
          "$ref": "#/definitions/TimeScaleStretch"
        },
        "TimeSignature": {
          "$ref": "#/definitions/TimeSignature"
        },
        "TrackNumber": {
          "type": "integer",
          "format": "int32"
        },
        "Tracks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Track"
          }
        },
        "VideoAlphaMode": {
          "$ref": "#/definitions/VideoAlphaMode"
        },
        "VideoAlphaPremultipleColor": {
          "$ref": "#/definitions/XmpG"
        },
        "VideoAlphaUnityIsTransparent": {
          "type": "boolean"
        },
        "VideoColorSpace": {
          "$ref": "#/definitions/VideoColorSpace"
        },
        "VideoCompressor": {
          "type": "string"
        },
        "VideoFieldOrder": {
          "$ref": "#/definitions/VideoFieldOrder"
        },
        "VideoFrameRate": {
          "$ref": "#/definitions/VideoFrameRate"
        },
        "VideoFrameSize": {
          "$ref": "#/definitions/Dimension"
        },
        "VideoPixelDepth": {
          "$ref": "#/definitions/VideoPixelDepth"
        },
        "VideoPixelAspectRatio": {
          "type": "string"
        }
      }
    },
    "TimeCode": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "TimeFormat": {
          "$ref": "#/definitions/TimeFormat"
        },
        "TimeValue": {
          "type": "string"
        }
      }
    },
    "TimeFormat": {
      "type": "string",
      "description": "Corresponds to Timecode.TimeFormatChoice",
      "x-enumNames": [
        "Timecode24",
        "Timecode25",
        "Timecode2997Drop",
        "Timecode2997NonDrop",
        "Timecode30",
        "Timecode50",
        "Timecode5994Drop",
        "Timecode5994NonDrop",
        "Timecode60",
        "Timecode23976"
      ],
      "enum": [
        "Timecode24",
        "Timecode25",
        "Timecode2997Drop",
        "Timecode2997NonDrop",
        "Timecode30",
        "Timecode50",
        "Timecode5994Drop",
        "Timecode5994NonDrop",
        "Timecode60",
        "Timecode23976"
      ]
    },
    "AudioChannelType": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioChannelTypeChoice",
      "x-enumNames": [
        "CHANNEL_MONO",
        "CHANNEL_STEREO",
        "CHANNEL_5_1",
        "CHANNEL_7_1",
        "CHANNEL_16",
        "CHANNEL_OTHER"
      ],
      "enum": [
        "CHANNEL_MONO",
        "CHANNEL_STEREO",
        "CHANNEL_5_1",
        "CHANNEL_7_1",
        "CHANNEL_16",
        "CHANNEL_OTHER"
      ]
    },
    "AudioSampleType": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioSampleTypeChoice",
      "x-enumNames": [
        "SAMPLE_8_INT",
        "SAMPLE_16_INT",
        "SAMPLE_24_INT",
        "SAMPLE_32_INT",
        "SAMPLE_32_FLOAT",
        "SAMPLE_COMPRESSED",
        "SAMPLE_PACKED",
        "SAMPLE_OTHER"
      ],
      "enum": [
        "SAMPLE_8_INT",
        "SAMPLE_16_INT",
        "SAMPLE_24_INT",
        "SAMPLE_32_INT",
        "SAMPLE_32_FLOAT",
        "SAMPLE_COMPRESSED",
        "SAMPLE_PACKED",
        "SAMPLE_OTHER"
      ]
    },
    "BeatSpliceStretch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RiseInDecibel": {
          "type": "number",
          "format": "decimal"
        },
        "RiseInTimeDuration": {
          "$ref": "#/definitions/Time"
        },
        "UseFileBeatsMarker": {
          "type": "boolean"
        }
      }
    },
    "Time": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Scale": {
          "type": "string"
        },
        "Value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CameraAngle": {
      "type": "string",
      "description": "Corresponds to xmpDM.CameraAngleChoice",
      "x-enumNames": [
        "ANGLE_LOW",
        "ANGLE_EYE_LEVEL",
        "ANGLE_HIGH",
        "ANGLE_OVERHEAD_SHOT",
        "ANGLE_BIRDS_EYE_SHOT",
        "ANGLE_DUTCH",
        "ANGLE_POV",
        "ANGLE_OVER_THE_SHOULDER",
        "ANGLE_REACTION_SHOT"
      ],
      "enum": [
        "ANGLE_LOW",
        "ANGLE_EYE_LEVEL",
        "ANGLE_HIGH",
        "ANGLE_OVERHEAD_SHOT",
        "ANGLE_BIRDS_EYE_SHOT",
        "ANGLE_DUTCH",
        "ANGLE_POV",
        "ANGLE_OVER_THE_SHOULDER",
        "ANGLE_REACTION_SHOT"
      ]
    },
    "CameraMove": {
      "type": "string",
      "description": "Corresponds to xmpDM.CameraMoveChoice",
      "x-enumNames": [
        "MOVE_AERIAL",
        "MOVE_BOOM_UP",
        "MOVE_BOOM_DOWN",
        "MOVE_CRANE_UP",
        "MOVE_CRANE_DOWN",
        "MOVE_DOLLY_IN",
        "MOVE_DOLLY_OUT",
        "MOVE_PAN_LEFT",
        "MOVE_PAN_RIGHT",
        "MOVE_PEDESTAL_UP",
        "MOVE_PEDESTAL_DOWN",
        "MOVE_TILT_UP",
        "MOVE_TILT_DOWN",
        "MOVE_TRACKING",
        "MOVE_TRUCK_LEFT",
        "MOVE_TRUCK_RIGHT",
        "MOVE_ZOOM_IN",
        "MOVE_ZOOM_OUT"
      ],
      "enum": [
        "MOVE_AERIAL",
        "MOVE_BOOM_UP",
        "MOVE_BOOM_DOWN",
        "MOVE_CRANE_UP",
        "MOVE_CRANE_DOWN",
        "MOVE_DOLLY_IN",
        "MOVE_DOLLY_OUT",
        "MOVE_PAN_LEFT",
        "MOVE_PAN_RIGHT",
        "MOVE_PEDESTAL_UP",
        "MOVE_PEDESTAL_DOWN",
        "MOVE_TILT_UP",
        "MOVE_TILT_DOWN",
        "MOVE_TRACKING",
        "MOVE_TRUCK_LEFT",
        "MOVE_TRUCK_RIGHT",
        "MOVE_ZOOM_IN",
        "MOVE_ZOOM_OUT"
      ]
    },
    "Media": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Duration": {
          "$ref": "#/definitions/Time"
        },
        "Managed": {
          "type": "boolean"
        },
        "Path": {
          "type": "string"
        },
        "StartTime": {
          "$ref": "#/definitions/Time"
        },
        "Track": {
          "type": "string"
        },
        "WebStatement": {
          "type": "string"
        }
      }
    },
    "AudioMusicalKey": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioMusicalKeyChoice",
      "x-enumNames": [
        "KEY_C",
        "KEY_C_SHARP",
        "KEY_D",
        "KEY_D_SHARP",
        "KEY_E",
        "KEY_F",
        "KEY_F_SHARP",
        "KEY_G",
        "KEY_G_SHARP",
        "KEY_A",
        "KEY_A_SHARP",
        "KEY_B"
      ],
      "enum": [
        "KEY_C",
        "KEY_C_SHARP",
        "KEY_D",
        "KEY_D_SHARP",
        "KEY_E",
        "KEY_F",
        "KEY_F_SHARP",
        "KEY_G",
        "KEY_G_SHARP",
        "KEY_A",
        "KEY_A_SHARP",
        "KEY_B"
      ]
    },
    "Marker": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Comment": {
          "type": "string"
        },
        "CuePointParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "CuePointType": {
          "type": "string"
        },
        "Duration": {
          "type": "string"
        },
        "Location": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Probability": {
          "type": "number",
          "format": "decimal"
        },
        "Speaker": {
          "type": "string"
        },
        "StartTime": {
          "type": "string"
        },
        "Target": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/MarkerType"
        }
      }
    },
    "MarkerType": {
      "type": "string",
      "description": "Corresponds to Xmp.Media.Marker.TypeChoice",
      "x-enumNames": [
        "Chapter",
        "Cue",
        "Index",
        "Speech",
        "Track"
      ],
      "enum": [
        "Chapter",
        "Cue",
        "Index",
        "Speech",
        "Track"
      ]
    },
    "ProjectLink": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Path": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/ProjectLinkType"
        }
      }
    },
    "ProjectLinkType": {
      "type": "string",
      "description": "Corresponds to Xmp.Media.ProjectLink.TypeChoice",
      "x-enumNames": [
        "Movie",
        "Still",
        "Audio",
        "Custom"
      ],
      "enum": [
        "Movie",
        "Still",
        "Audio",
        "Custom"
      ]
    },
    "VideoPullDown": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoPullDownChoice",
      "x-enumNames": [
        "PULLDOWN_WSSWW",
        "PULLDOWN_SSWWW",
        "PULLDOWN_SWWWS",
        "PULLDOWN_WWWSS",
        "PULLDOWN_WWSSW",
        "PULLDOWN_WWWSW",
        "PULLDOWN_WWSWW",
        "PULLDOWN_WSWWW",
        "PULLDOWN_SWWWW",
        "PULLDOWN_WWWWS"
      ],
      "enum": [
        "PULLDOWN_WSSWW",
        "PULLDOWN_SSWWW",
        "PULLDOWN_SWWWS",
        "PULLDOWN_WWWSS",
        "PULLDOWN_WWSSW",
        "PULLDOWN_WWWSW",
        "PULLDOWN_WWSWW",
        "PULLDOWN_WSWWW",
        "PULLDOWN_SWWWW",
        "PULLDOWN_WWWWS"
      ]
    },
    "ResampleStretch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Quality": {
          "$ref": "#/definitions/Quality"
        }
      }
    },
    "Quality": {
      "type": "string",
      "description": "Corresponds to Xmp.Media.resampleStretch.QualityChoice and Xmp.Media.timeScaleStretch.QualityChoice",
      "x-enumNames": [
        "High",
        "Medium",
        "Low"
      ],
      "enum": [
        "High",
        "Medium",
        "Low"
      ]
    },
    "AudioMusicalScaleType": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioMusicalScaleTypeChoice",
      "x-enumNames": [
        "SCALE_MAJOR",
        "SCALE_MINOR",
        "SCALE_BOTH",
        "SCALE_NEITHER"
      ],
      "enum": [
        "SCALE_MAJOR",
        "SCALE_MINOR",
        "SCALE_BOTH",
        "SCALE_NEITHER"
      ]
    },
    "ShotSize": {
      "type": "string",
      "description": "Corresponds to xmpDM.ShotSizeChoice",
      "x-enumNames": [
        "SHOT_ECU",
        "SHOT_MCU",
        "SHOT_CU",
        "SHOT_MS",
        "SHOT_WS",
        "SHOT_MWS",
        "SHOT_EWS"
      ],
      "enum": [
        "SHOT_ECU",
        "SHOT_MCU",
        "SHOT_CU",
        "SHOT_MS",
        "SHOT_WS",
        "SHOT_MWS",
        "SHOT_EWS"
      ]
    },
    "AudioStretchMode": {
      "type": "string",
      "description": "Corresponds to xmpDM.AudioStretchModeChoice",
      "x-enumNames": [
        "STRETCH_FIXED_LENGTH",
        "STRETCH_TIME_SCALE",
        "STRETCH_RESAMPLE",
        "STRETCH_BEAT_SPLICE",
        "STRETCH_HYBRID"
      ],
      "enum": [
        "STRETCH_FIXED_LENGTH",
        "STRETCH_TIME_SCALE",
        "STRETCH_RESAMPLE",
        "STRETCH_BEAT_SPLICE",
        "STRETCH_HYBRID"
      ]
    },
    "TimeScaleStretch": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FrameOverlappingPercentage": {
          "type": "number",
          "format": "decimal"
        },
        "FrameSize": {
          "type": "number",
          "format": "decimal"
        },
        "Quality": {
          "$ref": "#/definitions/Quality"
        }
      }
    },
    "TimeSignature": {
      "type": "string",
      "description": "Corresponds to xmpDM.TimeSignatureChoice",
      "x-enumNames": [
        "TIME_2_4",
        "TIME_3_4",
        "TIME_4_4",
        "TIME_5_4",
        "TIME_7_4",
        "TIME_6_8",
        "TIME_9_8",
        "TIME_12_8",
        "TIME_OTHER"
      ],
      "enum": [
        "TIME_2_4",
        "TIME_3_4",
        "TIME_4_4",
        "TIME_5_4",
        "TIME_7_4",
        "TIME_6_8",
        "TIME_9_8",
        "TIME_12_8",
        "TIME_OTHER"
      ]
    },
    "Track": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FrameRate": {
          "type": "string"
        },
        "Markers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Marker"
          }
        },
        "TrackName": {
          "type": "string"
        },
        "TrackType": {
          "$ref": "#/definitions/MarkerType"
        }
      }
    },
    "VideoAlphaMode": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoAlphaModeChoice",
      "x-enumNames": [
        "ALPHA_MODE_STRAIGHT",
        "ALPHA_MODE_PREMULTIPLIED",
        "ALPHA_MODE_NONE"
      ],
      "enum": [
        "ALPHA_MODE_STRAIGHT",
        "ALPHA_MODE_PREMULTIPLIED",
        "ALPHA_MODE_NONE"
      ]
    },
    "XmpG": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "A": {
          "type": "integer",
          "format": "int32"
        },
        "B": {
          "type": "integer",
          "format": "int32"
        },
        "L": {
          "type": "number",
          "format": "decimal"
        },
        "Black": {
          "type": "number",
          "format": "decimal"
        },
        "Cyan": {
          "type": "number",
          "format": "decimal"
        },
        "Magenta": {
          "type": "number",
          "format": "decimal"
        },
        "Yellow": {
          "type": "number",
          "format": "decimal"
        },
        "Blue": {
          "type": "integer",
          "format": "int32"
        },
        "Green": {
          "type": "integer",
          "format": "int32"
        },
        "Red": {
          "type": "integer",
          "format": "int32"
        },
        "Mode": {
          "$ref": "#/definitions/ColorantMode"
        },
        "SwatchName": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/ColorantType"
        }
      }
    },
    "ColorantMode": {
      "type": "string",
      "description": "Corresponds to xmpG.ModeChoice",
      "x-enumNames": [
        "CMYK",
        "RGB",
        "LAB"
      ],
      "enum": [
        "CMYK",
        "RGB",
        "LAB"
      ]
    },
    "ColorantType": {
      "type": "string",
      "description": "Corresponds to xmpG.TypeChoice",
      "x-enumNames": [
        "Process",
        "Spot"
      ],
      "enum": [
        "Process",
        "Spot"
      ]
    },
    "VideoColorSpace": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoColorSpaceChoice",
      "x-enumNames": [
        "COLOR_SPACE_SRGB",
        "COLOR_SPACE_CCIR_601",
        "COLOR_SPACE_CCIR_709"
      ],
      "enum": [
        "COLOR_SPACE_SRGB",
        "COLOR_SPACE_CCIR_601",
        "COLOR_SPACE_CCIR_709"
      ]
    },
    "VideoFieldOrder": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoFieldOrderChoice",
      "x-enumNames": [
        "FIELD_ORDER_UPPER",
        "FIELD_ORDER_LOWER",
        "FIELD_ORDER_PROGRESSIVE"
      ],
      "enum": [
        "FIELD_ORDER_UPPER",
        "FIELD_ORDER_LOWER",
        "FIELD_ORDER_PROGRESSIVE"
      ]
    },
    "VideoFrameRate": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoFrameRateChoice",
      "x-enumNames": [
        "FRAME_RATE_24",
        "FRAME_RATE_NTSC",
        "FRAME_RATE_PAL"
      ],
      "enum": [
        "FRAME_RATE_24",
        "FRAME_RATE_NTSC",
        "FRAME_RATE_PAL"
      ]
    },
    "Dimension": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Height": {
          "type": "number",
          "format": "decimal"
        },
        "Width": {
          "type": "number",
          "format": "decimal"
        },
        "Unit": {
          "$ref": "#/definitions/Unit"
        }
      }
    },
    "Unit": {
      "type": "string",
      "description": "Corresponds to stDim.UnitChoice",
      "x-enumNames": [
        "Inch",
        "Millimeter",
        "Centimeter",
        "Pixel",
        "Pica",
        "Point"
      ],
      "enum": [
        "Inch",
        "Millimeter",
        "Centimeter",
        "Pixel",
        "Pica",
        "Point"
      ]
    },
    "VideoPixelDepth": {
      "type": "string",
      "description": "Corresponds to xmpDM.VideoPixelDepthChoice",
      "x-enumNames": [
        "PIXEL_DEPTH_8_INT",
        "PIXEL_DEPTH_16_INT",
        "PIXEL_DEPTH_24_INT",
        "PIXEL_DEPTH_32_INT",
        "PIXEL_DEPTH_32_FLOAT",
        "PIXEL_DEPTH_OTHER"
      ],
      "enum": [
        "PIXEL_DEPTH_8_INT",
        "PIXEL_DEPTH_16_INT",
        "PIXEL_DEPTH_24_INT",
        "PIXEL_DEPTH_32_INT",
        "PIXEL_DEPTH_32_FLOAT",
        "PIXEL_DEPTH_OTHER"
      ]
    },
    "Xmpidq": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Scheme": {
          "type": "string"
        }
      }
    },
    "XmpMM": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DerivedFrom": {
          "$ref": "#/definitions/Reference"
        },
        "DocumentID": {
          "type": "string"
        },
        "History": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "Ingredients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "InstanceID": {
          "type": "string"
        },
        "ManagedFrom": {
          "$ref": "#/definitions/Reference"
        },
        "Manager": {
          "type": "string"
        },
        "ManageTo": {
          "type": "string"
        },
        "ManageUI": {
          "type": "string"
        },
        "ManagerVariant": {
          "type": "string"
        },
        "OriginalDocumentID": {
          "type": "string"
        },
        "RenditionClass": {
          "type": "string"
        },
        "RenditionParams": {
          "type": "string"
        },
        "VersionID": {
          "type": "string"
        },
        "Versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionInfo"
          }
        }
      }
    },
    "Reference": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AlternatePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "DocumentID": {
          "type": "string"
        },
        "FilePath": {
          "type": "string"
        },
        "FromPart": {
          "type": "string"
        },
        "InstanceID": {
          "type": "string"
        },
        "LastModifyDate": {
          "type": "string",
          "format": "date-time"
        },
        "Manager": {
          "type": "string"
        },
        "ManagerVariant": {
          "type": "string"
        },
        "ManageTo": {
          "type": "string"
        },
        "ManageUI": {
          "type": "string"
        },
        "MaskMarkers": {
          "$ref": "#/definitions/MaskMarkers"
        },
        "OriginalDocumentID": {
          "type": "string"
        },
        "PartMapping": {
          "type": "string"
        },
        "RenditionClass": {
          "type": "string"
        },
        "RenditionParams": {
          "type": "string"
        },
        "ToPart": {
          "type": "string"
        },
        "VersionID": {
          "type": "string"
        }
      }
    },
    "MaskMarkers": {
      "type": "string",
      "description": "Corresponds to stRef.MaskMarkersChoice",
      "x-enumNames": [
        "All",
        "None"
      ],
      "enum": [
        "All",
        "None"
      ]
    },
    "Event": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Action": {
          "$ref": "#/definitions/EventAction"
        },
        "Changed": {
          "type": "string"
        },
        "InstanceID": {
          "type": "string"
        },
        "Parameters": {
          "type": "string"
        },
        "SoftwareAgent": {
          "type": "string"
        },
        "When": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EventAction": {
      "type": "string",
      "description": "Corresponds to stEvt.ActionChoice",
      "x-enumNames": [
        "Converted",
        "Copied",
        "Created",
        "Cropped",
        "Edited",
        "Filtered",
        "Formatted",
        "VersionUpdated",
        "Printed",
        "Published",
        "Managed",
        "Produced",
        "Resized",
        "Saved",
        "Derived"
      ],
      "enum": [
        "Converted",
        "Copied",
        "Created",
        "Cropped",
        "Edited",
        "Filtered",
        "Formatted",
        "VersionUpdated",
        "Printed",
        "Published",
        "Managed",
        "Produced",
        "Resized",
        "Saved",
        "Derived"
      ]
    },
    "VersionInfo": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Comments": {
          "type": "string"
        },
        "Event": {
          "$ref": "#/definitions/Event"
        },
        "Modifier": {
          "type": "string"
        },
        "ModifyDate": {
          "type": "string",
          "format": "date-time"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "XmpNote": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "HasExtendedXMP": {
          "type": "string"
        }
      }
    },
    "XmpRights": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Certificate": {
          "type": "string"
        },
        "Marked": {
          "type": "boolean"
        },
        "Owner": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UsageTerms": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "WebStatement": {
          "type": "string"
        }
      }
    },
    "XmpTPg": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Colorants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/XmpG"
          }
        },
        "Fonts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Font"
          }
        },
        "MaxPageSize": {
          "$ref": "#/definitions/Dimension"
        },
        "NPages": {
          "type": "integer",
          "format": "int32"
        },
        "PlateNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Font": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ChildFontFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Composite": {
          "type": "boolean"
        },
        "FontFace": {
          "type": "string"
        },
        "FontFamily": {
          "type": "string"
        },
        "FontFileName": {
          "type": "string"
        },
        "FontName": {
          "type": "string"
        },
        "FontType": {
          "$ref": "#/definitions/FontType"
        },
        "VersionString": {
          "type": "string"
        }
      }
    },
    "FontType": {
      "type": "string",
      "description": "Corresponds to stFnt.FontTypeChoice",
      "x-enumNames": [
        "TrueType",
        "Type1",
        "OpenType",
        "OpenTypeCFF"
      ],
      "enum": [
        "TrueType",
        "Type1",
        "OpenType",
        "OpenTypeCFF"
      ]
    },
    "ExifMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Exif": {
          "$ref": "#/definitions/Exif"
        },
        "ExifAux": {
          "$ref": "#/definitions/ExifAux"
        }
      }
    },
    "Exif": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ApertureValue": {
          "type": "string"
        },
        "BrightnessValue": {
          "type": "string"
        },
        "CFAPattern": {
          "$ref": "#/definitions/CFAPattern"
        },
        "ColorSpace": {
          "$ref": "#/definitions/ColorSpace"
        },
        "ComponentsConfiguration": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "CompressedBitsPerPixel": {
          "type": "string"
        },
        "Contrast": {
          "$ref": "#/definitions/Contrast"
        },
        "CustomRendered": {
          "$ref": "#/definitions/CustomRendered"
        },
        "DateTimeOriginal": {
          "type": "string",
          "format": "date-time"
        },
        "DateTimeDigitized": {
          "type": "string",
          "format": "date-time"
        },
        "DeviceSettingDescription": {
          "$ref": "#/definitions/DeviceSettings"
        },
        "DigitalZoomRatio": {
          "type": "string"
        },
        "ExifVersion": {
          "$ref": "#/definitions/ExifVersion"
        },
        "ExposureBiasValue": {
          "type": "string"
        },
        "ExposureIndex": {
          "type": "string"
        },
        "ExposureMode": {
          "$ref": "#/definitions/ExposureMode"
        },
        "ExposureProgram": {
          "$ref": "#/definitions/ExposureProgram"
        },
        "ExposureTime": {
          "type": "string"
        },
        "FileSource": {
          "$ref": "#/definitions/FileSource"
        },
        "Flash": {
          "$ref": "#/definitions/Flash"
        },
        "FlashEnergy": {
          "type": "string"
        },
        "FlashpixVersion": {
          "$ref": "#/definitions/FlashpixVersion"
        },
        "FNumber": {
          "type": "string"
        },
        "FocalLength": {
          "type": "string"
        },
        "FocalLengthIn35mmFilm": {
          "type": "integer",
          "format": "int32"
        },
        "FocalPlaneResolutionUnit": {
          "$ref": "#/definitions/FocalPlaneResolutionUnit"
        },
        "FocalPlaneXResolution": {
          "type": "string"
        },
        "FocalPlaneYResolution": {
          "type": "string"
        },
        "GainControl": {
          "$ref": "#/definitions/GainControl"
        },
        "GPSAltitude": {
          "type": "string"
        },
        "GPSAltitudeRef": {
          "$ref": "#/definitions/GPSAltitudeRef"
        },
        "GPSAreaInformation": {
          "type": "string"
        },
        "GPSDestBearing": {
          "type": "string"
        },
        "GPSDestBearingRef": {
          "$ref": "#/definitions/GPSDestBearingRef"
        },
        "GPSDestDistance": {
          "type": "string"
        },
        "GPSDestDistanceRef": {
          "$ref": "#/definitions/GPSDestDistanceRef"
        },
        "GPSDestLatitude": {
          "type": "string"
        },
        "GPSDestLongitude": {
          "type": "string"
        },
        "GPSDifferential": {
          "$ref": "#/definitions/GPSDifferential"
        },
        "GPSDOP": {
          "type": "string"
        },
        "GPSImgDirection": {
          "type": "string"
        },
        "GPSImgDirectionRef": {
          "$ref": "#/definitions/GPSImgDirectionRef"
        },
        "GPSCoordinate": {
          "$ref": "#/definitions/GPSCoordinate"
        },
        "GPSLatitude": {
          "type": "string"
        },
        "GPSLongitude": {
          "type": "string"
        },
        "GPSMapDatum": {
          "type": "string"
        },
        "GPSMeasureMode": {
          "type": "string"
        },
        "GPSProcessingMethod": {
          "type": "string"
        },
        "GPSSatellites": {
          "type": "string"
        },
        "GPSSpeed": {
          "type": "string"
        },
        "GPSSpeedRef": {
          "$ref": "#/definitions/GPSSpeedRef"
        },
        "GPSStatus": {
          "$ref": "#/definitions/GPSStatus"
        },
        "GPSTimeStamp": {
          "type": "string",
          "format": "date-time"
        },
        "GPSTrack": {
          "type": "string"
        },
        "GPSTrackRef": {
          "type": "string"
        },
        "GPSVersionID": {
          "type": "string"
        },
        "ImageUniqueID": {
          "type": "string"
        },
        "ISOSpeedRatings": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "LightSource": {
          "$ref": "#/definitions/LightSource"
        },
        "MaxApertureValue": {
          "type": "string"
        },
        "MeteringMode": {
          "$ref": "#/definitions/MeteringMode"
        },
        "OECF": {
          "$ref": "#/definitions/OECF"
        },
        "PixelXDimension": {
          "type": "integer",
          "format": "int32"
        },
        "PixelYDimension": {
          "type": "integer",
          "format": "int32"
        },
        "RelatedSoundFile": {
          "type": "string"
        },
        "Saturation": {
          "$ref": "#/definitions/Saturation"
        },
        "SceneCaptureType": {
          "$ref": "#/definitions/SceneCaptureType"
        },
        "SceneType": {
          "$ref": "#/definitions/SceneType"
        },
        "SensingMethod": {
          "$ref": "#/definitions/SensingMethod"
        },
        "Sharpness": {
          "$ref": "#/definitions/Sharpness"
        },
        "ShutterSpeedValue": {
          "type": "string"
        },
        "SpatialFrequencyResponse": {
          "$ref": "#/definitions/SFR"
        },
        "SpectralSensitivity": {
          "type": "string"
        },
        "SubjectArea": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "SubjectDistance": {
          "type": "string"
        },
        "SubjectDistanceRange": {
          "$ref": "#/definitions/SubjectDistanceRange"
        },
        "SubjectLocation": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "UserComment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "WhiteBalance": {
          "$ref": "#/definitions/WhiteBalanceExif"
        },
        "NativeDigest": {
          "type": "string"
        }
      }
    },
    "CFAPattern": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Columns": {
          "type": "integer",
          "format": "int32"
        },
        "Rows": {
          "type": "integer",
          "format": "int32"
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ColorSpace": {
      "type": "string",
      "description": "Corresponds to exif.ColorSpaceChoice",
      "x-enumNames": [
        "None",
        "sRGB",
        "AdobeRGB",
        "Uncalibrated"
      ],
      "enum": [
        "None",
        "sRGB",
        "AdobeRGB",
        "Uncalibrated"
      ]
    },
    "Contrast": {
      "type": "string",
      "description": "Corresponds to exif.ContrastChoice",
      "x-enumNames": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ],
      "enum": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ]
    },
    "CustomRendered": {
      "type": "string",
      "description": "Corresponds to exif.CustomRenderedChoice",
      "x-enumNames": [
        "NormalProcess",
        "CustomProcess"
      ],
      "enum": [
        "NormalProcess",
        "CustomProcess"
      ]
    },
    "DeviceSettings": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Columns": {
          "type": "integer",
          "format": "int32"
        },
        "Rows": {
          "type": "integer",
          "format": "int32"
        },
        "Settings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExifVersion": {
      "type": "string",
      "description": "Corresponds to exif.ExifVersionChoice",
      "x-enumNames": [
        "V210",
        "V220",
        "V221",
        "V222",
        "V230"
      ],
      "enum": [
        "V210",
        "V220",
        "V221",
        "V222",
        "V230"
      ]
    },
    "ExposureMode": {
      "type": "string",
      "description": "Corresponds to exif.ExposureModeChoice",
      "x-enumNames": [
        "Auto",
        "Manual",
        "AutoBracket"
      ],
      "enum": [
        "Auto",
        "Manual",
        "AutoBracket"
      ]
    },
    "ExposureProgram": {
      "type": "string",
      "description": "Corresponds to exif.ExposureProgramChoice",
      "x-enumNames": [
        "Undefined",
        "Manual",
        "NormalProgram",
        "AperturePriority",
        "ShutterPriority",
        "CreativeProgram",
        "ActionProgram",
        "PortraitMode",
        "LandscapeMode",
        "Unknown"
      ],
      "enum": [
        "Undefined",
        "Manual",
        "NormalProgram",
        "AperturePriority",
        "ShutterPriority",
        "CreativeProgram",
        "ActionProgram",
        "PortraitMode",
        "LandscapeMode",
        "Unknown"
      ]
    },
    "FileSource": {
      "type": "string",
      "description": "Corresponds to exif.FileSourceChoice",
      "x-enumNames": [
        "Other",
        "TransparentScanner",
        "ReflexScanner",
        "DSC"
      ],
      "enum": [
        "Other",
        "TransparentScanner",
        "ReflexScanner",
        "DSC"
      ]
    },
    "Flash": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Fired": {
          "type": "boolean"
        },
        "Return": {
          "$ref": "#/definitions/FlashReturn"
        },
        "Mode": {
          "$ref": "#/definitions/FlashMode"
        },
        "Function": {
          "type": "boolean"
        },
        "RedEyeMode": {
          "type": "boolean"
        }
      }
    },
    "FlashReturn": {
      "type": "string",
      "description": "Corresponds to Xmp.Structure.Flash.ReturnChoice",
      "x-enumNames": [
        "NoStrobeReturnDetection",
        "StrobeReturnLightNotDetected",
        "StrobeReturnLightDetected"
      ],
      "enum": [
        "NoStrobeReturnDetection",
        "StrobeReturnLightNotDetected",
        "StrobeReturnLightDetected"
      ]
    },
    "FlashMode": {
      "type": "string",
      "description": "Corresponds to Xmp.Structure.Flash.ModeChoice",
      "x-enumNames": [
        "Unknown",
        "CompulsoryFlashFiring",
        "CompulsoryFlashSuppression",
        "AutoMode"
      ],
      "enum": [
        "Unknown",
        "CompulsoryFlashFiring",
        "CompulsoryFlashSuppression",
        "AutoMode"
      ]
    },
    "FlashpixVersion": {
      "type": "string",
      "description": "Corresponds to exif.FlashpixVersionChoice",
      "x-enumNames": [
        "V100",
        "V101",
        "V110"
      ],
      "enum": [
        "V100",
        "V101",
        "V110"
      ]
    },
    "FocalPlaneResolutionUnit": {
      "type": "string",
      "description": "Corresponds to exif.FocalPlaneResolutionUnitChoice",
      "x-enumNames": [
        "None",
        "Inch",
        "Meter",
        "Centimeter",
        "Millimeter",
        "Micrometer"
      ],
      "enum": [
        "None",
        "Inch",
        "Meter",
        "Centimeter",
        "Millimeter",
        "Micrometer"
      ]
    },
    "GainControl": {
      "type": "string",
      "description": "Corresponds to exif.GainControlChoice",
      "x-enumNames": [
        "None",
        "LowGainUp",
        "HighGainUp",
        "LowGainDown",
        "HighGainDown"
      ],
      "enum": [
        "None",
        "LowGainUp",
        "HighGainUp",
        "LowGainDown",
        "HighGainDown"
      ]
    },
    "GPSAltitudeRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSAltitudeRefChoice",
      "x-enumNames": [
        "AboveSeaLevel",
        "BelowSeaLevel"
      ],
      "enum": [
        "AboveSeaLevel",
        "BelowSeaLevel"
      ]
    },
    "GPSDestBearingRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSDestBearingRefChoice",
      "x-enumNames": [
        "TrueDirection",
        "MagneticDirection"
      ],
      "enum": [
        "TrueDirection",
        "MagneticDirection"
      ]
    },
    "GPSDestDistanceRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSDestDistanceRefChoice",
      "x-enumNames": [
        "Kilometers",
        "Miles",
        "Knots"
      ],
      "enum": [
        "Kilometers",
        "Miles",
        "Knots"
      ]
    },
    "GPSDifferential": {
      "type": "string",
      "description": "Corresponds to exif.GPSDifferentialChoice",
      "x-enumNames": [
        "WithoutCorrection",
        "WithCorrection"
      ],
      "enum": [
        "WithoutCorrection",
        "WithCorrection"
      ]
    },
    "GPSImgDirectionRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSImgDirectionRefChoice",
      "x-enumNames": [
        "TrueDirection",
        "MagneticDirection"
      ],
      "enum": [
        "TrueDirection",
        "MagneticDirection"
      ]
    },
    "GPSCoordinate": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "lon": {
          "type": "number",
          "format": "double"
        },
        "lat": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "GPSSpeedRef": {
      "type": "string",
      "description": "Corresponds to exif.GPSSpeedRefChoice",
      "x-enumNames": [
        "KilometersPerHour",
        "MilesPerHour",
        "Knots"
      ],
      "enum": [
        "KilometersPerHour",
        "MilesPerHour",
        "Knots"
      ]
    },
    "GPSStatus": {
      "type": "string",
      "description": "Corresponds to exif.GPSStatusChoice",
      "x-enumNames": [
        "MeasurementInProgress",
        "MeasurementIsInteroperability"
      ],
      "enum": [
        "MeasurementInProgress",
        "MeasurementIsInteroperability"
      ]
    },
    "LightSource": {
      "type": "string",
      "description": "Corresponds to exif.LightSourceChoice",
      "x-enumNames": [
        "Unidentified",
        "Daylight",
        "Fluorescent",
        "Tungsten",
        "Flash",
        "FineWeather",
        "CloudyWeather",
        "Shade",
        "DaylightFluorescent",
        "DayWhiteFluorescent",
        "CoolWhiteFluorescent",
        "WhiteFluorescent",
        "StandardIlluminantA",
        "StandardIlluminantB",
        "StandardIlluminantC",
        "D55Illuminant",
        "D65Illuminant",
        "D75Illuminant",
        "D50Illuminant",
        "ISOStudioTungsten",
        "Other"
      ],
      "enum": [
        "Unidentified",
        "Daylight",
        "Fluorescent",
        "Tungsten",
        "Flash",
        "FineWeather",
        "CloudyWeather",
        "Shade",
        "DaylightFluorescent",
        "DayWhiteFluorescent",
        "CoolWhiteFluorescent",
        "WhiteFluorescent",
        "StandardIlluminantA",
        "StandardIlluminantB",
        "StandardIlluminantC",
        "D55Illuminant",
        "D65Illuminant",
        "D75Illuminant",
        "D50Illuminant",
        "ISOStudioTungsten",
        "Other"
      ]
    },
    "MeteringMode": {
      "type": "string",
      "description": "Corresponds to exif.MeteringModeChoice",
      "x-enumNames": [
        "Unidentified",
        "Average",
        "CenterWeightedAverage",
        "Spot",
        "MultiSpot",
        "Pattern",
        "Partial",
        "Reserved",
        "Other"
      ],
      "enum": [
        "Unidentified",
        "Average",
        "CenterWeightedAverage",
        "Spot",
        "MultiSpot",
        "Pattern",
        "Partial",
        "Reserved",
        "Other"
      ]
    },
    "OECF": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Columns": {
          "type": "integer",
          "format": "int32"
        },
        "Rows": {
          "type": "integer",
          "format": "int32"
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Saturation": {
      "type": "string",
      "description": "Corresponds to exif.SaturationChoice",
      "x-enumNames": [
        "Normal",
        "Low",
        "High",
        "Unknown"
      ],
      "enum": [
        "Normal",
        "Low",
        "High",
        "Unknown"
      ]
    },
    "SceneCaptureType": {
      "type": "string",
      "description": "Corresponds to exif.SceneCaptureTypeChoice",
      "x-enumNames": [
        "Standard",
        "Landscape",
        "Portrait",
        "NightScene"
      ],
      "enum": [
        "Standard",
        "Landscape",
        "Portrait",
        "NightScene"
      ]
    },
    "SceneType": {
      "type": "string",
      "description": "Corresponds to exif.SceneTypeChoice",
      "x-enumNames": [
        "DirectlyPhotographedImage"
      ],
      "enum": [
        "DirectlyPhotographedImage"
      ]
    },
    "SensingMethod": {
      "type": "string",
      "description": "Corresponds to exif.SensingMethodChoice",
      "x-enumNames": [
        "Undefined",
        "MonochromeArea",
        "OneChipColourAreaSensor",
        "TwoChipColourAreaSensor",
        "ThreeChipColourAreaSensor",
        "ColourSequentialAreaSensor",
        "MonochromeLinearArea",
        "TrilinearSensor",
        "ColourSequentialLinearSensor"
      ],
      "enum": [
        "Undefined",
        "MonochromeArea",
        "OneChipColourAreaSensor",
        "TwoChipColourAreaSensor",
        "ThreeChipColourAreaSensor",
        "ColourSequentialAreaSensor",
        "MonochromeLinearArea",
        "TrilinearSensor",
        "ColourSequentialLinearSensor"
      ]
    },
    "Sharpness": {
      "type": "string",
      "description": "Corresponds to exif.SharpnessChoice",
      "x-enumNames": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ],
      "enum": [
        "Normal",
        "Soft",
        "Hard",
        "Unknown"
      ]
    },
    "SFR": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Columns": {
          "type": "integer",
          "format": "int32"
        },
        "Rows": {
          "type": "integer",
          "format": "int32"
        },
        "Values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SubjectDistanceRange": {
      "type": "string",
      "description": "Corresponds to exif.SubjectDistanceRangeChoice",
      "x-enumNames": [
        "Unknown",
        "Macro",
        "CloseView",
        "DistantView"
      ],
      "enum": [
        "Unknown",
        "Macro",
        "CloseView",
        "DistantView"
      ]
    },
    "WhiteBalanceExif": {
      "type": "string",
      "description": "Corresponds to exif.WhiteBalanceChoice",
      "x-enumNames": [
        "Auto",
        "Manual",
        "Unknown"
      ],
      "enum": [
        "Auto",
        "Manual",
        "Unknown"
      ]
    },
    "ExifAux": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Lens": {
          "type": "string"
        },
        "SerialNumber": {
          "type": "string"
        }
      }
    },
    "AudioMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "AudioStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AudioStream"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "AudioStream": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "BitRate": {
          "type": "string"
        },
        "BitRateMode": {
          "type": "string"
        },
        "Channels": {
          "type": "string"
        },
        "ChannelPositions": {
          "type": "string"
        },
        "Codec": {
          "type": "string"
        },
        "DurationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "Format": {
          "type": "string"
        },
        "Language": {
          "type": "string"
        },
        "Resolution": {
          "type": "integer",
          "format": "int32"
        },
        "SamplingRate": {
          "type": "integer",
          "format": "int32"
        },
        "StreamSize": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DocumentMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "CharacterCount",
        "CharacterCountWithSpaces",
        "LineCount",
        "PageCount",
        "SlideCount",
        "ParagraphCount",
        "RevisionNumber"
      ],
      "properties": {
        "ApplicationName": {
          "type": "string"
        },
        "ApplicationVersion": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "Creator": {
          "type": "string"
        },
        "Publisher": {
          "type": "string"
        },
        "Company": {
          "type": "string"
        },
        "DocumentTitle": {
          "type": "string"
        },
        "CharacterCount": {
          "type": "integer",
          "format": "int32"
        },
        "CharacterCountWithSpaces": {
          "type": "integer",
          "format": "int32"
        },
        "LineCount": {
          "type": "integer",
          "format": "int32"
        },
        "PageCount": {
          "type": "integer",
          "format": "int32"
        },
        "SlideCount": {
          "type": "integer",
          "format": "int32"
        },
        "ParagraphCount": {
          "type": "integer",
          "format": "int32"
        },
        "RevisionNumber": {
          "type": "integer",
          "format": "int32"
        },
        "Titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ImageTitles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "EpsInfo": {
          "$ref": "#/definitions/EpsMetadata"
        },
        "EmbeddedFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileMetadata"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "EpsMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "IsRasterized",
        "WidthInPoints",
        "HeightInPoints"
      ],
      "properties": {
        "IsRasterized": {
          "type": "boolean"
        },
        "WidthInPoints": {
          "type": "number",
          "format": "double"
        },
        "HeightInPoints": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ImageMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Width",
        "Height",
        "WidthInInch",
        "HeightInInch",
        "WidthInCm",
        "HeightInCm",
        "BitsPerPixel",
        "BitsPerChannel",
        "HasAlpha",
        "IsIndexed",
        "IsExtended",
        "HorizontalResolution",
        "VerticalResolution",
        "TotalFrames",
        "TotalUnspecifiedTiffExtraChannels",
        "HasExifData",
        "HasIptcData",
        "HasAdobeResourceData",
        "HasXmpData",
        "UncompressedSizeInBytes"
      ],
      "properties": {
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        },
        "WidthInInch": {
          "type": "number",
          "format": "double"
        },
        "HeightInInch": {
          "type": "number",
          "format": "double"
        },
        "WidthInCm": {
          "type": "number",
          "format": "double"
        },
        "HeightInCm": {
          "type": "number",
          "format": "double"
        },
        "ColorSpace": {
          "type": "string"
        },
        "ColorProfile": {
          "type": "string"
        },
        "BitsPerPixel": {
          "type": "integer",
          "format": "int32"
        },
        "BitsPerChannel": {
          "type": "integer",
          "format": "int32"
        },
        "Channels": {
          "type": "string"
        },
        "PixelFormat": {
          "type": "string"
        },
        "HasAlpha": {
          "type": "boolean"
        },
        "IsIndexed": {
          "type": "boolean"
        },
        "IsExtended": {
          "type": "boolean"
        },
        "HorizontalResolution": {
          "type": "number",
          "format": "double"
        },
        "VerticalResolution": {
          "type": "number",
          "format": "double"
        },
        "TotalFrames": {
          "type": "integer",
          "format": "int32"
        },
        "TotalUnspecifiedTiffExtraChannels": {
          "type": "integer",
          "format": "int32"
        },
        "HasExifData": {
          "type": "boolean"
        },
        "HasIptcData": {
          "type": "boolean"
        },
        "HasAdobeResourceData": {
          "type": "boolean"
        },
        "HasXmpData": {
          "type": "boolean"
        },
        "UncompressedSizeInBytes": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "VideoMetadata": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Width",
        "Height",
        "DurationInSeconds"
      ],
      "properties": {
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        },
        "DurationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "Format": {
          "type": "string"
        },
        "Codec": {
          "type": "string"
        },
        "OverallBitrate": {
          "type": "integer",
          "format": "int32"
        },
        "VideoStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VideoStream"
          }
        },
        "AudioStreams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AudioStream"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/FileMetadata"
        }
      ]
    },
    "VideoStream": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "DurationInSeconds"
      ],
      "properties": {
        "BitRate": {
          "type": "string"
        },
        "Codec": {
          "type": "string"
        },
        "DisplayAspectRatio": {
          "type": "string"
        },
        "DurationInSeconds": {
          "type": "number",
          "format": "double"
        },
        "Format": {
          "type": "string"
        },
        "FrameCount": {
          "type": "integer",
          "format": "int32"
        },
        "FrameRate": {
          "type": "number",
          "format": "double"
        },
        "Height": {
          "type": "integer",
          "format": "int32"
        },
        "Language": {
          "type": "string"
        },
        "PixelAspectRatio": {
          "type": "number",
          "format": "double"
        },
        "Resolution": {
          "type": "integer",
          "format": "int32"
        },
        "StreamSize": {
          "type": "integer",
          "format": "int64"
        },
        "Width": {
          "type": "integer",
          "format": "int32"
        },
        "Rotation": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "DriveMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Location": {
          "type": "string"
        },
        "FileType": {
          "type": "string"
        },
        "Audit": {
          "$ref": "#/definitions/DriveMetadataAudit"
        },
        "Description": {
          "type": "string"
        }
      }
    },
    "DriveMetadataAudit": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Owner": {
          "type": "string"
        },
        "Modified": {
          "type": "string"
        },
        "Opened": {
          "type": "string"
        },
        "Created": {
          "type": "string"
        }
      }
    },
    "OutputItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "OutputSource"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "FilePath": {
          "type": "string"
        },
        "OutputSource": {
          "$ref": "#/definitions/OutputSource"
        }
      }
    },
    "OutputSource": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Rendered",
        "Embedded"
      ],
      "enum": [
        "Rendered",
        "Embedded"
      ]
    },
    "FileTransfer2ContentCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "TransferId": {
          "type": "string"
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "Metadata": {
          "$ref": "#/definitions/DataDictionary"
        },
        "ContentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileTransferPartial2ContentCreateRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "TransferId": {
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileTransferCreateItem"
          }
        }
      }
    },
    "FileTransferCreateItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FileId": {
          "type": "string"
        },
        "LayerSchemaIds": {
          "type": "array",
          "description": "An optional id list of schemas with type layer.",
          "items": {
            "type": "string"
          }
        },
        "Metadata": {
          "$ref": "#/definitions/DataDictionary"
        },
        "ContentPermissionSetIds": {
          "type": "array",
          "description": "An optional id list of content permission sets. Controls content accessibility outside of content ownership.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TransferSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Start",
        "Limit"
      ],
      "properties": {
        "Channel": {
          "type": "string"
        },
        "SearchString": {
          "type": "string"
        },
        "Sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Start": {
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Filter": {
          "$ref": "#/definitions/FilterBase"
        }
      }
    },
    "TransferSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfTransferViewItem"
        }
      ]
    },
    "BaseResultOfTransferViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransferViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "FileTransferSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Start",
        "Limit"
      ],
      "properties": {
        "SearchString": {
          "type": "string"
        },
        "Sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Start": {
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Filter": {
          "$ref": "#/definitions/FilterBase"
        }
      }
    },
    "FileTransferSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfFileTransferViewItem"
        }
      ]
    },
    "BaseResultOfFileTransferViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileTransferViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "FileTransferViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "State",
        "EntityType"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Identifier": {
          "type": "string"
        },
        "TransferId": {
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/FileTransferState"
        },
        "EntityType": {
          "$ref": "#/definitions/EntityType"
        },
        "ContentId": {
          "type": "string"
        }
      }
    },
    "UserSearchRequest": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "Start",
        "Limit",
        "LifeCycleFilter"
      ],
      "properties": {
        "SearchString": {
          "type": "string"
        },
        "Sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Start": {
          "type": "integer",
          "format": "int32"
        },
        "Limit": {
          "type": "integer",
          "format": "int32"
        },
        "Filter": {
          "$ref": "#/definitions/FilterBase"
        },
        "LifeCycleFilter": {
          "$ref": "#/definitions/LifeCycleFilter"
        }
      }
    },
    "UserSearchResult": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "ElapsedMilliseconds"
      ],
      "properties": {
        "ElapsedMilliseconds": {
          "type": "integer",
          "format": "int64"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/BaseResultOfUserViewItem"
        }
      ]
    },
    "BaseResultOfUserViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    },
    "UserViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "UserRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/UserItem"
        }
      ]
    },
    "UserDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Password": {
          "type": "string"
        },
        "UserRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRoleViewItem"
          }
        },
        "Comment": {
          "type": "string"
        },
        "LanguageCode": {
          "type": "string"
        },
        "Address": {
          "$ref": "#/definitions/UserAddress"
        },
        "Privilege": {
          "$ref": "#/definitions/UserPrivilege"
        },
        "Drives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DriveViewItem"
          }
        },
        "OwnerTokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnerTokenViewItem"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/UserItem"
        }
      ]
    },
    "UserAddress": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Company": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "AlternativeAddress": {
          "type": "string"
        },
        "Department": {
          "type": "string"
        },
        "Zip": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        },
        "CountryCode": {
          "type": "string"
        }
      }
    },
    "UserPrivilege": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "CanBeInternalContact",
        "CanChangeOwnProfile"
      ],
      "properties": {
        "CanBeInternalContact": {
          "type": "boolean"
        },
        "CanChangeOwnProfile": {
          "type": "boolean"
        }
      }
    },
    "DriveViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      }
    },
    "OwnerTokenViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string",
          "description": "The ownertoken id."
        },
        "UserId": {
          "type": "string",
          "description": "The id of the user to whom this ownertoken currently belongs to."
        }
      }
    },
    "UserProfileViewItem": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Id": {
          "type": "string"
        },
        "EmailAddress": {
          "type": "string"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "Company": {
          "type": "string"
        },
        "Address": {
          "type": "string"
        },
        "AlternativeAddress": {
          "type": "string"
        },
        "Department": {
          "type": "string"
        },
        "Zip": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Phone": {
          "type": "string"
        }
      }
    },
    "ChannelViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "SortOrder",
        "EntityType"
      ],
      "properties": {
        "Id": {
          "type": "string"
        },
        "SortOrder": {
          "type": "integer",
          "format": "int32"
        },
        "SearchIndexId": {
          "type": "string",
          "description": "The search index id."
        },
        "EntityType": {
          "$ref": "#/definitions/EntityType"
        },
        "SchemaIds": {
          "type": "array",
          "description": "An id list of schemas with schema type content whose content documents should be found by the simple search.\nThe search by filters and aggregations are unaffected.",
          "items": {
            "type": "string"
          }
        },
        "Filter": {
          "description": "An optional search filter. Limits the content document result set on each search and aggregation request.",
          "$ref": "#/definitions/FilterBase"
        },
        "Names": {
          "description": "Language specific names.",
          "$ref": "#/definitions/TranslatedStringDictionary"
        },
        "Sort": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortInfo"
          }
        },
        "Aggregations": {
          "type": "array",
          "description": "An optional list of aggregators. These aggregations are added by default on each aggregation requests.",
          "items": {
            "$ref": "#/definitions/AggregatorBase"
          }
        },
        "ExtendedSimpleSearchFields": {
          "type": "array",
          "description": "An Optional list of fields. These fields extend the list of simple search fields outside the bounds of any schema field configuration.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContentsByIdsRequest": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ContentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BaseResultOfOutputDetailViewItem": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "TotalResults"
      ],
      "properties": {
        "TotalResults": {
          "type": "integer",
          "format": "int64"
        },
        "Results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputDetailViewItem"
          }
        },
        "PageToken": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {},
  "responses": {},
  "securityDefinitions": {}
}